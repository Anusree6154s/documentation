<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://anusree6154s.github.io/documentation/feed.xml" rel="self" type="application/atom+xml" /><link href="https://anusree6154s.github.io/documentation/" rel="alternate" type="text/html" /><updated>2025-01-18T04:05:50+00:00</updated><id>https://anusree6154s.github.io/documentation/feed.xml</id><title type="html">Blog &amp;amp; Docs</title><subtitle>I&apos;m learning to build web apps using the MERN stack, Next.js, and TypeScript. I love tinkering with new tech and sharing what I learn along the way. This is my little corner where I jot down anything that I find difficult in my tech journey. I hope you find this space useful!</subtitle><author><name>Anusree Anilkumar</name></author><entry><title type="html">Typescript</title><link href="https://anusree6154s.github.io/documentation/typescript/" rel="alternate" type="text/html" title="Typescript" /><published>2025-01-18T04:05:50+00:00</published><updated>2025-01-18T04:05:50+00:00</updated><id>https://anusree6154s.github.io/documentation/typescript</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/typescript/"><![CDATA[<h2 id="typescript">TypeScript</h2>]]></content><author><name>Anusree Anilkumar</name></author><summary type="html"><![CDATA[A brief description 2]]></summary></entry><entry><title type="html">Readme</title><link href="https://anusree6154s.github.io/documentation/README/" rel="alternate" type="text/html" title="Readme" /><published>2025-01-18T04:05:50+00:00</published><updated>2025-01-18T04:05:50+00:00</updated><id>https://anusree6154s.github.io/documentation/README</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/README/"><![CDATA[<h2 id="css">Css</h2>

<h3 id="websites-for-help">Websites for help</h3>

<ol>
  <li>Handrawn icons/images
    <ul>
      <li><a href="https://undraw.co/">unDraw</a></li>
      <li><a href="https://storyset.com/">storyset</a> - Already drawn line drawings</li>
      <li><a href="https://www.humaaans.com/">humaaans</a> - Mix-&amp;-match illustrations of people with a design library</li>
      <li><a href="https://www.openpeeps.com/">openpeeps</a> - Mix-&amp;-match illustrations of people with a design library</li>
    </ul>
  </li>
  <li>svg/icons
    <ul>
      <li><a href="https://www.svgrepo.com/">svgrepo</a></li>
      <li><a href="https://iconscout.com/">iconscout</a></li>
    </ul>
  </li>
  <li>Free Stock Images: <a href="https://www.pexels.com/">Pexels</a></li>
  <li>Free stck Images: <a href="https://pixabay.com/">PixaBay</a></li>
  <li>fonts: <a href="https://fonts.google.com/">Google Fonts</a></li>
  <li>Color pallets etc: <a href="https://coolors.co/">Coolors</a></li>
</ol>

<h3 id="websites-for-inspiration">Websites for inspiration</h3>

<ol>
  <li><a href="https://dribbble.com/">Dribble</a></li>
</ol>

<h3 id="websites-to-practise">Websites to practise</h3>

<ol>
  <li>Beginner practise html+css: <a href="https://www.frontendmentor.io/">Frontendmentor</a></li>
  <li>higher level css practise: <a href="https://cssbattle.dev/">Css Battle</a></li>
</ol>

<h2 id="dev">DEV</h2>

<h3 id="web-dev-ideas-to-practise-from-youtube">Web Dev ideas to practise from youtube</h3>

<ol>
  <li>React:
    <ul>
      <li>Hospital slot booking app</li>
    </ul>
  </li>
</ol>

<h2 id="react">React</h2>

<h3 id="things-to-remember-while-starting-a-react-app">Things to remember while starting a react app</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">npx create-react-app</code></li>
  <li>use <code class="language-plaintext highlighter-rouge">tailwind</code> for css</li>
  <li>search for libraries. dont make things from scratch.</li>
  <li>divide code into componenets.</li>
</ul>]]></content><author><name>Anusree Anilkumar</name></author><summary type="html"><![CDATA[Css]]></summary></entry><entry><title type="html">Readme</title><link href="https://anusree6154s.github.io/documentation/README/" rel="alternate" type="text/html" title="Readme" /><published>2025-01-18T04:05:50+00:00</published><updated>2025-01-18T04:05:50+00:00</updated><id>https://anusree6154s.github.io/documentation/README</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/README/"><![CDATA[<h2 id="guidelines-to-cleaner-git-commits">Guidelines to cleaner git commits</h2>

<h3 id="standardized-documentation-followed-for-cleaner-git-commits">Standardized documentation followed for cleaner git commits</h3>
<ul>
  <li><a href="https://github.com/lppedd/idea-conventional-commit">Conventional Commit (Standard one)</a></li>
  <li><a href="https://github.com/RomuloOliveira/commit-messages-guide?tab=readme-ov-file">Commit messages guide (Simplified one - found it useful)</a></li>
  <li><a href="https://github.com/carloscuesta/gitmoji">Add emojis in git commits (For personal ones)</a></li>
</ul>

<h3 id="to-integrate-git-commit-message-helper-to-vs-code">To integrate git commit message helper to vs-code</h3>
<ul>
  <li>
    <h4 id="via-cli">via cli</h4>
    <ul>
      <li><a href="https://github.com/andostronaut/commitizen-code">commitizen-cli documentation</a></li>
      <li>
        <h4 id="method">Method:</h4>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">npm i -g commitizen-cli</code> in vscode terminal</li>
          <li>to use either <code class="language-plaintext highlighter-rouge">commitizen-cli</code> or <code class="language-plaintext highlighter-rouge">npx commitizen-cli (to skip first step)</code></li>
          <li>then follow terminal guidelines</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <h4 id="vscode-extension-not-developed-yet">vscode extension: not developed yet</h4>
  </li>
</ul>

<h2 id="git-commit-practices-pulling-pushing-in-new-branch-squash-etc">Git commit practices (pulling, pushing in new branch, squash etc)</h2>
<ul>
  <li>https://trunkbaseddevelopment.com/</li>
  <li>https://profy.dev/ - website to practise git and agile</li>
</ul>]]></content><author><name>Anusree Anilkumar</name></author><summary type="html"><![CDATA[Guidelines to cleaner git commits]]></summary></entry><entry><title type="html">Readme</title><link href="https://anusree6154s.github.io/documentation/README/" rel="alternate" type="text/html" title="Readme" /><published>2025-01-18T04:05:50+00:00</published><updated>2025-01-18T04:05:50+00:00</updated><id>https://anusree6154s.github.io/documentation/README</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/README/"><![CDATA[<p>git cheat sheet: https://media.licdn.com/dms/image/v2/D4D22AQFWkWeD6D4ksA/feedshare-shrink_1280/feedshare-shrink_1280/0/1729225766763?e=1732147200&amp;v=beta&amp;t=lRJJDZeffcMU0rbvRJi0oSef2p3xGOG9BQWXG9dhrTQ</p>

<h3 id="example-commit-message">Example Commit Message</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>feat(task-manager): add task sorting feature

Implement a new feature that allows users to sort tasks by their deadlines. This improvement enhances user experience by enabling better task management.
</code></pre></div></div>

<h3 id="breakdown-of-the-commit-message">Breakdown of the Commit Message</h3>

<ol>
  <li><strong>Type</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">feat</code>: This indicates that a new feature has been added to the project.</li>
    </ul>
  </li>
  <li><strong>Scope</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">(task-manager)</code>: This specifies the part of the codebase that the change affects, which is the task manager component.</li>
    </ul>
  </li>
  <li><strong>Description</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">add task sorting feature</code>: A brief summary of what was done. It’s clear and to the point.</li>
    </ul>
  </li>
  <li><strong>Body</strong> (optional):
    <ul>
      <li>The body provides additional context about the change. Here, it describes what the new feature does and its benefits.</li>
    </ul>
  </li>
</ol>

<h3 id="other-examples">Other Examples</h3>

<h4 id="bug-fix">Bug Fix</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fix(task-table): resolve table sorting bug

Fix an issue where tasks were not sorting correctly when the user clicked the header. This resolves discrepancies in the task display order.
</code></pre></div></div>

<h4 id="documentation-update">Documentation Update</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docs: update README with setup instructions

Revise the README to include step-by-step setup instructions for new contributors, improving accessibility to the project.
</code></pre></div></div>

<h4 id="style-change">Style Change</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>style(TaskModal): adjust button alignment

Change the alignment of the buttons in the TaskModal component to improve the visual layout without affecting functionality.
</code></pre></div></div>

<h4 id="refactor">Refactor</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>refactor(file-upload): simplify file validation logic

Refactor the file validation logic in the FileUpload component to make it more readable and maintainable without changing the behavior.
</code></pre></div></div>

<h4 id="test-addition">Test Addition</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test(task-service): add unit tests for createTask function

Add unit tests for the createTask function to ensure that it handles various input scenarios correctly.
</code></pre></div></div>

<h4 id="chore">Chore</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chore: update dependencies

Update project dependencies to their latest versions to improve security and performance.
</code></pre></div></div>

<h3 id="summary">Summary</h3>
<p>By following this structured format, your commit messages become more informative and standardized, making it easier for collaborators and contributors to understand the changes made to the codebase.</p>]]></content><author><name>Anusree Anilkumar</name></author><summary type="html"><![CDATA[git cheat sheet: https://media.licdn.com/dms/image/v2/D4D22AQFWkWeD6D4ksA/feedshare-shrink_1280/feedshare-shrink_1280/0/1729225766763?e=1732147200&amp;v=beta&amp;t=lRJJDZeffcMU0rbvRJi0oSef2p3xGOG9BQWXG9dhrTQ Example Commit Message feat(task-manager): add task sorting feature Implement a new feature that allows users to sort tasks by their deadlines. This improvement enhances user experience by enabling better task management. Breakdown of the Commit Message Type: feat: This indicates that a new feature has been added to the project. Scope: (task-manager): This specifies the part of the codebase that the change affects, which is the task manager component. Description: add task sorting feature: A brief summary of what was done. It’s clear and to the point. Body (optional): The body provides additional context about the change. Here, it describes what the new feature does and its benefits. Other Examples Bug Fix fix(task-table): resolve table sorting bug Fix an issue where tasks were not sorting correctly when the user clicked the header. This resolves discrepancies in the task display order. Documentation Update docs: update README with setup instructions Revise the README to include step-by-step setup instructions for new contributors, improving accessibility to the project. Style Change style(TaskModal): adjust button alignment Change the alignment of the buttons in the TaskModal component to improve the visual layout without affecting functionality. Refactor refactor(file-upload): simplify file validation logic Refactor the file validation logic in the FileUpload component to make it more readable and maintainable without changing the behavior. Test Addition test(task-service): add unit tests for createTask function Add unit tests for the createTask function to ensure that it handles various input scenarios correctly. Chore chore: update dependencies Update project dependencies to their latest versions to improve security and performance. Summary By following this structured format, your commit messages become more informative and standardized, making it easier for collaborators and contributors to understand the changes made to the codebase.]]></summary></entry><entry><title type="html">Readme</title><link href="https://anusree6154s.github.io/documentation/README/" rel="alternate" type="text/html" title="Readme" /><published>2025-01-18T04:05:50+00:00</published><updated>2025-01-18T04:05:50+00:00</updated><id>https://anusree6154s.github.io/documentation/README</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/README/"><![CDATA[<h1 id="concepts-related-to-react-node-web-app">Concepts related to React-Node Web App</h1>

<p><br /></p>

<h2 id="table-of-contents">Table of Contents</h2>

<ol>
  <li><a href="#1-approx-file-organisation-template-for-react-node-web-app">Approx File Organisation Template for React-Node Web App</a></li>
  <li><a href="#2-ci">CI</a></li>
  <li><a href="#3-how-to-set-up-ci">How to Set Up CI</a></li>
  <li><a href="#4-why-do-we-need-ci">Why Do We Need CI</a></li>
  <li><a href="#5-JSDocs">Writing JSDocs for backend and frontend</a></li>
</ol>

<p><br /></p>

<h2 id="approx-file-organisation-template-for-react-node-web-app">Approx File Organisation Template for React-Node Web App</h2>
<p>Organizing a project with both client-side and server-side code requires a structured approach to ensure maintainability, scalability, and clarity. Here’s a comprehensive folder structure for a project that includes client-side (React) and server-side (Node.js/Express) code, with folders for services, utilities, middlewares, and tests.</p>

<h3 id="suggested-folder-structure">Suggested Folder Structure</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>project-root/
│
├── client/                 # React frontend application
│   ├── public/              # Public assets
│   ├── src/                 # Source files
│   │   ├── assets/          # Images, fonts, etc.
│   │   ├── components/      # Reusable components
│   │   ├── pages/           # Page components or views
│   │   ├── services/        # API service functions
│   │   ├── utils/           # Utility functions
│   │   ├── hooks/           # Custom React hooks
│   │   ├── contexts/        # React context providers
│   │   ├── styles/          # Global styles and CSS modules
│   │   ├── App.js           # Main application component
│   │   ├── index.js         # Entry point for React app
│   │   └── ...              # Other frontend-specific files
│   ├── .env                 # Environment variables for frontend
│   ├── package.json         # Frontend dependencies and scripts
│   └── README.md            # Frontend documentation
│
├── server/                 # Node.js/Express backend application
│   ├── config/             # Configuration files (e.g., database, JWT)
│   ├── controllers/        # Route handlers
│   ├── middlewares/        # Express middlewares (e.g., authentication, logging)
│   ├── models/             # Database models
│   ├── routes/             # API route definitions
│   ├── services/           # Business logic and external service integration
│   ├── utils/              # Utility functions
│   ├── validators/         # Request validation schemas
│   ├── tests/              # Unit and integration tests
│   │   ├── unit/           # Unit tests
│   │   ├── integration/    # Integration tests
│   │   └── ...             # Other test types or configurations
│   ├── app.js              # Main application entry point
│   ├── server.js           # Server setup and initialization
│   ├── .env                # Environment variables for backend
│   ├── package.json        # Backend dependencies and scripts
│   └── README.md           # Backend documentation
│
├── .gitignore              # Git ignore file
├── docker-compose.yml      # Docker Compose configuration (if using Docker)
└── README.md               # Project overview and setup instructions
</code></pre></div></div>

<h3 id="explanation">Explanation</h3>

<h4 id="client-folder-client">Client Folder (<code class="language-plaintext highlighter-rouge">client/</code>)</h4>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">public/</code></strong>: Contains static assets like <code class="language-plaintext highlighter-rouge">index.html</code>, favicon, and static images.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">src/</code></strong>:
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">assets/</code></strong>: For static files like images and fonts.</li>
      <li><strong><code class="language-plaintext highlighter-rouge">components/</code></strong>: Reusable UI components.</li>
      <li><strong><code class="language-plaintext highlighter-rouge">pages/</code></strong>: Components representing pages or views.</li>
      <li><strong><code class="language-plaintext highlighter-rouge">services/</code></strong>: Functions for making API calls and interacting with backend services.</li>
      <li><strong><code class="language-plaintext highlighter-rouge">utils/</code></strong>: Utility functions and helpers.</li>
      <li><strong><code class="language-plaintext highlighter-rouge">hooks/</code></strong>: Custom React hooks.</li>
      <li><strong><code class="language-plaintext highlighter-rouge">contexts/</code></strong>: React context providers for state management.</li>
      <li><strong><code class="language-plaintext highlighter-rouge">styles/</code></strong>: Global styles, CSS modules, and theme settings.</li>
      <li><strong><code class="language-plaintext highlighter-rouge">App.js</code></strong>: Main component that wraps the entire application.</li>
      <li><strong><code class="language-plaintext highlighter-rouge">index.js</code></strong>: Entry point for the React application.</li>
    </ul>
  </li>
</ul>

<h4 id="server-folder-server">Server Folder (<code class="language-plaintext highlighter-rouge">server/</code>)</h4>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">config/</code></strong>: Configuration files for database connections, environment variables, and other settings.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">controllers/</code></strong>: Functions that handle requests and responses.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">middlewares/</code></strong>: Custom Express middleware (e.g., for authentication or logging).</li>
  <li><strong><code class="language-plaintext highlighter-rouge">models/</code></strong>: Database schemas and models.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">routes/</code></strong>: Definitions of API routes and their associated controllers.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">services/</code></strong>: Business logic and integrations with external services.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">utils/</code></strong>: Utility functions and helpers.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">validators/</code></strong>: Request validation schemas using libraries like Joi.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">tests/</code></strong>:
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">unit/</code></strong>: Unit tests for individual components or functions.</li>
      <li><strong><code class="language-plaintext highlighter-rouge">integration/</code></strong>: Integration tests that involve multiple components or services.</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">app.js</code></strong>: Main application logic.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">server.js</code></strong>: Server initialization and startup script.</li>
</ul>

<h3 id="additional-considerations">Additional Considerations</h3>

<ul>
  <li><strong>Testing</strong>: You might also include separate folders for different types of tests (unit, integration) and potentially mock data if required.</li>
  <li><strong>Docker</strong>: If using Docker, you can include a <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file for defining multi-container applications.</li>
  <li><strong>Documentation</strong>: Each section should include its own <code class="language-plaintext highlighter-rouge">README.md</code> for specific instructions and details.</li>
</ul>

<p>This structure will help maintain a clean separation between client-side and server-side code, making it easier to manage and scale your application.</p>

<p><br /></p>

<h2 id="2-ci">2. CI</h2>
<p>Continuous Integration (CI) is a development practice where code changes are automatically tested and integrated into the shared repository multiple times a day. This practice helps in maintaining the quality and consistency of the codebase throughout the development process. Here’s a breakdown of CI:</p>

<h3 id="key-aspects-of-continuous-integration-ci">Key Aspects of Continuous Integration (CI)</h3>

<ol>
  <li><strong>Frequent Integration</strong>:
    <ul>
      <li>Developers regularly merge their code changes into a shared repository, often multiple times a day.</li>
      <li>This frequent integration helps in identifying issues early, reducing integration problems.</li>
    </ul>
  </li>
  <li><strong>Automated Testing</strong>:
    <ul>
      <li>Every code change triggers automated tests to verify that the new code does not break existing functionality.</li>
      <li>Tests can include unit tests, integration tests, and end-to-end tests.</li>
    </ul>
  </li>
  <li><strong>Automated Builds</strong>:
    <ul>
      <li>CI systems automatically build the application with every code change.</li>
      <li>This ensures that the application compiles and runs correctly in an automated environment.</li>
    </ul>
  </li>
  <li><strong>Immediate Feedback</strong>:
    <ul>
      <li>Developers receive immediate feedback about the health of the application after integrating their changes.</li>
      <li>CI tools provide reports on test results, build status, and potential issues.</li>
    </ul>
  </li>
  <li><strong>Version Control Integration</strong>:
    <ul>
      <li>CI systems are integrated with version control systems (e.g., Git) to monitor code changes and trigger automated processes.</li>
    </ul>
  </li>
  <li><strong>Consistency</strong>:
    <ul>
      <li>CI helps maintain a consistent codebase by ensuring that all code changes are tested and built in the same environment.</li>
    </ul>
  </li>
</ol>

<h3 id="benefits-of-continuous-integration">Benefits of Continuous Integration</h3>

<ul>
  <li><strong>Early Detection of Issues</strong>: Bugs and integration problems are identified and fixed early in the development process.</li>
  <li><strong>Improved Code Quality</strong>: Regular testing and integration ensure that code quality remains high.</li>
  <li><strong>Faster Development Cycle</strong>: Automated processes streamline the development cycle, leading to faster releases.</li>
  <li><strong>Enhanced Collaboration</strong>: Regular integration helps developers stay aligned and reduces conflicts between code changes.</li>
</ul>

<h3 id="popular-ci-tools">Popular CI Tools</h3>

<ul>
  <li><strong>Jenkins</strong>: An open-source automation server that supports building, deploying, and automating any project.</li>
  <li><strong>Travis CI</strong>: A cloud-based CI service that integrates with GitHub and automates testing and deployment.</li>
  <li><strong>CircleCI</strong>: A cloud-based CI/CD platform that automates the build, test, and deployment processes.</li>
  <li><strong>GitHub Actions</strong>: Integrated into GitHub, it allows automation of workflows directly within the repository.</li>
  <li><strong>GitLab CI</strong>: Part of GitLab, providing integrated CI/CD pipelines within the GitLab ecosystem.</li>
</ul>

<h3 id="example-workflow">Example Workflow</h3>

<ol>
  <li><strong>Code Commit</strong>: A developer commits code changes to the version control system.</li>
  <li><strong>CI Trigger</strong>: The CI system detects the commit and triggers an automated build and test process.</li>
  <li><strong>Build and Test</strong>: The CI system builds the application and runs tests to verify the code changes.</li>
  <li><strong>Feedback</strong>: The CI system provides feedback on the build and test results, highlighting any issues.</li>
  <li><strong>Integration</strong>: If the tests pass, the code changes are integrated into the main codebase. If issues are found, the developer is notified to address them.</li>
</ol>

<p>By incorporating CI into your development process, you can enhance the quality, reliability, and efficiency of your software projects.</p>

<p><br /></p>

<h2 id="3-how-to-setup-ci">3. How to setup CI</h2>
<p>Setting up Continuous Integration (CI) involves configuring a CI tool to automatically build, test, and sometimes deploy your application whenever changes are made to the codebase. Here’s a general guide on how to set up CI using a popular CI tool, such as GitHub Actions, Jenkins, Travis CI, or CircleCI:</p>

<h3 id="1-choose-a-ci-tool">1. <strong>Choose a CI Tool</strong></h3>

<p>Choose a CI tool that best fits your needs. Popular options include:</p>

<ul>
  <li><strong>GitHub Actions</strong>: Integrated into GitHub repositories.</li>
  <li><strong>Jenkins</strong>: An open-source automation server.</li>
  <li><strong>Travis CI</strong>: Cloud-based and integrates well with GitHub.</li>
  <li><strong>CircleCI</strong>: Cloud-based with extensive integration capabilities.</li>
</ul>

<h3 id="2-set-up-your-ci-tool">2. <strong>Set Up Your CI Tool</strong></h3>

<h4 id="github-actions"><strong>GitHub Actions</strong></h4>

<ol>
  <li><strong>Create a Workflow File</strong>:
    <ul>
      <li>In your GitHub repository, create a directory named <code class="language-plaintext highlighter-rouge">.github/workflows/</code>.</li>
      <li>Inside this directory, create a YAML file (e.g., <code class="language-plaintext highlighter-rouge">ci.yml</code>) for defining your CI workflow.</li>
    </ul>
  </li>
  <li><strong>Define the Workflow</strong>:
    <ul>
      <li>Here’s an example of a basic GitHub Actions workflow for a Node.js application:</li>
    </ul>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">CI</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">main</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">main</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>

    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set up Node.js</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v2</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">14'</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">npm install</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run tests</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">npm test</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Push Changes</strong>:
    <ul>
      <li>Commit and push the workflow file to your repository. GitHub Actions will automatically pick it up and run the defined tasks.</li>
    </ul>
  </li>
</ol>

<h4 id="jenkins"><strong>Jenkins</strong></h4>

<ol>
  <li><strong>Install Jenkins</strong>:
    <ul>
      <li>Follow the instructions on the <a href="https://www.jenkins.io/download/">Jenkins website</a> to install Jenkins on your server or use a Jenkins cloud service.</li>
    </ul>
  </li>
  <li><strong>Create a New Job</strong>:
    <ul>
      <li>Open Jenkins and click on “New Item.”</li>
      <li>Choose “Freestyle project” or “Pipeline” depending on your needs.</li>
    </ul>
  </li>
  <li><strong>Configure the Job</strong>:
    <ul>
      <li><strong>Source Code Management</strong>: Configure your repository URL and credentials.</li>
      <li><strong>Build Triggers</strong>: Set up triggers like “GitHub hook trigger for GITScm polling” for automatic builds.</li>
      <li><strong>Build Steps</strong>: Add build steps to execute commands (e.g., shell commands for testing).</li>
    </ul>
  </li>
  <li><strong>Add Post-Build Actions</strong>:
    <ul>
      <li>Configure actions like archiving test results or deploying artifacts.</li>
    </ul>
  </li>
  <li><strong>Save and Build</strong>:
    <ul>
      <li>Save the configuration and start a build. Jenkins will execute the configured steps and provide feedback.</li>
    </ul>
  </li>
</ol>

<h4 id="travis-ci"><strong>Travis CI</strong></h4>

<ol>
  <li><strong>Create a <code class="language-plaintext highlighter-rouge">.travis.yml</code> File</strong>:
    <ul>
      <li>In the root of your repository, create a <code class="language-plaintext highlighter-rouge">.travis.yml</code> file.</li>
    </ul>
  </li>
  <li><strong>Define the Build Process</strong>:
    <ul>
      <li>Here’s an example configuration for a Node.js application:</li>
    </ul>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">language</span><span class="pi">:</span> <span class="s">node_js</span>
<span class="na">node_js</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">14"</span>

<span class="na">script</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">npm install</span>
  <span class="pi">-</span> <span class="s">npm test</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Enable Travis CI</strong>:
    <ul>
      <li>Sign in to Travis CI with your GitHub account and enable the repository.</li>
    </ul>
  </li>
  <li><strong>Push Changes</strong>:
    <ul>
      <li>Commit and push the <code class="language-plaintext highlighter-rouge">.travis.yml</code> file to your repository. Travis CI will automatically start the build process.</li>
    </ul>
  </li>
</ol>

<h4 id="circleci"><strong>CircleCI</strong></h4>

<ol>
  <li><strong>Create a <code class="language-plaintext highlighter-rouge">.circleci/config.yml</code> File</strong>:
    <ul>
      <li>In the root of your repository, create a <code class="language-plaintext highlighter-rouge">.circleci/config.yml</code> file.</li>
    </ul>
  </li>
  <li><strong>Define the Configuration</strong>:
    <ul>
      <li>Here’s an example configuration for a Node.js application:</li>
    </ul>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="m">2.1</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">docker</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">circleci/node:14</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">checkout</span>
      <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
          <span class="na">command</span><span class="pi">:</span> <span class="s">npm install</span>
      <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">Run tests</span>
          <span class="na">command</span><span class="pi">:</span> <span class="s">npm test</span>

<span class="na">workflows</span><span class="pi">:</span>
  <span class="na">version</span><span class="pi">:</span> <span class="m">2</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">jobs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">build</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Sign Up and Configure</strong>:
    <ul>
      <li>Sign up for CircleCI and link your repository.</li>
    </ul>
  </li>
  <li><strong>Push Changes</strong>:
    <ul>
      <li>Commit and push the configuration file to your repository. CircleCI will automatically start the build process.</li>
    </ul>
  </li>
</ol>

<h3 id="3-monitor-and-maintain">3. <strong>Monitor and Maintain</strong></h3>

<ul>
  <li><strong>Review Build Status</strong>: Monitor the CI dashboard for build results and issues.</li>
  <li><strong>Update Configuration</strong>: Adjust your CI configuration as needed for new dependencies, test cases, or deployment steps.</li>
  <li><strong>Fix Failures</strong>: Address any build or test failures promptly to maintain code quality.</li>
</ul>

<p>By following these steps, you can set up a CI pipeline that will automate the testing and integration process, improving the reliability and efficiency of your development workflow.</p>

<p><br /></p>

<h2 id="4-why-do-we-need-ci">4. Why do we need CI</h2>
<p>Continuous Integration (CI) is essential for several reasons, particularly in modern software development practices. Here’s why CI is important:</p>

<h3 id="1-early-detection-of-issues">1. <strong>Early Detection of Issues</strong></h3>

<ul>
  <li><strong>Frequent Testing</strong>: CI automates the process of testing code changes as soon as they are committed, which helps in catching issues early. This reduces the likelihood of bugs accumulating over time and being discovered late in the development cycle.</li>
</ul>

<h3 id="2-improved-code-quality">2. <strong>Improved Code Quality</strong></h3>

<ul>
  <li><strong>Consistent Testing</strong>: Regular and automated testing ensures that new code does not break existing functionality, leading to a more stable and reliable codebase.</li>
  <li><strong>Code Review</strong>: CI systems often include linting and formatting checks, ensuring code quality and consistency.</li>
</ul>

<h3 id="3-faster-development-cycle">3. <strong>Faster Development Cycle</strong></h3>

<ul>
  <li><strong>Automated Builds and Tests</strong>: CI automates the build and test processes, which speeds up development and allows developers to focus on writing code rather than manually managing builds and tests.</li>
  <li><strong>Quick Feedback</strong>: Immediate feedback on code changes helps developers address issues faster and iterate more quickly.</li>
</ul>

<h3 id="4-reduced-integration-problems">4. <strong>Reduced Integration Problems</strong></h3>

<ul>
  <li><strong>Frequent Integration</strong>: By integrating code changes multiple times a day, CI reduces the risk of integration problems that often arise when integrating large changes at the end of a development cycle.</li>
</ul>

<h3 id="5-increased-confidence-in-code">5. <strong>Increased Confidence in Code</strong></h3>

<ul>
  <li><strong>Automated Testing</strong>: CI ensures that code changes are tested against a set of predefined tests, which increases confidence that the code is functioning as expected.</li>
  <li><strong>Consistent Environment</strong>: CI pipelines often run in consistent environments, reducing the risk of environment-specific issues.</li>
</ul>

<h3 id="6-enhanced-collaboration">6. <strong>Enhanced Collaboration</strong></h3>

<ul>
  <li><strong>Team Alignment</strong>: CI encourages frequent integration of code changes, keeping all team members aligned and reducing the likelihood of conflicts between different developers’ code.</li>
  <li><strong>Transparency</strong>: CI systems provide visibility into the build and test processes, making it easier for teams to collaborate and understand the current state of the project.</li>
</ul>

<h3 id="7-efficient-deployment">7. <strong>Efficient Deployment</strong></h3>

<ul>
  <li><strong>Automated Deployment</strong>: Many CI systems include Continuous Deployment (CD) capabilities, automating the deployment of code changes to staging or production environments. This streamlines the release process and reduces manual intervention.</li>
</ul>

<h3 id="8-documentation-and-metrics">8. <strong>Documentation and Metrics</strong></h3>

<ul>
  <li><strong>Build History</strong>: CI systems maintain a history of builds and test results, which helps in tracking the progress and identifying trends or recurring issues.</li>
  <li><strong>Test Reports</strong>: CI provides detailed reports on test results, code coverage, and other metrics, aiding in maintaining and improving code quality.</li>
</ul>

<h3 id="9-scalability">9. <strong>Scalability</strong></h3>

<ul>
  <li><strong>Handling Multiple Changes</strong>: CI systems can handle changes from multiple developers simultaneously, ensuring that all code changes are integrated and tested efficiently.</li>
  <li><strong>Scaling Teams</strong>: As teams grow, CI helps manage the complexity of integrating and testing code from multiple contributors.</li>
</ul>

<p>In summary, CI enhances the development process by ensuring that code changes are continuously tested and integrated, leading to higher quality software, faster development cycles, and better collaboration among team members.</p>

<p><br /></p>

<h2 id="where-do-we-place-ci-in-code">Where do we place CI in code</h2>
<p>In a typical project folder structure, CI-related files and configurations are usually placed in specific directories to keep them organized and easily accessible. Here’s where you might place CI-related files in your folder organization:</p>

<h3 id="project-folder-structure-with-ci">Project Folder Structure with CI</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/project-root
├── /src
│   ├── /client       # Client-side code (React, etc.)
│   └── /server       # Server-side code (Node.js, Express, etc.)
│
├── /config           # Configuration files
│   ├── /ci           # CI-related configurations
│   │   ├── github-actions.yml  # GitHub Actions workflow file
│   │   ├── travis.yml          # Travis CI configuration file
│   │   └── circleci.yml         # CircleCI configuration file
│   ├── /database    # Database configuration
│   └── /server      # Server configuration
│
├── /scripts         # Helper scripts
│   ├── build.sh     # Build scripts
│   └── deploy.sh    # Deployment scripts
│
├── /tests           # Test files and configurations
│   ├── /unit        # Unit tests
│   ├── /integration # Integration tests
│   └── /e2e         # End-to-end tests
│
├── /public          # Public assets (e.g., images, static files)
├── /docs            # Documentation
│   └── README.md    # Project documentation
│
├── .gitignore       # Git ignore file
├── package.json     # Node.js package configuration
├── .eslintrc.json   # ESLint configuration
└── .prettierrc      # Prettier configuration
</code></pre></div></div>

<h3 id="detailed-explanation">Detailed Explanation</h3>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">/config/ci</code></strong>: This directory contains CI-related configuration files for different CI tools like GitHub Actions, Travis CI, CircleCI, etc. It’s a central place to keep all CI configurations.</p>

    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">github-actions.yml</code></strong>: For GitHub Actions workflows.</li>
      <li><strong><code class="language-plaintext highlighter-rouge">travis.yml</code></strong>: For Travis CI configurations.</li>
      <li><strong><code class="language-plaintext highlighter-rouge">circleci.yml</code></strong>: For CircleCI configurations.</li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">/scripts</code></strong>: Contains helper scripts for various tasks such as building and deploying the application. Although not directly related to CI, these scripts are often used in CI pipelines.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">/tests</code></strong>: Includes all test files and configurations. This is where you would place your unit tests, integration tests, and end-to-end tests that CI will execute.</p>
  </li>
</ul>

<h3 id="placing-ci-files">Placing CI Files</h3>

<ul>
  <li>
    <p><strong>GitHub Actions</strong>: Create <code class="language-plaintext highlighter-rouge">.github/workflows/</code> in the root of your project. Files within this directory define the workflows and jobs for GitHub Actions.</p>
  </li>
  <li>
    <p><strong>Travis CI</strong>: Place the <code class="language-plaintext highlighter-rouge">.travis.yml</code> file in the root directory of your project.</p>
  </li>
  <li>
    <p><strong>CircleCI</strong>: Place the <code class="language-plaintext highlighter-rouge">config.yml</code> file in the <code class="language-plaintext highlighter-rouge">.circleci/</code> directory in the root of your project.</p>
  </li>
</ul>

<p>By organizing your project with a dedicated folder for CI configurations and placing other related files in appropriate directories, you ensure that your project remains organized and maintainable. This setup makes it easier to manage and update CI configurations as needed.</p>

<h2 id="5-jsdocs">5. JSDocs</h2>
<p>When creating JSDoc comments for functions, it’s useful to follow a consistent blueprint to ensure that the documentation is clear, comprehensive, and helpful. Here’s a general blueprint you can follow:</p>

<h3 id="blueprint-for-jsdoc-comments">Blueprint for JSDoc Comments</h3>

<ol>
  <li><strong>Function Description</strong>:
    <ul>
      <li>Provide a concise description of what the function does. Explain the purpose and functionality.</li>
    </ul>
  </li>
  <li><strong>Function Name</strong>:
    <ul>
      <li>Use the <code class="language-plaintext highlighter-rouge">@function</code> tag to specify the function name.</li>
    </ul>
  </li>
  <li><strong>Parameters</strong>:
    <ul>
      <li>Use the <code class="language-plaintext highlighter-rouge">@param</code> tag to describe each parameter:
        <ul>
          <li><strong>Type</strong>: The type of the parameter (e.g., <code class="language-plaintext highlighter-rouge">Object</code>, <code class="language-plaintext highlighter-rouge">string</code>, <code class="language-plaintext highlighter-rouge">number</code>).</li>
          <li><strong>Name</strong>: The name of the parameter.</li>
          <li><strong>Description</strong>: A description of what the parameter represents and any constraints or details.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Returns</strong>:
    <ul>
      <li>Use the <code class="language-plaintext highlighter-rouge">@returns</code> or <code class="language-plaintext highlighter-rouge">@return</code> tag to describe what the function returns:
        <ul>
          <li><strong>Type</strong>: The type of the return value (e.g., <code class="language-plaintext highlighter-rouge">Promise&lt;void&gt;</code>, <code class="language-plaintext highlighter-rouge">Object</code>).</li>
          <li><strong>Description</strong>: A description of the return value and what it represents.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Errors</strong>:
    <ul>
      <li>Use the <code class="language-plaintext highlighter-rouge">@throws</code> tag to describe any errors or exceptions that the function might throw, including:
        <ul>
          <li><strong>Type of Error</strong>: The type or name of the error (e.g., <code class="language-plaintext highlighter-rouge">ApiError</code>).</li>
          <li><strong>Description</strong>: Conditions under which the error is thrown.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Example</strong> (Optional):
    <ul>
      <li>Provide an example of how the function can be used if it adds value.</li>
    </ul>
  </li>
</ol>

<h3 id="example-jsdoc-comments">Example JSDoc Comments</h3>

<p>Here’s how you might use this blueprint to create JSDoc comments for your functions:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">Product</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../model/Product.js</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">catchAsync</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../utils/catchAsync.util.js</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">status</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http-status</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">ApiError</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../utils/ApiError.util.js</span><span class="dl">'</span><span class="p">);</span>

<span class="cm">/**
 * Creates a new product.
 * 
 * @function
 * @name createProduct
 * @memberof module:controllers/productController
 * @param {Object} req - Express request object.
 * @param {Object} req.body - The product data to be created.
 * @param {Object} res - Express response object.
 * @returns {Promise&lt;void&gt;} Responds with the created product and status code 201 (Created).
 * @throws {Error} Forwards any errors to the error-handling middleware.
 */</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">createProduct</span> <span class="o">=</span> <span class="nx">catchAsync</span><span class="p">(</span><span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">product</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Product</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">product</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">status</span><span class="p">.</span><span class="nx">CREATED</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="p">});</span>

<span class="cm">/**
 * Fetches products based on query parameters for filtering, sorting, and pagination.
 * 
 * @function
 * @name fetchAllQuery
 * @memberof module:controllers/productController
 * @param {Object} req - Express request object.
 * @param {Object} req.query - Query parameters for filtering and sorting:
 *   - `role` (optional): Role-based filtering (e.g., 'user' or 'admin').
 *   - `_sort` (optional): Field to sort by.
 *   - `_order` (optional): Sort order, 'asc' or 'desc'.
 *   - `category` (optional): Filter by category.
 *   - `brand` (optional): Filter by brand.
 *   - `_page` (optional): Page number for pagination.
 * @param {Object} res - Express response object.
 * @returns {Promise&lt;void&gt;} Responds with the filtered, sorted, and paginated list of products and status code 200 (OK).
 * @throws {Error} Forwards any errors to the error-handling middleware.
 */</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">fetchAllQuery</span> <span class="o">=</span> <span class="nx">catchAsync</span><span class="p">(</span><span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">productQuery</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

    <span class="c1">// Filtering and sorting logic</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">role</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">productQuery</span> <span class="o">=</span> <span class="nx">Product</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="na">deleted</span><span class="p">:</span> <span class="p">{</span> <span class="na">$ne</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">});</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">role</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">productQuery</span> <span class="o">=</span> <span class="nx">Product</span><span class="p">.</span><span class="nx">find</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">_sort</span> <span class="o">&amp;&amp;</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">_order</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">productQuery</span> <span class="o">=</span> <span class="nx">productQuery</span><span class="p">.</span><span class="nx">sort</span><span class="p">({</span> <span class="p">[</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">_sort</span><span class="p">]:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">_order</span> <span class="p">});</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">category</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">categories</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">category</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="dl">'</span><span class="s1">,</span><span class="dl">'</span><span class="p">)</span> <span class="p">?</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">category</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">,</span><span class="dl">'</span><span class="p">)</span> <span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">category</span><span class="p">;</span>
        <span class="nx">productQuery</span> <span class="o">=</span> <span class="nx">productQuery</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="na">category</span><span class="p">:</span> <span class="p">{</span> <span class="na">$in</span><span class="p">:</span> <span class="nx">categories</span> <span class="p">}</span> <span class="p">});</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">brand</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">brands</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">brand</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="dl">'</span><span class="s1">,</span><span class="dl">'</span><span class="p">)</span> <span class="p">?</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">brand</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">,</span><span class="dl">'</span><span class="p">)</span> <span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">brand</span><span class="p">;</span>
        <span class="nx">productQuery</span> <span class="o">=</span> <span class="nx">productQuery</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="na">brand</span><span class="p">:</span> <span class="p">{</span> <span class="na">$in</span><span class="p">:</span> <span class="nx">brands</span> <span class="p">}</span> <span class="p">});</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">_page</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">pageSize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
        <span class="kd">const</span> <span class="nx">page</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">_page</span><span class="p">;</span>
        <span class="nx">productQuery</span> <span class="o">=</span> <span class="nx">productQuery</span><span class="p">.</span><span class="nx">skip</span><span class="p">(</span><span class="nx">pageSize</span> <span class="o">*</span> <span class="p">(</span><span class="nx">page</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)).</span><span class="nx">limit</span><span class="p">(</span><span class="nx">pageSize</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">productQuery</span><span class="p">.</span><span class="nx">exec</span><span class="p">();</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">status</span><span class="p">.</span><span class="nx">OK</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="p">});</span>

<span class="cm">/**
 * Fetches a product by its ID.
 * 
 * @function
 * @name fetchProductsById
 * @memberof module:controllers/productController
 * @param {Object} req - Express request object.
 * @param {Object} req.params - URL parameters including the `id` of the product.
 * @param {Object} res - Express response object.
 * @returns {Promise&lt;void&gt;} Responds with the product data and status code 200 (OK).
 * @throws {ApiError} Throws a 404 (Not Found) error if the product is not found.
 * @throws {Error} Forwards any other errors to the error-handling middleware.
 */</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">fetchProductsById</span> <span class="o">=</span> <span class="nx">catchAsync</span><span class="p">(</span><span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Product</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">ApiError</span><span class="p">(</span><span class="nx">status</span><span class="p">.</span><span class="nx">NOT_FOUND</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Product not found</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">status</span><span class="p">.</span><span class="nx">OK</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="p">});</span>

<span class="cm">/**
 * Updates a product by its ID with the data provided in the request body.
 * 
 * @function
 * @name updateProduct
 * @memberof module:controllers/productController
 * @param {Object} req - Express request object.
 * @param {Object} req.params - URL parameters including the `id` of the product to update.
 * @param {Object} req.body - The updated product data.
 * @param {Object} res - Express response object.
 * @returns {Promise&lt;void&gt;} Responds with the updated product data and status code 200 (OK).
 * @throws {ApiError} Throws a 404 (Not Found) error if the product is not found.
 * @throws {Error} Forwards any other errors to the error-handling middleware.
 */</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">updateProduct</span> <span class="o">=</span> <span class="nx">catchAsync</span><span class="p">(</span><span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Product</span><span class="p">.</span><span class="nx">findByIdAndUpdate</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="p">{</span> <span class="na">new</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">ApiError</span><span class="p">(</span><span class="nx">status</span><span class="p">.</span><span class="nx">NOT_FOUND</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Product not found</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">status</span><span class="p">.</span><span class="nx">OK</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="summary-of-the-blueprint">Summary of the Blueprint:</h3>

<ul>
  <li><strong>Function Description</strong>: Provide a brief overview of what the function does.</li>
  <li><strong>Function Name</strong>: Use <code class="language-plaintext highlighter-rouge">@function</code> and <code class="language-plaintext highlighter-rouge">@name</code> tags to specify the function’s name and its purpose.</li>
  <li><strong>Parameters</strong>: Use <code class="language-plaintext highlighter-rouge">@param</code> tags to document each parameter’s type, name, and description.</li>
  <li><strong>Returns</strong>: Use <code class="language-plaintext highlighter-rouge">@returns</code> or <code class="language-plaintext highlighter-rouge">@return</code> to describe what the function returns.</li>
  <li><strong>Errors</strong>: Use <code class="language-plaintext highlighter-rouge">@throws</code> to document any errors that the function may throw and under what conditions.</li>
</ul>

<p>This blueprint ensures that your JSDoc comments are thorough and consistent, making your code easier to understand and maintain.</p>]]></content><author><name>Anusree Anilkumar</name></author><summary type="html"><![CDATA[Concepts related to React-Node Web App]]></summary></entry><entry><title type="html">Readme</title><link href="https://anusree6154s.github.io/documentation/README/" rel="alternate" type="text/html" title="Readme" /><published>2025-01-18T04:05:50+00:00</published><updated>2025-01-18T04:05:50+00:00</updated><id>https://anusree6154s.github.io/documentation/README</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/README/"><![CDATA[<hr />
<p>layout: post
—</p>

<h2 id="comprehensive-guide-to-writing-readme-files">Comprehensive Guide to Writing README Files</h2>

<h3 id="1-project-title">1. Project Title</h3>

<ul>
  <li><strong>What to Include</strong>: The name of the project.</li>
  <li><strong>How to Format</strong>: Use a prominent heading (e.g., <code class="language-plaintext highlighter-rouge"># Project Title</code>).</li>
  <li><strong>Example</strong>:
    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># My Amazing Project</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-description">2. Description</h3>

<ul>
  <li><strong>What to Include</strong>: A brief overview of what the project does, its purpose, and its key features.</li>
  <li><strong>How to Format</strong>: Write a few sentences or a short paragraph.</li>
  <li><strong>Example</strong>:
    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>My Amazing Project is a web application that helps users manage their tasks effectively. With features like task creation, deadline tracking, and file uploads, it simplifies task management for individuals and teams.
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="3-table-of-contents">3. Table of Contents</h3>

<ul>
  <li><strong>What to Include</strong>: A list of sections in the README for easy navigation.</li>
  <li><strong>How to Format</strong>: Use links to section headings.</li>
  <li><strong>Example</strong>:
```markdown
    <h2 id="table-of-contents">Table of Contents</h2>
    <ul>
      <li><a href="#installation">Installation</a></li>
      <li><a href="#usage">Usage</a></li>
      <li><a href="#features">Features</a></li>
      <li><a href="#contributing">Contributing</a></li>
      <li><a href="#license">License</a>
```</li>
    </ul>
  </li>
</ul>

<h3 id="4-installation">4. Installation</h3>

<ul>
  <li><strong>What to Include</strong>: Step-by-step instructions on how to set up the project locally. This can include prerequisites, dependencies, and installation commands.</li>
  <li><strong>How to Format</strong>: Use code blocks for commands and list steps clearly.</li>
  <li><strong>Example</strong>:
    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">## Installation</span>

To install and set up the project, follow these steps:
<span class="p">
1.</span> Clone the repository:
   <span class="p">```</span><span class="nl">bash
</span>   git clone https://github.com/username/my-amazing-project.git
</code></pre></div>    </div>
    <ol>
      <li>Navigate to the project directory:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>my-amazing-project
</code></pre></div>        </div>
      </li>
      <li>Install dependencies:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span>
</code></pre></div>        </div>
        <p>```</p>
      </li>
    </ol>
  </li>
</ul>

<h3 id="5-usage">5. Usage</h3>

<ul>
  <li><strong>What to Include</strong>: Instructions on how to use the project after installation. Include examples and screenshots if applicable.</li>
  <li><strong>How to Format</strong>: Use code snippets and images to clarify usage.</li>
  <li><strong>Example</strong>:
    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">## Usage</span>

To start the application, run the following command:

<span class="p">```</span><span class="nl">bash
</span>npm start
</code></pre></div>    </div>

    <p>Once the application is running, open your web browser and navigate to <code class="language-plaintext highlighter-rouge">http://localhost:3000</code>.</p>

    <p><img src="screenshot.png" alt="Screenshot" /></p>

    <h3 id="example-of-adding-a-task">Example of Adding a Task</h3>

    <ol>
      <li>Click on the “Add Task” button.</li>
      <li>Fill in the task details and click “Save”.
```</li>
    </ol>
  </li>
</ul>

<h3 id="6-features">6. Features</h3>

<ul>
  <li><strong>What to Include</strong>: A list of key features or functionalities of the project.</li>
  <li><strong>How to Format</strong>: Use bullet points or a numbered list.</li>
  <li><strong>Example</strong>:
```markdown
    <h2 id="features">Features</h2>
    <ul>
      <li>Create and manage tasks</li>
      <li>Set deadlines and reminders</li>
      <li>Upload files related to tasks</li>
      <li>Mark tasks as done
```</li>
    </ul>
  </li>
</ul>

<h3 id="7-contributing">7. Contributing</h3>

<ul>
  <li><strong>What to Include</strong>: Guidelines for contributing to the project, such as how to report issues, request features, or submit pull requests.</li>
  <li><strong>How to Format</strong>: Clearly outline the process.</li>
  <li><strong>Example</strong>:
    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">## Contributing</span>

We welcome contributions! To contribute, please follow these steps:
<span class="p">
1.</span> Fork the repository.
<span class="p">2.</span> Create a new branch:
   <span class="p">```</span><span class="nl">bash
</span>   git checkout <span class="nt">-b</span> feature/YourFeature
</code></pre></div>    </div>
    <ol>
      <li>Make your changes and commit them.</li>
      <li>Push to the branch:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin feature/YourFeature
</code></pre></div>        </div>
      </li>
      <li>Submit a pull request.
```</li>
    </ol>
  </li>
</ul>

<h3 id="8-license">8. License</h3>

<ul>
  <li><strong>What to Include</strong>: Information about the project’s license, including a link to the full license text.</li>
  <li><strong>How to Format</strong>: Mention the type of license and link to the LICENSE file.</li>
  <li><strong>Example</strong>:
    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">## License</span>

This project is licensed under the MIT License - see the <span class="p">[</span><span class="nv">LICENSE</span><span class="p">](</span><span class="sx">LICENSE</span><span class="p">)</span> file for details.
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="9-acknowledgments">9. Acknowledgments</h3>

<ul>
  <li><strong>What to Include</strong>: Acknowledge any libraries, frameworks, or resources that were helpful in developing the project.</li>
  <li><strong>How to Format</strong>: List the acknowledgments in bullet points.</li>
  <li><strong>Example</strong>:
```markdown
    <h2 id="acknowledgments">Acknowledgments</h2>
    <ul>
      <li><a href="https://reactjs.org/">React</a> - A JavaScript library for building user interfaces.</li>
      <li><a href="https://mui.com/">MUI</a> - React components for faster and easier web development.
```</li>
    </ul>
  </li>
</ul>

<h3 id="10-badges-optional">10. Badges (Optional)</h3>

<ul>
  <li><strong>What to Include</strong>: Badges for build status, coverage, npm version, etc.</li>
  <li><strong>How to Format</strong>: Use Markdown to add badges at the top of the README.</li>
  <li><strong>Example</strong>:
    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">![</span><span class="nv">Build Status</span><span class="p">](</span><span class="sx">https://img.shields.io/badge/build-passing-brightgreen</span><span class="p">)</span>
<span class="p">![</span><span class="nv">npm version</span><span class="p">](</span><span class="sx">https://img.shields.io/npm/v/npm.svg</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="11-faq-optional">11. FAQ (Optional)</h3>

<ul>
  <li><strong>What to Include</strong>: Common questions and answers related to the project.</li>
  <li><strong>How to Format</strong>: List questions and their answers in a clear manner.</li>
  <li><strong>Example</strong>:
    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">## FAQ</span>
<span class="gs">**Q: Can I use this project for commercial purposes?**</span>
A: Yes, you can use it as long as you comply with the license terms.

<span class="gs">**Q: Is there a demo available?**</span>
A: A live demo can be found at <span class="p">[</span><span class="nv">Demo Link</span><span class="p">](</span><span class="sx">https://example.com</span><span class="p">)</span>.
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="12-contact-information-optional">12. Contact Information (Optional)</h3>

<ul>
  <li><strong>What to Include</strong>: How users or contributors can reach out with questions or suggestions.</li>
  <li><strong>How to Format</strong>: Provide your email or link to a contact form.</li>
  <li><strong>Example</strong>:
    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">## Contact</span>

For questions or suggestions, feel free to reach out to me at <span class="p">[</span><span class="nv">your-email@example.com</span><span class="p">](</span><span class="sx">mailto:your-email@example.com</span><span class="p">)</span>.
</code></pre></div>    </div>
  </li>
</ul>

<hr />

<h3 id="best-practices">Best Practices</h3>

<ul>
  <li><strong>Clarity and Brevity</strong>: Be clear and concise in your descriptions. Avoid jargon unless necessary.</li>
  <li><strong>Markdown Formatting</strong>: Use Markdown syntax effectively to format your README for better readability.</li>
  <li><strong>Update Regularly</strong>: Keep your README updated with any changes in the project, features, or installation instructions.</li>
  <li><strong>Include Visuals</strong>: Use screenshots, diagrams, or GIFs to illustrate how the project works.</li>
</ul>

<h3 id="example-readme-template">Example README Template</h3>

<p>Here’s a simple template based on the structure outlined above:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># Project Title</span>

A brief description of what the project does and its purpose.

<span class="gu">## Table of Contents</span>
<span class="p">-</span> <span class="p">[</span><span class="nv">Installation</span><span class="p">](</span><span class="sx">#installation</span><span class="p">)</span>
<span class="p">-</span> <span class="p">[</span><span class="nv">Usage</span><span class="p">](</span><span class="sx">#usage</span><span class="p">)</span>
<span class="p">-</span> <span class="p">[</span><span class="nv">Features</span><span class="p">](</span><span class="sx">#features</span><span class="p">)</span>
<span class="p">-</span> <span class="p">[</span><span class="nv">Contributing</span><span class="p">](</span><span class="sx">#contributing</span><span class="p">)</span>
<span class="p">-</span> <span class="p">[</span><span class="nv">License</span><span class="p">](</span><span class="sx">#license</span><span class="p">)</span>
<span class="p">-</span> <span class="p">[</span><span class="nv">Acknowledgments</span><span class="p">](</span><span class="sx">#acknowledgments</span><span class="p">)</span>

<span class="gu">## Installation</span>
<span class="p">
1.</span> Clone the repository:
   <span class="p">```</span><span class="nl">bash
</span>   git clone https://github.com/username/my-amazing-project.git
</code></pre></div></div>
<ol>
  <li>Navigate to the project directory:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>my-amazing-project
</code></pre></div>    </div>
  </li>
  <li>Install dependencies:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="usage">Usage</h2>

<p>To start the application, run the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm start
</code></pre></div></div>

<p>Open your web browser and navigate to <code class="language-plaintext highlighter-rouge">http://localhost:3000</code>.</p>

<h2 id="features-1">Features</h2>
<ul>
  <li>List of features here.</li>
</ul>

<h2 id="contributing">Contributing</h2>

<ol>
  <li>Fork the repository.</li>
  <li>Create a new branch.</li>
  <li>Make your changes and commit them.</li>
  <li>Push to the branch and submit a pull request.</li>
</ol>

<h2 id="license">License</h2>

<p>This project is licensed under the MIT License - see the <a href="LICENSE">LICENSE</a> file for details.</p>

<h2 id="acknowledgments-1">Acknowledgments</h2>
<ul>
  <li>Libraries or resources used in the project.
```</li>
</ul>]]></content><author><name>Anusree Anilkumar</name></author><summary type="html"><![CDATA[layout: post — Comprehensive Guide to Writing README Files 1. Project Title What to Include: The name of the project. How to Format: Use a prominent heading (e.g., # Project Title). Example: # My Amazing Project 2. Description What to Include: A brief overview of what the project does, its purpose, and its key features. How to Format: Write a few sentences or a short paragraph. Example: My Amazing Project is a web application that helps users manage their tasks effectively. With features like task creation, deadline tracking, and file uploads, it simplifies task management for individuals and teams. 3. Table of Contents What to Include: A list of sections in the README for easy navigation. How to Format: Use links to section headings. Example: ```markdown Table of Contents Installation Usage Features Contributing License ``` 4. Installation What to Include: Step-by-step instructions on how to set up the project locally. This can include prerequisites, dependencies, and installation commands. How to Format: Use code blocks for commands and list steps clearly. Example: ## Installation To install and set up the project, follow these steps: 1. Clone the repository: ```bash git clone https://github.com/username/my-amazing-project.git Navigate to the project directory: cd my-amazing-project Install dependencies: npm install ``` 5. Usage What to Include: Instructions on how to use the project after installation. Include examples and screenshots if applicable. How to Format: Use code snippets and images to clarify usage. Example: ## Usage To start the application, run the following command: ```bash npm start Once the application is running, open your web browser and navigate to http://localhost:3000. Example of Adding a Task Click on the “Add Task” button. Fill in the task details and click “Save”. ``` 6. Features What to Include: A list of key features or functionalities of the project. How to Format: Use bullet points or a numbered list. Example: ```markdown Features Create and manage tasks Set deadlines and reminders Upload files related to tasks Mark tasks as done ``` 7. Contributing What to Include: Guidelines for contributing to the project, such as how to report issues, request features, or submit pull requests. How to Format: Clearly outline the process. Example: ## Contributing We welcome contributions! To contribute, please follow these steps: 1. Fork the repository. 2. Create a new branch: ```bash git checkout -b feature/YourFeature Make your changes and commit them. Push to the branch: git push origin feature/YourFeature Submit a pull request. ``` 8. License What to Include: Information about the project’s license, including a link to the full license text. How to Format: Mention the type of license and link to the LICENSE file. Example: ## License This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details. 9. Acknowledgments What to Include: Acknowledge any libraries, frameworks, or resources that were helpful in developing the project. How to Format: List the acknowledgments in bullet points. Example: ```markdown Acknowledgments React - A JavaScript library for building user interfaces. MUI - React components for faster and easier web development. ``` 10. Badges (Optional) What to Include: Badges for build status, coverage, npm version, etc. How to Format: Use Markdown to add badges at the top of the README. Example: ![Build Status](https://img.shields.io/badge/build-passing-brightgreen) ![npm version](https://img.shields.io/npm/v/npm.svg) 11. FAQ (Optional) What to Include: Common questions and answers related to the project. How to Format: List questions and their answers in a clear manner. Example: ## FAQ **Q: Can I use this project for commercial purposes?** A: Yes, you can use it as long as you comply with the license terms. **Q: Is there a demo available?** A: A live demo can be found at [Demo Link](https://example.com). 12. Contact Information (Optional) What to Include: How users or contributors can reach out with questions or suggestions. How to Format: Provide your email or link to a contact form. Example: ## Contact For questions or suggestions, feel free to reach out to me at [your-email@example.com](mailto:your-email@example.com). Best Practices Clarity and Brevity: Be clear and concise in your descriptions. Avoid jargon unless necessary. Markdown Formatting: Use Markdown syntax effectively to format your README for better readability. Update Regularly: Keep your README updated with any changes in the project, features, or installation instructions. Include Visuals: Use screenshots, diagrams, or GIFs to illustrate how the project works. Example README Template Here’s a simple template based on the structure outlined above: # Project Title A brief description of what the project does and its purpose. ## Table of Contents - [Installation](#installation) - [Usage](#usage) - [Features](#features) - [Contributing](#contributing) - [License](#license) - [Acknowledgments](#acknowledgments) ## Installation 1. Clone the repository: ```bash git clone https://github.com/username/my-amazing-project.git Navigate to the project directory: cd my-amazing-project Install dependencies: npm install Usage To start the application, run the following command: npm start Open your web browser and navigate to http://localhost:3000. Features List of features here. Contributing Fork the repository. Create a new branch. Make your changes and commit them. Push to the branch and submit a pull request. License This project is licensed under the MIT License - see the LICENSE file for details. Acknowledgments Libraries or resources used in the project. ```]]></summary></entry><entry><title type="html">Readme</title><link href="https://anusree6154s.github.io/documentation/README/" rel="alternate" type="text/html" title="Readme" /><published>2025-01-18T04:05:50+00:00</published><updated>2025-01-18T04:05:50+00:00</updated><id>https://anusree6154s.github.io/documentation/README</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/README/"><![CDATA[<h2 id="readme-formatting-guidelinesrules">Readme Formatting Guidelines/Rules</h2>
<ul>
  <li><a href="https://medium.com/analytics-vidhya/writing-github-readme-e593f278a796">Majority guidelines</a></li>
  <li><a href="https://gist.github.com/kigiri/4b1d64eba2d465a2ffc1342a0e9e7d6f">Image alignment/resize guidelines</a></li>
</ul>]]></content><author><name>Anusree Anilkumar</name></author><summary type="html"><![CDATA[Readme Formatting Guidelines/Rules Majority guidelines Image alignment/resize guidelines]]></summary></entry><entry><title type="html">Takehome Guidelines</title><link href="https://anusree6154s.github.io/documentation/takehome-guidelines/" rel="alternate" type="text/html" title="Takehome Guidelines" /><published>2025-01-17T00:00:00+00:00</published><updated>2025-01-17T00:00:00+00:00</updated><id>https://anusree6154s.github.io/documentation/takehome-guidelines</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/takehome-guidelines/"><![CDATA[<h1 id="take-home-coding-challenge">Take home coding challenge</h1>

<h2 id="readme">Readme</h2>

<p>Write your README as if it was for a production service. Include the following items:</p>

<ul>
  <li>Description of the problem and solution.</li>
  <li>Whether the solution focuses on back-end, front-end or if it’s full stack.</li>
  <li>Reasoning behind your technical choices, including architectural.</li>
  <li>Trade-offs you might have made, anything you left out, or what you might do differently if you were to spend additional time on the project.</li>
</ul>

<h2 id="how-we-review">How we review</h2>

<p>Your application will be reviewed by at least two of our engineers. We do take into consideration your experience level.</p>

<p><strong>We value quality over feature-completeness</strong>. It is fine to leave things aside provided you call them out in your project’s README. The goal of this code sample is to help us identify what you consider production-ready code. You should consider this code ready for final review with your colleague, i.e. this would be the last step before deploying to production.</p>

<p>The aspects of your code we will assess include:</p>

<ul>
  <li><strong>Architecture</strong>: how clean is the separation between the front-end and the back-end?</li>
  <li><strong>Clarity</strong>: does the README clearly and concisely explains the problem and solution? Are technical tradeoffs explained?</li>
  <li><strong>Correctness</strong>: does the application do what was asked? If there is anything missing, does the README explain why it is missing?</li>
  <li><strong>Code quality</strong>: is the code simple, easy to understand, and maintainable?  Are there any code smells or other red flags? Does object-oriented code follows principles such as the single responsibility principle? Is the coding style consistent with the language’s guidelines? Is it consistent throughout the codebase?</li>
  <li><strong>Security</strong>: are there any obvious vulnerability?</li>
  <li><strong>Technical choices</strong>: do choices of libraries, databases, architecture etc. seem appropriate for the chosen application?</li>
</ul>

<p>Bonus point (those items are optional):</p>

<ul>
  <li><strong>UX</strong>: is the web interface understandable and pleasing to use? Is the API intuitive?</li>
  <li><strong>Scalability</strong>: will technical choices scale well? If not, is there a discussion of those choices in the README?</li>
  <li><strong>Production-readiness</strong>: does the code include monitoring? logging? proper error handling?</li>
</ul>

<h2 id="my-personal-notes-on-this">My personal notes on this</h2>
<h3 id="format">Format</h3>
<ul>
  <li>Project Name
    <ul>
      <li>Description
        <ul>
          <li>Problem Description</li>
          <li>Solution Description (backend, frontend, or full-stack)</li>
        </ul>
      </li>
      <li>Approach
        <ul>
          <li>Technology Stack (and reasons for choosing them)</li>
          <li>Architecture</li>
          <li>Features Implemented</li>
        </ul>
      </li>
      <li>Trade-offs &amp; Improvements</li>
      <li>Future Improvements</li>
      <li>How to run</li>
      <li>Demo image/gif/video</li>
    </ul>
  </li>
</ul>

<h3 id="format-in-detail">Format in detail</h3>
<ul>
  <li><strong>Project Name</strong>
    <ul>
      <li><strong>Description</strong>
        <ul>
          <li><strong>Problem Description</strong>: This project solves [problem description] by addressing [specific pain points], such as improving [performance, scalability, user experience, etc.].</li>
          <li><strong>Solution Description</strong>: This is a [backend, frontend, or full-stack] solution using [technology stack] to tackle the identified problem.</li>
        </ul>
      </li>
      <li><strong>Approach</strong>
        <ul>
          <li><strong>Technology Stack</strong> (and Reasons for Choosing Them)
            <ul>
              <li><strong>Front-end</strong>: [React, Vue, etc.] - Chosen for its scalability and reusable components.</li>
              <li><strong>Back-end</strong>: [Node.js, Python, etc.] - Selected for its asynchronous processing capabilities.</li>
              <li><strong>Database</strong>: [PostgreSQL, MongoDB, etc.] - Picked for [structured/unstructured] data handling.</li>
              <li><strong>Tools</strong>: [Docker, CI/CD tools, etc.] - Used for deployment and containerization to ensure consistency across environments.</li>
            </ul>
          </li>
          <li><strong>Architecture</strong>
            <ul>
              <li>The solution uses a [RESTful/Microservice] architecture with:
                <ul>
                  <li><strong>API Layer</strong>: Routes requests to services.</li>
                  <li><strong>Business Logic</strong>: Processes core operations like authentication, payments, etc.</li>
                  <li><strong>Database Layer</strong>: Manages data storage and retrieval.</li>
                </ul>
              </li>
            </ul>
          </li>
          <li><strong>Features Implemented</strong>
            <ul>
              <li><strong>User Authentication</strong>: Secure sign-up, login, and session management.</li>
              <li><strong>Product Listings</strong>: Display dynamic product data from the database.</li>
              <li><strong>Shopping Cart</strong>: Add, remove, and view items in a cart with real-time updates.</li>
              <li><strong>Checkout Process</strong>: Integration with payment gateways to complete purchases.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><strong>Trade-offs &amp; Improvements</strong>
        <ul>
          <li><strong>Performance vs. Flexibility</strong>: Opted for flexibility at the expense of some performance optimization.</li>
          <li><strong>Initial Simplicity</strong>: Chose lightweight frameworks to facilitate rapid development, leaving room for future improvements.</li>
          <li><strong>Testing</strong>: Focused testing on core logic, with plans to implement more extensive end-to-end tests.</li>
        </ul>
      </li>
      <li><strong>Future Improvements</strong>
        <ul>
          <li>Expand test coverage to include UI and integration testing.</li>
          <li>Transition to microservices for improved scalability and fault isolation.</li>
          <li>Improve CI/CD pipeline with better monitoring and automation tools.</li>
        </ul>
      </li>
      <li><strong>How to Run</strong>
        <ul>
          <li>Clone the repo:
            <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">git</span> <span class="nx">clone</span> <span class="nx">https</span><span class="p">:</span><span class="c1">//github.com/yourusername/project.git</span>
</code></pre></div>            </div>
          </li>
          <li>Install dependencies:
            <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span>
</code></pre></div>            </div>
          </li>
          <li>Run the server:
            <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">run</span> <span class="nx">dev</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li><strong>Demo Image/GIF/Video</strong>
        <ul>
          <li>image</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="example">Example</h3>
<h4 id="long-version">Long version</h4>
<ul>
  <li>
    <h1 id="ecommerce-frontend">eCommerce Frontend</h1>
    <ul>
      <li>
        <h2 id="description">Description</h2>
        <ul>
          <li><strong>Problem Description</strong>: Many online stores lack modern, responsive, and performant user interfaces. This eCommerce application frontend aims to provide users with a seamless and intuitive shopping experience across devices.</li>
          <li><strong>Solution Description</strong>: This is a <strong>frontend solution</strong> built using <strong>React</strong> to create a dynamic and responsive user interface. The app improves <strong>user experience</strong>, enhances <strong>performance</strong>, and ensures <strong>scalability</strong> for future feature extensions.</li>
        </ul>
      </li>
      <li>
        <h2 id="approach">Approach</h2>
        <ul>
          <li>
            <h3 id="technology-stack-and-reasons-for-choosing-them">Technology Stack (and Reasons for Choosing Them)</h3>
            <ul>
              <li><strong>Front-end</strong>: <strong>React</strong> – Chosen for its component-based architecture and excellent support for dynamic, state-driven UIs. React also allows easy integration of third-party libraries for UI elements.</li>
              <li><strong>State Management</strong>: <strong>Redux</strong> – Used to manage global state across the application, such as the user’s shopping cart, to ensure consistency and performance.</li>
              <li><strong>Styling</strong>: <strong>Tailwind CSS</strong> – A utility-first CSS framework that speeds up development while maintaining design consistency.</li>
              <li><strong>Routing</strong>: <strong>React Router</strong> – Implemented for navigation between pages, enabling smooth transitions between product listings, cart, and checkout pages.</li>
              <li><strong>Tools</strong>: <strong>Webpack &amp; Babel</strong> – Used for bundling and transpiling the JavaScript code for optimized performance in production.</li>
            </ul>
          </li>
          <li>
            <h3 id="architecture">Architecture</h3>
            <ul>
              <li>The frontend follows a <strong>component-based architecture</strong> where each page and UI element is encapsulated into reusable React components:</li>
              <li><strong>Product Listing Page</strong>: Dynamically fetches product data and displays it in a grid layout with filters and sorting options.</li>
              <li><strong>Product Detail Page</strong>: Provides detailed information about a selected product, including images, descriptions, and reviews.</li>
              <li><strong>Shopping Cart</strong>: Displays the selected items, allowing users to modify quantities or remove items in real-time using state management (Redux).</li>
              <li><strong>Checkout Page</strong>: Guides users through the purchase process, integrating payment gateway UI elements.</li>
            </ul>
          </li>
          <li>
            <h3 id="features-implemented">Features Implemented</h3>
            <ul>
              <li><strong>Product Browsing</strong>: Displays a catalog of products with filtering (by category, price) and sorting (by popularity, price).</li>
              <li><strong>Product Search</strong>: A search bar allows users to quickly find specific products.</li>
              <li><strong>Shopping Cart</strong>: Users can add items to their cart, update quantities, and view a live total of the purchase.</li>
              <li><strong>Responsive Design</strong>: The layout adapts seamlessly across desktop, tablet, and mobile devices.</li>
              <li><strong>User Authentication</strong>: Integrated login/logout functionality, with access to personalized features like saved shopping carts.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>
        <h2 id="trade-offs--improvements">Trade-offs &amp; Improvements</h2>
        <ul>
          <li><strong>Performance vs. Features</strong>: Initial focus was on ensuring core eCommerce features like browsing and cart functionality, with performance optimizations to follow.</li>
          <li><strong>Custom Design vs. Framework</strong>: Opted for Tailwind CSS to speed up development and ensure design consistency, but custom styling may be introduced in future iterations.</li>
          <li><strong>Testing</strong>: Basic unit tests are implemented, but end-to-end testing for the entire user journey is a future goal.</li>
        </ul>
      </li>
      <li>
        <h3 id="future-improvements">Future Improvements</h3>
        <ul>
          <li>Improve performance by lazy-loading components and implementing server-side rendering (SSR) with Next.js.</li>
          <li>Add more comprehensive tests using tools like <strong>Cypress</strong> for end-to-end testing.</li>
          <li>Integrate with more third-party APIs for recommendations, reviews, and payment processing.</li>
          <li>Implement localization and internationalization (i18n) to support multiple languages and regions.</li>
        </ul>
      </li>
      <li>
        <h2 id="how-to-run">How to Run</h2>
        <ol>
          <li><strong>Clone the repo</strong>:
            <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">git</span> <span class="nx">clone</span> <span class="nx">https</span><span class="p">:</span><span class="c1">//github.com/yourusername/ecommerce-frontend.git</span>
</code></pre></div>            </div>
          </li>
          <li><strong>Install dependencies</strong>:
            <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span>
</code></pre></div>            </div>
          </li>
          <li><strong>Run the server</strong>:
            <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">start</span>
</code></pre></div>            </div>
            <p>The application will run on <code class="language-plaintext highlighter-rouge">http://localhost:3000</code>.</p>
          </li>
        </ol>
      </li>
      <li>
        <h2 id="demo-imagegifvideo">Demo Image/GIF/Video</h2>
        <ul>
          <li>Here’s a preview of the eCommerce frontend in action:
            <ul>
              <li><img src="path/to/screenshot.png" alt="Home Page Screenshot" /></li>
            </ul>
          </li>
          <li>Or a demo of the user adding products to the cart:
            <ul>
              <li><img src="path/to/demo.mp4" alt="Demo GIF" /></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="short-version">Short version</h4>
<ul>
  <li>
    <h1 id="ecommerce-frontend-1">eCommerce Frontend</h1>
    <ul>
      <li>
        <h2 id="description-1">Description</h2>
        <ul>
          <li><strong>Problem</strong>: Many online stores lack modern, responsive interfaces.</li>
          <li><strong>Solution</strong>: A <strong>React</strong>-based frontend that enhances <strong>user experience</strong>, <strong>performance</strong>, and <strong>scalability</strong> for a seamless shopping experience.</li>
        </ul>
      </li>
      <li>
        <h2 id="approach-1">Approach</h2>
        <ul>
          <li>
            <h3 id="technology-stack">Technology Stack</h3>
            <ul>
              <li><strong>Front-end</strong>: <strong>React</strong> for a dynamic UI.</li>
              <li><strong>State Management</strong>: <strong>Redux</strong> for managing the global state.</li>
              <li><strong>Styling</strong>: <strong>Tailwind CSS</strong> for rapid, consistent design.</li>
              <li><strong>Routing</strong>: <strong>React Router</strong> for smooth page transitions.</li>
              <li><strong>Build Tools</strong>: <strong>Webpack &amp; Babel</strong> for optimized performance.</li>
            </ul>
          </li>
          <li>
            <h3 id="architecture-1">Architecture</h3>
            <ul>
              <li><strong>Component-Based</strong>: Each UI element is a reusable component, including:
                <ul>
                  <li><strong>Product Listing</strong>: Displays products with filters and sorting.</li>
                  <li><strong>Product Detail</strong>: Detailed view of selected products.</li>
                  <li><strong>Shopping Cart</strong>: Real-time updates on item quantities and totals.</li>
                  <li><strong>Checkout Page</strong>: Guides users through the purchase process.</li>
                </ul>
              </li>
            </ul>
          </li>
          <li>
            <h3 id="features">Features</h3>
            <ul>
              <li><strong>Product Browsing</strong>: Catalog with filtering and sorting.</li>
              <li><strong>Search Functionality</strong>: Quickly find products.</li>
              <li><strong>Responsive Design</strong>: Adapts to all devices.</li>
              <li><strong>User Authentication</strong>: Login/logout functionality.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>
        <h2 id="trade-offs--improvements-1">Trade-offs &amp; Improvements</h2>
        <ul>
          <li>Focused on core features over performance; optimizations will follow.</li>
          <li>Basic testing is in place; end-to-end tests are planned.</li>
        </ul>
      </li>
      <li>
        <h3 id="future-improvements-1">Future Improvements</h3>
        <ul>
          <li>Implement lazy loading and SSR with Next.js.</li>
          <li>Enhance testing coverage.</li>
          <li>Add localization support.</li>
        </ul>
      </li>
      <li>
        <h2 id="how-to-run-1">How to Run</h2>
        <ol>
          <li><strong>Clone the repo</strong>:
            <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/yourusername/ecommerce-frontend.git
</code></pre></div>            </div>
          </li>
          <li><strong>Install dependencies</strong>:
            <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span>
</code></pre></div>            </div>
          </li>
          <li><strong>Run the server</strong>:
            <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm start
</code></pre></div>            </div>
            <p>Access the application at <code class="language-plaintext highlighter-rouge">http://localhost:3000</code>.</p>
          </li>
        </ol>
      </li>
      <li>
        <h2 id="demo">Demo</h2>
        <ul>
          <li><img src="path/to/screenshot.png" alt="Home Page Screenshot" /></li>
          <li>Or a demo of adding products to the cart:</li>
          <li><img src="path/to/demo.mp4" alt="Demo GIF" /></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>[!NOTE]
can take demo and deployemnt urls to the top instead of bottom, just below the title for quicker access</p>
</blockquote>]]></content><author><name>Anusree Anilkumar</name></author><summary type="html"><![CDATA[A brief description]]></summary></entry><entry><title type="html">Passport Jwt</title><link href="https://anusree6154s.github.io/documentation/passport-jwt/" rel="alternate" type="text/html" title="Passport Jwt" /><published>2024-08-19T00:00:00+00:00</published><updated>2024-08-19T00:00:00+00:00</updated><id>https://anusree6154s.github.io/documentation/passport-jwt</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/passport-jwt/"><![CDATA[<p>Documentation for passport JWT as I understand it.</p>

<h1 id="passport-jwt-documentaion">Passport-jwt Documentaion</h1>

<h2 id="table-of-contents">Table of Contents</h2>

<ol>
  <li><a href="#overview">Overview</a></li>
  <li><a href="#features-and-usage">Features and Usage</a>
    <ul>
      <li><a href="#installation-and-import">Installation and Import</a></li>
      <li><a href="#Configuration">Configuration</a>
        <ul>
          <li><a href="#basic">Basic Code Structure</a></li>
          <li><a href="#Parts">Parts of Code in detail</a>
            <ul>
              <li><a href="Imports">Imports</a></li>
              <li><a href="#passport"><code class="language-plaintext highlighter-rouge">passport.use(name[optional], strategy)</code></a></li>
              <li><a href="#Strategy"><code class="language-plaintext highlighter-rouge">new Startegy(options, verifyCallback)</code></a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="#full-structure">Full Code Structure (seperated into modules)</a></li>
    </ul>
  </li>
  <li><a href="#authentication">Authentication</a>
    <ul>
      <li><a href="#With">With session support (w/o callback)</a></li>
      <li><a href="#Without">Without session support (w/ callback)</a></li>
    </ul>
  </li>
  <li><a href="#passing-jwt-token">Methods to pass JWT Token</a></li>
</ol>

<h2 id="overview">Overview</h2>

<ul>
  <li>A middleware for Express.js framework that provides authentication and authorization using JSON Web Tokens (JWT).</li>
  <li>A passport strategy to work with JWT</li>
  <li>This only handles what we can do with a JWT token created using passport. To create a token checkout <a href="http://passportdocumentation">Passport</a></li>
</ul>

<h2 id="features-and-usage">Features and Usage</h2>

<ol>
  <li>Installation and Import
<a id="installation-and-import"></a>
    <ul>
      <li>Install: <code class="language-plaintext highlighter-rouge">npm install passport-jwt</code></li>
      <li>Import: <code class="language-plaintext highlighter-rouge">const { Strategy, ExtractJwt } = require("passport-jwt");</code>
        <ul>
          <li><em>passport-jwt is a class with 2 properties - Strategy and ExtractJwt</em></li>
          <li><em>Strategy is a class with 2 parameters passed to its contructor</em></li>
          <li><em>ExtractJwt is an object with various sub properties</em></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>Configuration
<a id="Configuration"></a></p>

    <ul>
      <li>
        <p>Basic Structure:
<a id="basic"></a></p>

        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">JwtStrategy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">passport-jwt</span><span class="dl">"</span><span class="p">).</span><span class="nx">Strategy</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">ExtractJwt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">passport-jwt</span><span class="dl">"</span><span class="p">).</span><span class="nx">ExtractJwt</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">passport</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">// Options for the strategy</span>
<span class="kd">const</span> <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">jwtFromRequest</span><span class="p">:</span> <span class="nx">ExtractJwt</span><span class="p">.</span><span class="nx">fromAuthHeaderAsBearerToken</span><span class="p">(),</span> <span class="c1">// Extract token from Authorization header</span>
  <span class="na">secretOrKey</span><span class="p">:</span> <span class="dl">"</span><span class="s2">your_jwt_secret_key</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// Secret key for verifying token</span>
<span class="p">};</span>

<span class="c1">// JWT Strategy</span>
<span class="nx">passport</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">JwtStrategy</span><span class="p">(</span><span class="nx">opts</span><span class="p">,</span> <span class="p">(</span><span class="nx">jwtPayload</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// Find the user based on the jwtPayload.sub (subject)</span>
    <span class="nx">User</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">jwtPayload</span><span class="p">.</span><span class="nx">sub</span> <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">// User not found</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">})</span>
<span class="p">);</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>Parts of the configuration:
<a id="Parts"></a></p>

        <ol>
          <li>Imports:
<a id="Imports"></a>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">const {Strategy,ExtractJwt} = require("passport-jwt")</code></li>
              <li><code class="language-plaintext highlighter-rouge">const passport = require("passport");</code></li>
            </ul>
          </li>
          <li>passport.use() method to register strategy (2 ways):
<a id="passport"></a>
            <details>
    <summary>
    <code>passport.use(Strategy)</code> - Default Strategy
    </summary>

- Registers a strategy directly.
- Will be treated as the default strategy.
- Allows you to refer to the strategy by the name _jwt_ later in the *passport* method `passport.authenticate('jwt')`.
</details>

            <details>
    <summary>
    <code>passport.use(name, Strategy)</code> - Named Strategy [optional]
    </summary>

- Allows you to refer to the strategy by the name _jwt_ later in the *passport* method `passport.authenticate('name')`.
</details>
          </li>
          <li>Strategy (has 2 parameters):
<a id="Strategy"></a>
            <ul>
              <li>
                <p>Has two parameters: <code class="language-plaintext highlighter-rouge">opts</code> and <code class="language-plaintext highlighter-rouge">verify</code></p>
              </li>
              <li>Parameters:
                <details>
  <summary>
      <code>`opts`</code> - (object) Options
  </summary>
                
  - This parameter is an object that defines various options for the strategy.

  - Example:
      ```js
      const opts = {
          jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
          secretOrKey: "your_jwt_secret_key",
          issuer: "your_issuer", // optional
          algorithms: ["HS256"], // optional
          ignoreExpiration: false, // optional, defaults to false
      };
      ```
  - Properties:

      1. <details>
              <summary>
              <code>jwtFromRequest</code> - (function) To specify method of Jwt extraction
              </summary>

          - Specifies how the JWT will be extracted from the incoming request from client using _ExtractJwt_ class.
          - Example
              ```javascript
              const opts = {
                  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken();
              }
              ```

          - All options (Properties of ExtractJwt):

          1. <details>
              <summary>
              <code>ExtractJwt.fromAuthHeaderAsBearerToken()</code>
              </summary>

              - **Usage**: Extracts the JWT from the Authorization header, assuming the JWT is prefixed by the word Bearer.
              - **Input parameter**: none
              - **Example**:

              ```js
              jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken();
              ```

              </details>

          2. <details>
              <summary>
              <code>ExtractJwt.fromHeader(header_name)</code>
              </summary>

              - **Usage**: Extracts the JWT from a custom header in the request.
              - **Input parameter**: header_name (string) - The name of the custom header containing the JWT.
              - **Example**:

              ```js
              jwtFromRequest: ExtractJwt.fromHeader('auth_token')
              ```

              </details>


          3. <details>
              <summary>
              <code>ExtractJwt.fromBodyField(field_name)</code>
              </summary>

              - **Usage**:  Extracts the JWT from a specific field in the request body (typically used in form submissions or JSON payloads).
              - **Input parameter**: field_name (string) - The name of the field in the request body that contains the JWT.
              - **Example**:

              ```js
              jwtFromRequest: ExtractJwt.fromBodyField('token')
              ```

              </details>

          4. <details>
              <summary>
              <code>ExtractJwt.fromUrlQueryParameter(param_name)</code>
              </summary>

              - **Usage**:  Extracts the JWT from a URL query parameter.
              - **Input parameter**: param_name (string) - The name of the query parameter in the URL that contains the JWT.
              - **Example**:

              ```js
              jwtFromRequest: ExtractJwt.fromUrlQueryParameter('token')
              ```
              </details>
                        
          5. <details>
              <summary>
              <code>fromAuthHeaderWithScheme(auth_scheme) </code>
              </summary>

              - **Usage**:  Extracts the JWT from Authorization Header with the specified auth_scheme
              - **Input parameter**: (string) Auth scheme like Bearer, Token, etc
              - **Example**:

                  ```js
                  jwtFromRequest: ExtractJwt.ExtractJwt.fromAuthHeaderWithScheme('Token')
                  ```
              </details>

          6. <details>
              <summary>
              <code>fromExtractors([array of extractor functions]) </code>
              </summary>

              - **Usage**:  Lets us define multiple extractors to extract jwt from different sources one after other.
              - **Input parameter**: (array) Array of extractors
              - **Example**:

                  ```js
                  const extractors = [
                      ExtractJwt.fromAuthHeaderAsBearerToken(),         // Try the Bearer token from Authorization header
                      ExtractJwt.fromUrlQueryParameter('auth_token')    // Then try the token from the URL query parameter
                  ];

                  const opts = {
                      jwtFromRequest: ExtractJwt.fromExtractors(extractors),
                      secretOrKey: 'your_secret_key'
                  };
                  ```
              </details>
                        
          7. <details>
              <summary>
              <code>Custom Extractors</code>
              </summary>

              - **Usage**:  Lets us define custom extractoinof tokens from anywhere
              - **Example**:
                  ```js
                  //when extracting from cookies using cookie parser
                  var cookieParser = require('cookie-parser')
                  const express = require('express');

                  const app = express()
                  app.use(cookieParser())
                                
                  //custom extractor
                  var cookieExtractor = function (req) {
                  var token = null;
                  if (req &amp;&amp; req.cookies) {
                      token = req.cookies["jwt"];
                  }
                  return token;
                  };

                  const opts = {
                      jwtFromRequest: cookieExtractor,
                      secretOrKey: 'your_secret_key'
                  };
                  ```
              </details>


          </details>

      2. <details>
          <summary>
              <code>secretOrKey</code> - (string or buffer) Secret key to verify JWT
          </summary>

          - The key used to verify the JWT signature. This is essential for validating the authenticity of the token.

          - **For symmetric algorithms** (e.g., HS256, HS384, HS512), `secretOrKey` will be a shared secret string or buffer used by both the server that signs the JWT and the server that verifies it.
          - **For asymmetric algorithms** (e.g., RS256, RS384, RS512), `secretOrKey` will be a public key that verifies the JWT, while the corresponding private key is used to sign the JWT.

          - Examples:
              - Symmetric key:
                  ```js
                  const opts = {
                      secretOrKey: 'your_jwt_secret_key' //can be any random word
                  };
                  ```
              - Asymmetric key:
                  ```js
                  const opts = {
                      secretOrKey: fs.readFileSync('./path/to/public.key', 'utf8')
                  };
                  ```
              - Note:
                  - If using symmetric encryption (e.g., HS256), the same secretOrKey must be used for both signing and verifying the token.
                  - If using asymmetric encryption (e.g., RS256), the secretOrKey should be the public key, while the private key is used to sign the token.
                  - It is important to securely manage this key, as exposure could compromise the security of your system.
                            
          </details>

      3. <details>
          <summary>
              <code>secretOrKeyProvider</code> - (function) [optional] Function to get secretOrKey from anywhere
          </summary>

          - This function dynamically provides the secret or public key for verifying the JWT. It is useful in cases where the key needs to be determined based on the request, such as in multi-tenant applications or when using different keys for different users.
          - Do not use both `secretOrKey` and `secretOrKeyProvider`. Use either of them
          - Parameters:
              - `request`: The original HTTP request object.
              - `rawJwtToken`: The raw JWT token extractedfrom the request.
              - `done`: A function to return the key, with the parameters:
                  - `err`
                  - `secretOrKey` (string or buffer)
          - Example:
              ```js
                  const opts = {
                      secretOrKeyProvider: (request, rawJwtToken, done) =&gt; {
                          // Logic to determine the secret or key dynamically
                          const secretOrKey = getSecretForTenant(request); // Example function to get the secret key based on tenant
                          done(null, secretOrKey); // Pass the key to the callback function
                      }
                  };
              ```

              - Note:
                  1. If secretOrKeyProvider is provided, it overrides the static secretOrKey option
                  2. Useful in scenarios where the key might change per request or per user, such as:
                      - Multi-tenant applications where each tenant has a different key.
                      - Using different keys for different users or services.
                  3. If the key cannot be determined (e.g., a database lookup fails), call done(err) to signal an error.
                  4. When using asymmetric encryption (e.g., RS256), the secretOrKeyProvider would return the public key for verification.

              - Example for multi-tenant application:
                  ```js
                  const opts = {
                      secretOrKeyProvider: (request, rawJwtToken, done) =&gt; {
                          // Get the tenant's key based on some property of the request (e.g., subdomain or user ID)
                          const tenantKey = getTenantKeyFromDb(request.tenantId); // Example function to retrieve tenant's key
                          done(null, tenantKey);
                      }
                  };
                  ```
              - Use Case:
                  - Multi-tenant systems where different tenants have different signing keys.
                  - Dynamic environments where the key cannot be determined statically and must be retrieved or computed based on the incoming request.
          </details>

      4. <details>
              <summary>
              <code>issuer</code> - (string or array) [optional]  Verifies the issuer (iss) claim of the token.
              </summary>
              - Examples:
                            
              ```js
              const opts = {
                          issuer: 'https://accounts.google.com'
                      };
              ```
              ```js
              const opts = {
                      issuer: [
                          'https://accounts.google.com',
                          'https://your-tenant-name.auth0.com/',
                          'https://dev-123456.okta.com'
                      ]
                  };
              ```
              - Use Cases:
                  - **Single Issuer Application**: If all tokens are issued by your application, you would set the issuer option to your app's identifier.
                  - **Third-Party Tokens**: If you're working with tokens issued by third parties (e.g., OAuth providers or external identity systems), you would set issuer to the known trusted issuer.
          </details>

      5. <details>
          <summary>
          <code>algorithms</code> - (array) [optional] List of allowed algorithms for token verification, e.g., ['HS256', 'RS256'].
          </summary>

          - **Purpose**: This option helps enforce which algorithms are accepted for signing JWTs, improving security by rejecting tokens signed with algorithms that are not trusted or expected.
          - **Default Behavior**: If the algorithms option is not provided, the strategy will allow any algorithm,
          - Examples:
              ```js
              const opts = {,
                  algorithms: ['HS256', 'RS256', 'ES256'] // Accepts JWTs signed with HS256, RS256, or ES256 algorithms
              };
              ```
              ```js
              const opts = {,
                  algorithms: ['HS256']
              };
              ```
          </details>

      6. <details>
          <summary>
          <code>audience</code> - (string or array) [optional] To specify the recipients of Jwt
          </summary>

          - **Purpose**: To specify the recipients of Jwt. Will be verifiesd against the recipients mentioned in *aud* coming through *jwt_payload*.
          - Examples:
              ```js
              const opts = {,
                   "aud": "user-service",
              };
              ```
              ```js
              const opts = {,
                   "aud": ["user-service", "billing-service", "yoursite.net"]
              };
              ```
          </details>

      7. <details>
              <summary>
              <code>ignoreExpiration</code> - (boolean) [optional] Whether to ignore the token's expiration time during verification.
              </summary>

              - **Purpose**: 
                  - When you want to accept tokens even if they have expired.
                  - Useful in testing environments where you might not want to deal with token expiration.
                  - The `exp` claim in a JWT specifies the expiration time of the token. Expiry is not set by passport-jwt.
              - **Default Behavior**: By default, ignoreExpiration is false, meaning that Passport-JWT will check the exp claim to ensure the token is not expired.
              - Examples:
                  ```js
                  const opts = {
                      ignoreExpiration: true // Accepts expired tokens
                  };
                  ```
                  ```js
                  const opts = {
                      ignoreExpiration: false // Enforces expiration check
                  };
                  ```
          </details>

      8. <details>
          <summary>
          <code>passReqToCallback</code> - (boolean) [optional] Whether to pass the request object to the verification callback.
          </summary>

          - The `passReqToCallback` option specifies whether the request object should be passed to the `verify` callback function in the `JwtStrategy`. 
          - Useful if you need access to the `req` object for additional logic inside verify callback.
          - Example:
              ```js
              const opts = {
                  passReqToCallback: true // Passes the request object to the verify callback
              };
              ```
              ```js
              passport.use(new JwtStrategy(opts, (req, jwtPayload, done) =&gt; { //now you can add req as parameter
                  // Access request object
                  console.log(req.headers); // Example of accessing headers

                  User.findById(jwtPayload.sub, (err, user) =&gt; {
                      if (err) return done(err, false);
                      if (user) return done(null, user);
                      return done(null, false);
                  });
              }));
              ```
          </details>
                    
      9. <details>
          <summary>
          <code>jsonWebTokenOptions </code> - (object) [optional + deprecated] To pass options to customise token verification
          </summary>

          - **Purpose**: To pass options directly to the underlying jsonwebtoken.verify() and customise token verification.
          - **Deprecated**: Though deprecated, still allows you to pass audience / issuer / algorithms / ignoreExpiration on the options 
          - **Properties**:
              - <details><summary><code>algorithms</code>: (array) Specifies allowed signing algorithms.</summary>

                  - Specifies which algorithms are allowed for verifying the JWT.
                  - eg: `algorithms: ['HS256']`
                  </details>
              - <details><summary><code>audience</code>: (string | RegExp | array) Specifies the expected audience of the JWT.</summary>

                  -  Specifies the expected audience of the JWT (who the token is intended for). It can be a string, regex, or array of strings/regexes.
                  - eg: `audience: 'your-app-client-id'`
                  </details>
              - <details><summary><code>clockTimestamp</code>: (integer) Sets a fixed time for token validation.</summary>

                  - The time in seconds since the epoch to use as the current time when verifying the JWT.
                  ```js 
                  clockTimestamp: Math.floor(Date.now() / 1000) // current time in seconds
                  ```
                  </details>
              - <details><summary><code>clockTolerance</code>: (integer) Helps with clock skew issues.</summary>

                  - Specifies the allowed clock skew (in seconds) when verifying the exp and nbf claims (useful when different servers have slightly unsynchronized clocks).
                  - eg: `clockTolerance: 5`
                  </details>
              - <details><summary><code>complete</code>: (boolean) Returns `{ payload, header, signature }` if true.</summary>

                  -  If true, returns an object with the decoded { payload, header, signature } instead of just the payload.
                  - eg: `complete: true`
                  </details>
              - <details><summary><code>issuer</code>: (string | array) Specifies the expected issuer of the JWT.</summary>

                  - Specifies the expected issuer of the JWT (the entity that issued the token). Can be a string or an array of strings.
                  - eg: `issuer: 'auth.your-app.com'`
                  </details>
              - <details><summary><code>ignoreExpiration</code>: (boolean) Ignores the `exp` claim if true.</summary>

                  -  If true, ignores the exp claim during verification (useful in development, but not recommended in production).
                  - eg: `ignoreExpiration: true`
                  </details>
              - <details><summary><code>ignoreNotBefore</code>: (boolean) Ignores the `nbf` claim if true.</summary>

                  - If true, ignores the nbf (Not Before) claim when verifying the token.
                  - eg: `ignoreNotBefore: true`
                  </details>
              - <details><summary><code>jwtid</code>: (string) Validates the token ID (jti) claim.</summary>

                   - The jti (JWT ID) claim specifies a unique identifier for the token to prevent replay attacks.
                   - eg: `jwtid: 'unique-jwt-id-12345'`
                  </details>
              - <details><summary><code>nonce</code>: (string) Checks the `nonce` claim (used in OpenID Connect).</summary>

                  -  Used to check the nonce claim in OpenID Connect to prevent replay attacks. The nonce is a string used to associate a client session with an ID token.
                  - eg: `nonce: 'nonce-value-generated-at-auth-time'`
                  </details>
              - <details><summary><code>subject</code>: (string) Specifies the expected `sub` (Subject) claim.</summary>

                   - Specifies the expected sub (Subject) claim of the JWT, which typically identifies the principal (user) of the token.
                   - eg: `subject: 'user-id-12345'`
                  </details>
              - <details><summary><code>maxAge</code>: (string | number) Limits how old a token can be.</summary>

                  -  Specifies the maximum allowable age (in seconds or a time string) for the JWT since its iat (Issued At) claim. Used to reject old tokens.
                  - eg: `maxAge: '24h'`
                  </details>
              - <details><summary><code>allowInvalidAsymmetricKeyTypes</code>: (boolean) Allows invalid asymmetric key types if true.</summary>

                  - When set to true, allows invalid asymmetric key types during verification (not recommended unless necessary).
                  - eg: `allowInvalidAsymmetricKeyTypes: true`
                  </details>
          - Examples:
              ```js
              const opts = {
                  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
                  secretOrKey: 'your_secret_key',
                  jsonWebTokenOptions: {
                      clockTolerance: 5,  // Allow 5 seconds of clock skew
                      maxAge: '1d',       // Only accept tokens no more than 1 day old
                      algorithms: ['HS256'],  // Only accept tokens signed with HS256
                      ignoreNotBefore: true, // Will ignore token's Not before dates
                      ignoreExpiration: false // Will validate the 'expiration' claim
                  }
              };

              passport.use(new JwtStrategy(opts, (jwtPayload, done) =&gt; {
                  User.findById(jwtPayload.sub, (err, user) =&gt; {
                      if (err) return done(err, false);
                      if (user) return done(null, user);
                      return done(null, false);
                  });
              }));
              ```
          </details>
  </details>

                <details>
  <summary>
      <code>`verify`</code> - (function) Verify Callback
  </summary>

  - **Purpose**: Callback used in the `JwtStrategy` to validate the JWT and determine if it should be accepted.
  - **Parameters**: 
      - <details>
          <summary>
          <code>payload</code> - (object) Payload for verify callback
          </summary>

          - **Purpose**: It is the decoded JWT payload, which contains the claims from the token (e.g., user ID, roles). 
          - It is an object that contains the claims from the decoded JWT. We can only access these claim values and set it. It is set using *jwt.sign()* using [*jsonwebtoken*](http://jwtdocumentation) module.
          - **Properties**  **(Claims)**:
              1. `sub`: The **subject** of the token, usually the user ID. This is a standard claim and is often used to identify the user.
              2. `exp`: The **expiration** time of the token, specified as a Unix timestamp. This is a standard claim used to determine if the token has expired.
              3. `iat`: The **issued-at** time, specified as a Unix timestamp. This indicates when the token was issued.
              4. `iss`: The **issuer** of the token, which is a standard claim indicating who issued the token.
              5. `aud`: The **audience** for which the token is intended. This is a standard claim indicating the recipient(s) of the token. 
              6. `nbf`: **Not Before** - The time before which the token should not be considered valid.
              7. `jti`: **JWT ID** - A unique identifier for the token, which can be used to prevent replay attacks.

              &gt; **Note** : we can also have any custom claims. eg: roles, name.
          - Example:
              ```js
              //setting claims in some other file
              const jwt = require('jsonwebtoken')
              fucntion signIn(req, res){
                  const payload = {
                      sub: user._id, 
                      roles: user.roles, 
                      exp: Math.floor(Date.now() / 1000) + (60 * 60) 
                      //etc
                  }
                  const token = jwt.sign(payload, 'your_jwt_secret_key')
                  res.send({token})
              }

              //accessing those claims
              passport.use(new JwtStrategy(opts, (jwtPayload, done) =&gt; {
                  console.log('User ID:', jwtPayload.sub); 
                  console.log('Token Expiry Time:', jwtPayload.exp); 
                  console.log('User Roles:', jwtPayload.roles);

                  User.findById(jwtPayload.sub, (err, user) =&gt; {
                      if (err) return done(err, false);
                      if (user) return done(null, user);
                      return done(null, false);
                  });
              }));

              ```
          </details>

      - <details>
          <summary>
          <code>done</code> - (fucntion) To indicate the result of the verification.
          </summary>

          - **Purpose**: To indicate the result of the verification.
          - **Parameters**:
              - `err`: Error during verification if any
              - `user`: Any sort of data that comes out after the logic inside verify callback
              - `info`: [optional] Any message regarding error or user
          - Example:
              ```js
              //without info
              passport.use(new JwtStrategy(opts, (jwtPayload, done) =&gt; {
                  User.findById(jwtPayload.sub, (err, user) =&gt; {
                      if (err) return done(err, false);
                      if (user) return done(null, user); // Verification successful
                      return done(null, false); // No user found, but no error
                  });
              }));
              ```
              ```js
              //with info
              passport.use(new JwtStrategy(opts, (jwtPayload, done) =&gt; {
                  User.findById(jwtPayload.sub, (err, user) =&gt; {
                      if (err) return done(err, false);
                      if (!user) return done(null, false, { message: 'User not found' });
                  });
              }));
              ```
            </details>
                
          - <details>
              <summary>
              <code>req</code> [conditional]
              </summary>

              - Only when inside opts, passReqToCallback is true
              ```js
              const opts = {passReqToCallback: true}

              const verify = (req, payload, done)=&gt;{
                  // handle payload data
              }
              ```
              </details>

      - Example:
          ```js
          const verify = (jwtPayload, done) =&gt; {
              // jwtPayload contains the decoded JWT payload
              User.findById(jwtPayload.sub, (err, user) =&gt; {
                  if (err) return done(err, false); // Error during user lookup
                  if (user) return done(null, user); // User found, authentication successful
                  return done(null, false); // User not found, authentication failed
              });
          }

          passport.use(new JwtStrategy(opts, verify));
          ```
   </details>
              </li>
              <li>Example:
                <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">JwtStrategy</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Startegy</span><span class="p">(</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">verify</span><span class="p">)</span>
  <span class="nx">passport</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">JwtStrategy</span><span class="p">);</span>
</code></pre></div>                </div>
              </li>
              <li>Strategy is of 2 tyes:
                <ul>
                  <li>
                    <details><summary>With req</summary>

  - paasing opts with true for passReqToCallback enables us to use `req` in verify callbak
  ```js
  const opts = { passReqToCallback:true }

  const verify = (req, payload, done)=&gt;{

  }
  ```
  </details>
                  </li>
                  <li>
                    <details><summary>Without req</summary>
  ```js
  opts = { passReqToCallback:false }
  ```
  </details>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ol>
      </li>
    </ul>
  </li>
  <li>Full Structure (for deafult strategy):
<a id="full-structure"></a>
    <ul>
      <li>Default Strategy:
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="kd">const</span> <span class="p">{</span> <span class="nx">Strategy</span><span class="p">,</span> <span class="nx">ExtractJwt</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">passport-jwt</span><span class="dl">"</span><span class="p">);</span>
      <span class="kd">const</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">passport</span><span class="dl">"</span><span class="p">);</span> <span class="c1">//to use for passport.use()</span>

      <span class="c1">// Options for the strategy</span>
      <span class="kd">const</span> <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span>
          <span class="na">jwtFromRequest</span><span class="p">:</span> <span class="nx">ExtractJwt</span><span class="p">.</span><span class="nx">fromAuthHeaderAsBearerToken</span><span class="p">(),</span>
          <span class="na">secretOrKey</span><span class="p">:</span> <span class="dl">"</span><span class="s2">your_jwt_secret_key</span><span class="dl">"</span><span class="p">,</span>
          <span class="c1">//etc</span>
      <span class="p">};</span>

      <span class="c1">//verify callback for strategy</span>
      <span class="kd">const</span> <span class="nx">verify</span> <span class="o">=</span> <span class="p">(</span><span class="nx">jwtPayload</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">User</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">jwtPayload</span><span class="p">.</span><span class="nx">sub</span> <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
              <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
          <span class="p">}</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
              <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
              <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">// User not found</span>
          <span class="p">}</span>
          <span class="p">});</span>
      <span class="p">};</span>

      <span class="c1">//new jwt-Strategy</span>
      <span class="kd">const</span> <span class="nx">JwtStrategy</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Strategy</span><span class="p">(</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">verify</span><span class="p">)</span>

      <span class="c1">//using new jwt-strategy in passport</span>
      <span class="nx">passport</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">JwtStrategy</span><span class="p">);</span>

      <span class="c1">//authenticating default jwt-strategy</span>
      <span class="nx">passport</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="dl">'</span><span class="s1">jwt</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
      <li>Named Strategy:
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="kd">const</span> <span class="p">{</span> <span class="nx">Strategy</span><span class="p">,</span> <span class="nx">ExtractJwt</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">passport-jwt</span><span class="dl">"</span><span class="p">);</span>
      <span class="kd">const</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">passport</span><span class="dl">"</span><span class="p">);</span> 

      <span class="kd">const</span> <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span>
          <span class="na">jwtFromRequest</span><span class="p">:</span> <span class="nx">ExtractJwt</span><span class="p">.</span><span class="nx">fromAuthHeaderAsBearerToken</span><span class="p">(),</span>
          <span class="na">secretOrKey</span><span class="p">:</span> <span class="dl">"</span><span class="s2">your_jwt_secret_key</span><span class="dl">"</span><span class="p">,</span>
          <span class="c1">//etc</span>
      <span class="p">};</span>

      <span class="kd">const</span> <span class="nx">verify</span> <span class="o">=</span> <span class="p">(</span><span class="nx">jwtPayload</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">User</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">jwtPayload</span><span class="p">.</span><span class="nx">sub</span> <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
              <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
          <span class="p">}</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
              <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
              <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span> 
          <span class="p">}</span>
          <span class="p">});</span>
      <span class="p">};</span>

      <span class="kd">const</span> <span class="nx">JwtStrategy</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Strategy</span><span class="p">(</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">verify</span><span class="p">)</span>

      <span class="c1">//using named jwt-strategy in passport</span>
      <span class="nx">passport</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">my-jwt</span><span class="dl">'</span><span class="p">,</span> <span class="nx">JwtStrategy</span><span class="p">);</span>

      <span class="c1">//authenticating named jwt-strategy</span>
      <span class="nx">passport</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="dl">'</span><span class="s1">my-jwt</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

<h2 id="authenticating-jwt-after-strategy-configuration">Authenticating jwt after strategy configuration</h2>

<ul>
  <li>Ways:
    <ul>
      <li>As of understood till date, passport jwt can be authenticated in 2ways:
        <ul>
          <li>With session support (<strong>without callback</strong>)</li>
          <li>Without session support (<strong>with callback</strong>)</li>
        </ul>
      </li>
      <li>With session support (without callback), one would need to many extar methods like <code class="language-plaintext highlighter-rouge">passport.serializeUser</code>, <code class="language-plaintext highlighter-rouge">session()</code>, etc. We would not have to specifically set <code class="language-plaintext highlighter-rouge">req.user</code> to user. Passport would do it internally for us.</li>
      <li>Without session support (with callback), we dont need any extra methods. But we would need to set <code class="language-plaintext highlighter-rouge">req.user</code> to user explicitly by us.</li>
    </ul>
  </li>
</ul>

<ol>
  <li>Without session support (<strong>with callback</strong>)
<a id="Without"></a>
    <ul>
      <li>
        <p>in the <a href="https://github.com/jaredhanson/passport/blob/217018dbc46dcd4118dd6f2c60c8d97010c587f8/lib/middleware/authenticate.js#L221">internal code</a>, if passport.authenticate gets a callback, it doesnt call any other internal function. It just returns that callback with user and err, to handle by ourself.
 ```js
 // Options for JWT strategy, including extractor function and secret key
 const optsJwt = {
  jwtFromRequest: cookieExtractor,
  secretOrKey: constant.secretKey
 }
 // Function to verify JWT token and retrieve user information
 const verifyJwt = async function (jwt_payload, done) {
  if (!jwt_payload.id) return done(null, false);</p>

        <p>try {
      let user = await User.findOne({ _id: jwt_payload.id });</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  if (user) return done(null, santizeUser(user));
  else return done(null, false);
</code></pre></div>        </div>

        <p>} catch (error) {
      return done(err, false);
  }
 }</p>
      </li>
    </ul>

    <p>// Options for Local strategy, specifying the field for username
 const optsLocal = { usernameField: “email” }
 // Function to verify local credentials and handle authentication
 const verifyLocal = async function (email, password, done) {
     try {
         const user = await User.findOne({ email: email }).exec();</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     if (!user) {
         return done(null, false, { message: "No such user email" });
     }

     crytpoJwt(user, password, done)

 } catch (error) {
     return done(error);
 }  }
</code></pre></div>    </div>

    <p>// Initialize Passport with JWT strategy
 passport.use(“jwt”,new JwtStrategy(optsJwt, verifyJwt););</p>

    <p>// Middleware to authenticate requests using JWT strategy
 app.use((req, res, next) =&gt; {
     passport.authenticate(“jwt”, (err, user, info) =&gt; {
         if (err || !user)
             return next(new ApiError(httpStatus.UNAUTHORIZED, “Please authenticate”))</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     req.user = user;
     next()
 })(req, res, next)  })  ```
</code></pre></div>    </div>
  </li>
  <li>With session support (<strong>without callback</strong>)
<a id="With"></a>
    <ul>
      <li>When with callback, internalluy, passport passes many checks and process including
        <ul>
          <li>needing a session</li>
          <li>needing to use passport.serializeUser atleast once with a callback containing user.id/user</li>
        </ul>
      </li>
      <li>In the latest version, for authenticating using <em>passport-jwt</em> configured strategy, we need to use 2 extra methods from <em>passport</em> package and 1 method from <em>express-session</em> package:
        <ul>
          <li>
            <details>
  <summary>
  <code>passport.authenticate()</code> from passport
  </summary>

  - `passport.authenticate()` is a passport middleware. It has been [customised internally](https://github.com/mikenicholson/passport-jwt/blob/master/lib/strategy.js#L90) to authenticate jwt via passport-jwt package.
  - 3 paramters:
      - strategy: (string|array)
      - options
      - callback [optional]
  - <details>
      <summary>It is wrapped inside a wrapper as an express middleware to access req, res and next. Without the wrapper it won't pass on to the next function.
      </summary>

      ```js
      app.use((req, res, next)=&gt;{
          passport.authenticate('jwt')(req, res, next)
      })
      ```
      </details>
  - <details>
      <summary>
      In older versions it would itself be placed as a middleware, but not anymore
      </summary>

      ```js
      app.use(passport.authenticate('jwt'))
      ```
      </details>
            
  - Parameters:
      - <details>
          <summary>
              <code>strategy</code>: (string or array)
          </summary>

          - **Purpose**: To point to the strategies named during configuration.
          - **Example**: jwt, my-jwt, [jwt, my-jwt], etc
          </details>

      - <details>
          <summary>
              <code>options</code>: (object) [optional]
          </summary>

          - **Purpose**: Options to control the behavior of the authentication middleware. 
          - It controls the behaviour at individual route/request level in comparison to opts options which controls behaviour at global/strategy level.
          - If there are conflicting options between opts and authenticateOptions, then authenticateOptions will override for that particular route.
          - **Properties**:
              <details>
              <summary>1. authInfo</summary>
              <p><strong>Description:</strong> Whether to include additional authentication information.</p>
              <p><strong>Default:</strong> undefined (additional info is not included).</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { authInfo: true });</code></pre>
              </details>

              <details>
              <summary>2. assignProperty</summary>
              <p><strong>Description:</strong> Assigns the object provided by the verify callback to the specified property on the <code>req</code> object.</p>
              <p><strong>Default:</strong> undefined (the object is assigned to <code>req.user</code>).</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { assignProperty: 'userAccount' });</code></pre>
              </details>

              <details>
              <summary>3. failureFlash</summary>
              <p><strong>Description:</strong> True to flash failure messages or a string to use as a flash message for failures.</p>
              <p><strong>Default:</strong> undefined (failure messages are not flashed).</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { failureFlash: 'Login failed' });</code></pre>
              </details>

              <details>
              <summary>4. failureMessage</summary>
              <p><strong>Description:</strong> True to store failure message in <code>req.session.messages</code>, or a string to use as an override message for failure.</p>
              <p><strong>Default:</strong> undefined (failure messages are not stored).</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { failureMessage: 'Login unsuccessful' });</code></pre>
              </details>

              <details>
              <summary>5. failureRedirect</summary>
              <p><strong>Description:</strong> URL to redirect to after a failed login attempt.</p>
              <p><strong>Default:</strong> undefined (no redirect occurs).</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { failureRedirect: '/login' });</code></pre>
              </details>

              <details>
              <summary>6. failWithError</summary>
              <p><strong>Description:</strong> Whether to fail with an error.</p>
              <p><strong>Default:</strong> undefined (does not fail with error).</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { failWithError: true });</code></pre>
              </details>

              <details>
              <summary>7. keepSessionInfo</summary>
              <p><strong>Description:</strong> Whether to keep session information.</p>
              <p><strong>Default:</strong> undefined (session info is not specifically retained).</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { keepSessionInfo: true });</code></pre>
              </details>

              <details>
              <summary>8. session</summary>
              <p><strong>Description:</strong> Save login state in session.</p>
              <p><strong>Default:</strong> true (session is used by default).</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { session: false });</code></pre>
              </details>

              <details>
              <summary>9. scope</summary>
              <p><strong>Description:</strong> Scope of access required.</p>
              <p><strong>Default:</strong> undefined (no scope is specified).</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { scope: ['read', 'write'] });</code></pre>
              </details>

              <details>
              <summary>10. successFlash</summary>
              <p><strong>Description:</strong> True to flash success messages or a string to use as a flash message for success.</p>
              <p><strong>Default:</strong> undefined (success messages are not flashed).</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { successFlash: 'Login successful' });</code></pre>
              </details>

              <details>
              <summary>11. successMessage</summary>
              <p><strong>Description:</strong> True to store success message in <code>req.session.messages</code>, or a string to use as an override message for success.</p>
              <p><strong>Default:</strong> undefined (success messages are not stored).</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { successMessage: 'Welcome back!' });</code></pre>
              </details>

              <details>
              <summary>12. successRedirect</summary>
              <p><strong>Description:</strong> URL to redirect to after a successful login.</p>
              <p><strong>Default:</strong> undefined (no redirect occurs).</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { successRedirect: '/dashboard' });</code></pre>
              </details>

              <details>
              <summary>13. successReturnToOrRedirect</summary>
              <p><strong>Description:</strong> URL to redirect to or return to after a successful login.</p>
              <p><strong>Default:</strong> undefined (no redirect or return occurs).</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { successReturnToOrRedirect: '/profile' });</code></pre>
              </details>

              <details>
              <summary>14. state</summary>
              <p><strong>Description:</strong> State parameter for the request.</p>
              <p><strong>Default:</strong> undefined (no state is set).</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { state: 'xyz' });</code></pre>
              </details>

              <details>
              <summary>15. pauseStream</summary>
              <p><strong>Description:</strong> Pause the request stream before deserializing the user object from the session.</p>
              <p><strong>Default:</strong> false (stream is not paused).</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { pauseStream: true });</code></pre>
              </details>

              <details>
              <summary>16. userProperty</summary>
              <p><strong>Description:</strong> Property on <code>req</code> that will be set to the authenticated user object.</p>
              <p><strong>Default:</strong> 'user' (authenticated user is set to <code>req.user</code>).</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { userProperty: 'currentUser' });</code></pre>
              </details>

              <details>
              <summary>17. passReqToCallback</summary>
              <p><strong>Description:</strong> Whether to pass the request object to the callback.</p>
              <p><strong>Default:</strong> undefined (request object is not passed to the callback).</p>
              <p><strong>Overrides:</strong> Overrides passReqToCallback set in opts of strategy configuration</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { passReqToCallback: true });</code></pre>
              </details>

              <details>
              <summary>18. prompt</summary>
              <p><strong>Description:</strong> Prompt parameter for the request.</p>
              <p><strong>Default:</strong> undefined (no prompt is set).</p>
              <p><strong>Example:</strong></p>
              <pre><code>passport.authenticate('strategy', { prompt: 'login' });</code></pre>
              </details>

          </details>


      - <details>
          <summary>
              <code>callback</code>: (function) [optional]
          </summary>

          - **Purpose**: Handles the result of the authentication process and provides feedback or further actions based on the outcome.

          - **Parameters**:
              1. <details>
                  <summary>
                      <code>err</code>: (Error or <code>null</code>)
                  </summary>

                  - **Description**: Contains any error that occurred during the authentication process.
                  - **Type**: err | false
                  - **Example**: An error object if something went wrong, otherwise `null`.
                  </details>

              2. <details>
                  <summary>
                      <code>user</code>: (object | string | Array)
                  </summary>

                  - **Description**: The authenticated user object if authentication was successful, or `false` if no user was authenticated.
                  - **Type**: User | false | null
                  - **Example**: The user data retrieved from the database if authentication is successful.
                  </details>

              3. <details>
                  <summary>
                      <code>info</code>: (Object or <code>false</code>)
                  </summary>

                  - **Description**: Contains additional information or error messages about the authentication process. This can include details about why authentication failed.
                  - **Type**: object | string | Array
                  - **Example**: An object with a `message` property if authentication fails, or `false` if no additional information is available.
                  </details>

              4. <details>
                  <summary>
                      <code>status</code>: (number | Array)
                  </summary>

                  - **Description**: The HTTP status code representing the result of the authentication attempt.
                  - **Type**: number | Array (HTTP status code)
                  - **Example**: `401` for unauthorized access, `200` for successful authentication.
                  </details>
          </details>




  - Examples:
      ```js
      //default strategy without optional parameters
      app.post("/profile", (req, res, next) =&gt; {
          passport.authenticate("jwt")(req, res, next)
      });
      ```
      <details>
          <summary>
          more examples
          </summary>

          ```js
          //custom strategy without optional parameters
          app.post("/profile", (req, res, next) =&gt; {
              passport.authenticate("my-jwt")(req, res, next)
          });
          ```
          ```js
          //default strategy with optional parameters
          app.post("/profile", (req, res, next) =&gt; {
              passport.authenticate("jwt", { session: false }, function(err, user, info, status) {
                  if (err) {
                      return res
                              .status(500)
                              .json({ message: 'An error occurred', error: err });
                  }

                  if (!user) {
                      return res
                              .status(401)
                              .json({ message: 'Unauthorized', info: info });
                  }

                  //in case of callback we need to set req.user=user
                  req.user=user

                  res.send(status).json(user.profile);
              })(req, res, next)
          });
          ```
          </details>
  </details>
          </li>
          <li>
            <details>
  <summary>
  <code>passport.serializeUser()</code> from passport
  </summary>

  - We need passport.serializeUser() during the process of logIn which happens inside passport.authenticate()
  - <details>
      <summary>Input parameter: <code>callback function</code>
      </summary>

      - <details><summary>input parameters of cb fn: <code>user</code>, <code>done</code></summary>

          - `user`: The user object returned from the authentication process.
          - <details><summary><code>done</code>: A callback function that you call after serializing the user, which takes two parameters: <code>err</code>, <code>id</code></summary>

              - `err`: Any error that occurred during serialization.
              - `id`: The user ID or any unique identifier that will be stored in the session.
              ```js
              passport.serializeUser((user, done)=&gt;{
                  done(err, id)
              });
              ```
              </details>

          ```js
          passport.serializeUser((user, done)=&gt;{});
          ```
          </details>

      ```js
      passport.serializeUser(callback);
      ```

      </details>

  ```js
  // structure of serialiseUser
  passport.serializeUser((user, done) =&gt; {
      done(null, user.id);
  });
  //err can be null or err
  //user can be false, user, user.id, or anything related to user
  ```
  </details>
          </li>
          <li>
            <details>
  <summary>
  <code>session()</code> from express-session
  </summary>

  - session() is also necssary to logIn using passport.authenticate()
  - Parameter: `sessionOptions` (object)
  - So structure is `session(sessionOptions)
  - ```js
      //structure of session
      const express = require("express");
      const session = require("express-session");

      const app = express()

      app.use(session({
              secret: process.env.SESSION_SECRET,
          resave: false,
              saveUninitialized: false,
      }))
      ```
                    
  - Session option keys:
      <details>
      <summary><strong>1. secret</strong></summary>
      <ul>
          <li><strong>Type:</strong> string | array</li>
          <li><strong>Default:</strong> N/A</li>
          <li><strong>Description:</strong> String(s) used to sign the session ID cookie.</li>
          <li><strong>Example:</strong> <code>secret: 'mySecret'</code></li>
      </ul>
      </details>

      <details>
      <summary><strong>2. genid(req)</strong></summary>
      <ul>
          <li><strong>Type:</strong> function [(req: express.Request) =&gt; string]</li>
          <li><strong>Default:</strong> Uses uid-safe library to generate a unique session ID.</li>
          <li><strong>Description:</strong> Function to generate session IDs.</li>
          <li><strong>Example:</strong> <code>genid: () =&gt; 'customID'</code></li>
      </ul>
      </details>

      <details>
      <summary><strong>3. name</strong></summary>
      <ul>
          <li><strong>Type:</strong> string </li>
          <li><strong>Default:</strong> 'connect.sid'</li>
          <li><strong>Description:</strong> Name of the session ID cookie.</li>
          <li><strong>Example:</strong> <code>name: 'session_id'</code></li>
      </ul>
      </details>

      <details>
      <summary><strong>4. store</strong></summary>
      <ul>
          <li><strong>Type:</strong> Store </li>
          <li><strong>Default:</strong> MemoryStore (in-memory session store)</li>
          <li><strong>Description:</strong> Specifies session store instance.</li>
          <li><strong>Example:</strong> <code>store: new RedisStore()</code></li>
      </ul>
      </details>

      <details>
      <summary><strong>5. cookie</strong></summary>
      <ul>
          <li><strong>Type:</strong> object </li>
          <li><strong>Default:</strong> N/A</li>
          <li><strong>Description:</strong> Options for the session cookie (e.g., maxAge, secure).</li>
          <li><strong>CookieOptions:</strong> 
          <details>
              <summary><strong>1. maxAge</strong></summary>
              <ul>
                  <li><strong>Type:</strong> number </li>
                  <li><strong>Default:</strong> N/A</li>
                  <li><strong>Description:</strong> Specifies the maximum age of the cookie in milliseconds.</li>
                  <li><strong>Example:</strong> <code>maxAge: 3600000</code> (1 hour)</li>
              </ul>
              </details>

      <details>
          <summary><strong>2. partitioned</strong></summary>
          <ul>
              <li><strong>Type:</strong> boolean </li>
              <li><strong>Default:</strong> false</li>
              <li><strong>Description:</strong> Specifies the `Partitioned` attribute for the cookie. Not fully standardized yet.</li>
              <li><strong>Example:</strong> <code>partitioned: true</code></li>
          </ul>
          </details>

      <details>
          <summary><strong>3. priority</strong></summary>
          <ul>
              <li><strong>Type:</strong> "low" | "medium" | "high" </li>
              <li><strong>Default:</strong> "medium"</li>
              <li><strong>Description:</strong> Specifies the `Priority` attribute of the cookie (low, medium, or high).</li>
              <li><strong>Example:</strong> <code>priority: 'high'</code></li>
          </ul>
          </details>

      <details>
          <summary><strong>4. signed</strong></summary>
          <ul>
              <li><strong>Type:</strong> boolean </li>
              <li><strong>Default:</strong> false</li>
              <li><strong>Description:</strong> Specifies whether the cookie is signed with the secret.</li>
              <li><strong>Example:</strong> <code>signed: true</code></li>
          </ul>
          </details>

      <details>
          <summary><strong>5. expires</strong></summary>
          <ul>
              <li><strong>Type:</strong> Date | null </li>
              <li><strong>Default:</strong> No expiration set (non-persistent cookie).</li>
              <li><strong>Description:</strong> Specifies the expiration date for the cookie.</li>
              <li><strong>Example:</strong> <code>expires: new Date(Date.now() + 3600000)</code></li>
          </ul>
          </details>

      <details>
          <summary><strong>6. httpOnly</strong></summary>
          <ul>
              <li><strong>Type:</strong> boolean </li>
              <li><strong>Default:</strong> true</li>
              <li><strong>Description:</strong> Specifies whether the cookie is HTTP-only, preventing access from client-side JavaScript.</li>
              <li><strong>Example:</strong> <code>httpOnly: false</code></li>
          </ul>
          </details>

      <details>
          <summary><strong>7. path</strong></summary>
          <ul>
              <li><strong>Type:</strong> string </li>
              <li><strong>Default:</strong> '/'</li>
              <li><strong>Description:</strong> Specifies the path for which the cookie is valid.</li>
              <li><strong>Example:</strong> <code>path: '/admin'</code></li>
          </ul>
          </details>

      <details>
          <summary><strong>8. domain</strong></summary>
          <ul>
              <li><strong>Type:</strong> string </li>
              <li><strong>Default:</strong> No domain set.</li>
              <li><strong>Description:</strong> Specifies the domain for which the cookie is valid.</li>
              <li><strong>Example:</strong> <code>domain: 'example.com'</code></li>
          </ul>
          </details>

      <details>
          <summary><strong>9. secure</strong></summary>
          <ul>
              <li><strong>Type:</strong> boolean | "auto" </li>
              <li><strong>Default:</strong> false</li>
              <li><strong>Description:</strong> Specifies whether the cookie is only sent over HTTPS.</li>
              <li><strong>Example:</strong> <code>secure: true</code></li>
          </ul>
          </details>

      <details>
          <summary><strong>10. encode</strong></summary>
          <ul>
              <li><strong>Type:</strong> (val: string) =&gt; string </li>
              <li><strong>Default:</strong> Default encoder for cookie values.</li>
              <li><strong>Description:</strong> Specifies a custom encoding function for the cookie value.</li>
              <li><strong>Example:</strong> <code>encode: encodeURIComponent</code></li>
          </ul>
          </details>

      <details>
          <summary><strong>11. sameSite</strong></summary>
          <ul>
              <li><strong>Type:</strong> boolean | "lax" | "strict" | "none" </li>
              <li><strong>Default:</strong> false</li>
              <li><strong>Description:</strong> Specifies the `SameSite` attribute for cross-site cookie control (strict, lax, or none).</li>
              <li><strong>Example:</strong> <code>sameSite: 'strict'</code></li>
          </ul>
          </details>
                    
      </li>
          <li><strong>Example:</strong> <code>cookie: { maxAge: 60000 }</code></li>
      </ul>
            

      </details>

      <details>
      <summary><strong>6. rolling</strong></summary>
      <ul>
          <li><strong>Type:</strong> boolean </li>
          <li><strong>Default:</strong> false</li>
          <li><strong>Description:</strong> Resets session expiration on every response.</li>
          <li><strong>Example:</strong> <code>rolling: true</code></li>
      </ul>
      </details>

      <details>
      <summary><strong>7. resave</strong></summary>
      <ul>
          <li><strong>Type:</strong> boolean </li>
          <li><strong>Default:</strong> true (deprecated)</li>
          <li><strong>Description:</strong> Forces session to be saved on every request, even if unmodified.</li>
          <li><strong>Example:</strong> <code>resave: false</code></li>
      </ul>
      </details>

      <details>
      <summary><strong>8. proxy</strong></summary>
      <ul>
          <li><strong>Type:</strong> boolean </li>
          <li><strong>Default:</strong> undefined</li>
          <li><strong>Description:</strong> Trust reverse proxy when setting secure cookies.</li>
          <li><strong>Example:</strong> <code>proxy: true</code></li>
      </ul>
      </details>

      <details>
      <summary><strong>9. saveUninitialized</strong></summary>
      <ul>
          <li><strong>Type:</strong> boolean </li>
          <li><strong>Default:</strong> true (deprecated)</li>
          <li><strong>Description:</strong> Saves uninitialized sessions. Useful for login sessions.</li>
          <li><strong>Example:</strong> <code>saveUninitialized: false</code></li>
      </ul>
      </details>

      <details>
      <summary><strong>10. unset</strong></summary>
      <ul>
          <li><strong>Type:</strong> "destroy" | "keep" </li>
          <li><strong>Default:</strong> 'keep'</li>
          <li><strong>Description:</strong> Controls behavior when session is deleted.</li>
          <li><strong>Example:</strong> <code>unset: 'destroy'</code></li>
      </ul>
      </details>

      </details>
          </li>
        </ul>
      </li>
      <li>Complete structure for authentication:
        <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">session</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express-session</span><span class="dl">"</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">passport</span><span class="dl">"</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>

  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">session</span><span class="p">({</span> <span class="c1">//to be called on top</span>
      <span class="na">secret</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">SESSION_SECRET</span><span class="p">,</span>
  <span class="p">}))</span>

  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span> <span class="c1">//can be called anywhere</span>
      <span class="nx">passport</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="dl">'</span><span class="s1">jwt</span><span class="dl">'</span><span class="p">)(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span>
  <span class="p">})</span>

  <span class="nx">passport</span><span class="p">.</span><span class="nx">serializeUser</span><span class="p">(()</span><span class="o">=&gt;</span><span class="p">{</span>

  <span class="p">})</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

<h2 id="sending-jwt-from-client-to-server">Sending jwt from client to server</h2>
<ol>
  <li>
    <details>
 <summary>
 Using Authorisation header (most common)
 </summary>

 - <details>
     <summary>
     Bearer Token: The most common and standard method for JWTs.
     </summary>

     ```js
     // Client-side (e.g., using Axios in JavaScript)
     axios.get('/protected-resource', {
         headers: {
             'Authorization': `Bearer ${token}`
         }
     });

     // Server-side (Express with Passport)
     const opts = {
         jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), // Extract JWT from Bearer Token
         secretOrKey: SECRET_KEY,
     }
     ```
     <details>

 - <details>
     <summary>
     Custom Scheme: Allows custom authentication schemes as needed.
     </summary>

     ```js
     // Client-side (e.g., using Axios in JavaScript)
     axios.get('/protected-resource', {
          headers: {
             'Authorization': `Bearer ${token}`
         }
     });

     // Server-side (Express)
     const customSchemeExtractor = (req) =&gt; {
         const authHeader = req.headers['authorization'];
         if (authHeader &amp;&amp; authHeader.startsWith('customScheme ')) {
             return authHeader.split(' ')[1];
         }
         return null;
     };
       
    const opts = {
         jwtFromRequest: customSchemeExtractor, // Use custom extractor
         secretOrKey: SECRET_KEY,
     }
     ```
     <details>

 - <details>
     <summary>
     Digest Authentication: Less common for JWTs, used in specific scenarios.
     </summary>

     ```js
     // Client-side (e.g., using Axios in JavaScript)
     axios.get('/protected-resource', {
          headers: {
             'Authorization': `Digest ${token}`
         }
     });

     // Server-side (Express)
     const digestExtractor = (req) =&gt; {
         const authHeader = req.headers['authorization'];
         if (authHeader &amp;&amp; authHeader.startsWith('Digest ')) {
             return authHeader.split(' ')[1];
         }
         return null;
     };
       
    const opts = {
         jwtFromRequest: digestExtractor, // Use custom extractor
         secretOrKey: SECRET_KEY,
     }
     ```
     <details>

 - <details>
     <summary>
     Basic Authentication: Typically used for credentials, not recommended for JWTs.
     </summary>

     ```js
     // (Not Recommended for JWTs)
     // Client-side (e.g., using Axios in JavaScript)
     axios.get('/protected-resource', {
          headers: {
             'Authorization': `Basic ${token}`
         }
     });

     // Server-side (Express)
     const basicExtractor = (req) =&gt; {
         const authHeader = req.headers['authorization'];
         if (authHeader &amp;&amp; authHeader.startsWith('Basic ')) {
             return authHeader.split(' ')[1];
         }
         return null;
     };
       
    const opts = {
         jwtFromRequest: basicExtractor, // Use custom extractor
         secretOrKey: SECRET_KEY,
     }
     ```
     <details>
 </details>

</details></details></details></details></details></details></details></details>
  </li>
  <li>
    <details>
 <summary>
 Using cookies
 </summary>

 - For client side:
     - We dont have to do anything. just run both server an dclient on same url (eg: http://localhost:3000), client using build file and server direclty running using node index.
     - when both run on same server:
         - cookies sent to client from sever will be stored as Set-Cookies in header and 
         - server itself will read it back when any req is sent from client to server
     ```js
     //client side 
     axios.get('/protected-resource')

     // server side
     const cookieParser = require('cookie-parser')
     const express = require('express');

     const app = express()
     app.use(cookieParser())

     //custom extractor
     var cookieExtractor = function (req) {
     var token = null;
     if (req &amp;&amp; req.cookies) {
         token = req.cookies["jwt"];
     }
     return token;
     };

     const opts = {
         jwtFromRequest: cookieExtractor,
         secretOrKey: 'your_secret_key'
     };
     ```
 </details>
  </li>
  <li>
    <details>
 <summary>
 Using URL Query Parameters
 </summary>

 ```js
 // Client-side (e.g., using Axios)
 axios.get('/protected-resource?token=' + token)   

 // Custom extractor function for query parameters
 const queryParamExtractor = (req) =&gt; {
     return req.query.token; // Extract JWT from query parameter 'token'
 };   

 const opts = { 
     jwtFromRequest: queryParamExtractor, // Use custom extractor
     secretOrKey: SECRET_KEY,
 }
 ```  
 </details>
  </li>
  <li>
    <details>
 <summary>
 Using Custom Headers
 </summary>

 ```js
 // Client-side (e.g., using Axios)
 axios.get('/protected-resource', {
     headers: {
         'X-Custom-Header': token // Replace 'X-Custom-Header' with your custom header name
     }
 });

 // Custom extractor function for custom headers
 const customHeaderExtractor = (req) =&gt; {
     return req.headers['x-custom-header']; // Replace 'x-custom-header' with your custom header name
 };

 const opts = {
     jwtFromRequest: customHeaderExtractor, // Use custom extractor
     secretOrKey: SECRET_KEY,
 }
 ```
 </details>
  </li>
</ol>]]></content><author><name>Anusree Anilkumar</name></author><summary type="html"><![CDATA[Documentation for passport JWT as I understand it. Passport-jwt Documentaion Table of Contents Overview Features and Usage Installation and Import Configuration Basic Code Structure Parts of Code in detail Imports passport.use(name[optional], strategy) new Startegy(options, verifyCallback) Full Code Structure (seperated into modules) Authentication With session support (w/o callback) Without session support (w/ callback) Methods to pass JWT Token Overview A middleware for Express.js framework that provides authentication and authorization using JSON Web Tokens (JWT). A passport strategy to work with JWT This only handles what we can do with a JWT token created using passport. To create a token checkout Passport Features and Usage Installation and Import Install: npm install passport-jwt Import: const { Strategy, ExtractJwt } = require("passport-jwt"); passport-jwt is a class with 2 properties - Strategy and ExtractJwt Strategy is a class with 2 parameters passed to its contructor ExtractJwt is an object with various sub properties Configuration Basic Structure: const JwtStrategy = require("passport-jwt").Strategy; const ExtractJwt = require("passport-jwt").ExtractJwt; const passport = require("passport"); // Options for the strategy const opts = { jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), // Extract token from Authorization header secretOrKey: "your_jwt_secret_key", // Secret key for verifying token }; // JWT Strategy passport.use( new JwtStrategy(opts, (jwtPayload, done) =&gt; { // Find the user based on the jwtPayload.sub (subject) User.findOne({ id: jwtPayload.sub }, (err, user) =&gt; { if (err) { return done(err, false); } if (user) { return done(null, user); } else { return done(null, false); // User not found } }); }) ); Parts of the configuration: Imports: const {Strategy,ExtractJwt} = require("passport-jwt") const passport = require("passport"); passport.use() method to register strategy (2 ways): passport.use(Strategy) - Default Strategy - Registers a strategy directly. - Will be treated as the default strategy. - Allows you to refer to the strategy by the name _jwt_ later in the *passport* method `passport.authenticate('jwt')`. passport.use(name, Strategy) - Named Strategy [optional] - Allows you to refer to the strategy by the name _jwt_ later in the *passport* method `passport.authenticate('name')`. Strategy (has 2 parameters): Has two parameters: opts and verify Parameters: `opts` - (object) Options - This parameter is an object that defines various options for the strategy. - Example: ```js const opts = { jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), secretOrKey: "your_jwt_secret_key", issuer: "your_issuer", // optional algorithms: ["HS256"], // optional ignoreExpiration: false, // optional, defaults to false }; ``` - Properties: 1. jwtFromRequest - (function) To specify method of Jwt extraction - Specifies how the JWT will be extracted from the incoming request from client using _ExtractJwt_ class. - Example ```javascript const opts = { jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(); } ``` - All options (Properties of ExtractJwt): 1. ExtractJwt.fromAuthHeaderAsBearerToken() - **Usage**: Extracts the JWT from the Authorization header, assuming the JWT is prefixed by the word Bearer. - **Input parameter**: none - **Example**: ```js jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(); ``` 2. ExtractJwt.fromHeader(header_name) - **Usage**: Extracts the JWT from a custom header in the request. - **Input parameter**: header_name (string) - The name of the custom header containing the JWT. - **Example**: ```js jwtFromRequest: ExtractJwt.fromHeader('auth_token') ``` 3. ExtractJwt.fromBodyField(field_name) - **Usage**: Extracts the JWT from a specific field in the request body (typically used in form submissions or JSON payloads). - **Input parameter**: field_name (string) - The name of the field in the request body that contains the JWT. - **Example**: ```js jwtFromRequest: ExtractJwt.fromBodyField('token') ``` 4. ExtractJwt.fromUrlQueryParameter(param_name) - **Usage**: Extracts the JWT from a URL query parameter. - **Input parameter**: param_name (string) - The name of the query parameter in the URL that contains the JWT. - **Example**: ```js jwtFromRequest: ExtractJwt.fromUrlQueryParameter('token') ``` 5. fromAuthHeaderWithScheme(auth_scheme) - **Usage**: Extracts the JWT from Authorization Header with the specified auth_scheme - **Input parameter**: (string) Auth scheme like Bearer, Token, etc - **Example**: ```js jwtFromRequest: ExtractJwt.ExtractJwt.fromAuthHeaderWithScheme('Token') ``` 6. fromExtractors([array of extractor functions]) - **Usage**: Lets us define multiple extractors to extract jwt from different sources one after other. - **Input parameter**: (array) Array of extractors - **Example**: ```js const extractors = [ ExtractJwt.fromAuthHeaderAsBearerToken(), // Try the Bearer token from Authorization header ExtractJwt.fromUrlQueryParameter('auth_token') // Then try the token from the URL query parameter ]; const opts = { jwtFromRequest: ExtractJwt.fromExtractors(extractors), secretOrKey: 'your_secret_key' }; ``` 7. Custom Extractors - **Usage**: Lets us define custom extractoinof tokens from anywhere - **Example**: ```js //when extracting from cookies using cookie parser var cookieParser = require('cookie-parser') const express = require('express'); const app = express() app.use(cookieParser()) //custom extractor var cookieExtractor = function (req) { var token = null; if (req &amp;&amp; req.cookies) { token = req.cookies["jwt"]; } return token; }; const opts = { jwtFromRequest: cookieExtractor, secretOrKey: 'your_secret_key' }; ``` 2. secretOrKey - (string or buffer) Secret key to verify JWT - The key used to verify the JWT signature. This is essential for validating the authenticity of the token. - **For symmetric algorithms** (e.g., HS256, HS384, HS512), `secretOrKey` will be a shared secret string or buffer used by both the server that signs the JWT and the server that verifies it. - **For asymmetric algorithms** (e.g., RS256, RS384, RS512), `secretOrKey` will be a public key that verifies the JWT, while the corresponding private key is used to sign the JWT. - Examples: - Symmetric key: ```js const opts = { secretOrKey: 'your_jwt_secret_key' //can be any random word }; ``` - Asymmetric key: ```js const opts = { secretOrKey: fs.readFileSync('./path/to/public.key', 'utf8') }; ``` - Note: - If using symmetric encryption (e.g., HS256), the same secretOrKey must be used for both signing and verifying the token. - If using asymmetric encryption (e.g., RS256), the secretOrKey should be the public key, while the private key is used to sign the token. - It is important to securely manage this key, as exposure could compromise the security of your system. 3. secretOrKeyProvider - (function) [optional] Function to get secretOrKey from anywhere - This function dynamically provides the secret or public key for verifying the JWT. It is useful in cases where the key needs to be determined based on the request, such as in multi-tenant applications or when using different keys for different users. - Do not use both `secretOrKey` and `secretOrKeyProvider`. Use either of them - Parameters: - `request`: The original HTTP request object. - `rawJwtToken`: The raw JWT token extractedfrom the request. - `done`: A function to return the key, with the parameters: - `err` - `secretOrKey` (string or buffer) - Example: ```js const opts = { secretOrKeyProvider: (request, rawJwtToken, done) =&gt; { // Logic to determine the secret or key dynamically const secretOrKey = getSecretForTenant(request); // Example function to get the secret key based on tenant done(null, secretOrKey); // Pass the key to the callback function } }; ``` - Note: 1. If secretOrKeyProvider is provided, it overrides the static secretOrKey option 2. Useful in scenarios where the key might change per request or per user, such as: - Multi-tenant applications where each tenant has a different key. - Using different keys for different users or services. 3. If the key cannot be determined (e.g., a database lookup fails), call done(err) to signal an error. 4. When using asymmetric encryption (e.g., RS256), the secretOrKeyProvider would return the public key for verification. - Example for multi-tenant application: ```js const opts = { secretOrKeyProvider: (request, rawJwtToken, done) =&gt; { // Get the tenant's key based on some property of the request (e.g., subdomain or user ID) const tenantKey = getTenantKeyFromDb(request.tenantId); // Example function to retrieve tenant's key done(null, tenantKey); } }; ``` - Use Case: - Multi-tenant systems where different tenants have different signing keys. - Dynamic environments where the key cannot be determined statically and must be retrieved or computed based on the incoming request. 4. issuer - (string or array) [optional] Verifies the issuer (iss) claim of the token. - Examples: ```js const opts = { issuer: 'https://accounts.google.com' }; ``` ```js const opts = { issuer: [ 'https://accounts.google.com', 'https://your-tenant-name.auth0.com/', 'https://dev-123456.okta.com' ] }; ``` - Use Cases: - **Single Issuer Application**: If all tokens are issued by your application, you would set the issuer option to your app's identifier. - **Third-Party Tokens**: If you're working with tokens issued by third parties (e.g., OAuth providers or external identity systems), you would set issuer to the known trusted issuer. 5. algorithms - (array) [optional] List of allowed algorithms for token verification, e.g., ['HS256', 'RS256']. - **Purpose**: This option helps enforce which algorithms are accepted for signing JWTs, improving security by rejecting tokens signed with algorithms that are not trusted or expected. - **Default Behavior**: If the algorithms option is not provided, the strategy will allow any algorithm, - Examples: ```js const opts = {, algorithms: ['HS256', 'RS256', 'ES256'] // Accepts JWTs signed with HS256, RS256, or ES256 algorithms }; ``` ```js const opts = {, algorithms: ['HS256'] }; ``` 6. audience - (string or array) [optional] To specify the recipients of Jwt - **Purpose**: To specify the recipients of Jwt. Will be verifiesd against the recipients mentioned in *aud* coming through *jwt_payload*. - Examples: ```js const opts = {, "aud": "user-service", }; ``` ```js const opts = {, "aud": ["user-service", "billing-service", "yoursite.net"] }; ``` 7. ignoreExpiration - (boolean) [optional] Whether to ignore the token's expiration time during verification. - **Purpose**: - When you want to accept tokens even if they have expired. - Useful in testing environments where you might not want to deal with token expiration. - The `exp` claim in a JWT specifies the expiration time of the token. Expiry is not set by passport-jwt. - **Default Behavior**: By default, ignoreExpiration is false, meaning that Passport-JWT will check the exp claim to ensure the token is not expired. - Examples: ```js const opts = { ignoreExpiration: true // Accepts expired tokens }; ``` ```js const opts = { ignoreExpiration: false // Enforces expiration check }; ``` 8. passReqToCallback - (boolean) [optional] Whether to pass the request object to the verification callback. - The `passReqToCallback` option specifies whether the request object should be passed to the `verify` callback function in the `JwtStrategy`. - Useful if you need access to the `req` object for additional logic inside verify callback. - Example: ```js const opts = { passReqToCallback: true // Passes the request object to the verify callback }; ``` ```js passport.use(new JwtStrategy(opts, (req, jwtPayload, done) =&gt; { //now you can add req as parameter // Access request object console.log(req.headers); // Example of accessing headers User.findById(jwtPayload.sub, (err, user) =&gt; { if (err) return done(err, false); if (user) return done(null, user); return done(null, false); }); })); ``` 9. jsonWebTokenOptions - (object) [optional + deprecated] To pass options to customise token verification - **Purpose**: To pass options directly to the underlying jsonwebtoken.verify() and customise token verification. - **Deprecated**: Though deprecated, still allows you to pass audience / issuer / algorithms / ignoreExpiration on the options - **Properties**: - algorithms: (array) Specifies allowed signing algorithms. - Specifies which algorithms are allowed for verifying the JWT. - eg: `algorithms: ['HS256']` - audience: (string | RegExp | array) Specifies the expected audience of the JWT. - Specifies the expected audience of the JWT (who the token is intended for). It can be a string, regex, or array of strings/regexes. - eg: `audience: 'your-app-client-id'` - clockTimestamp: (integer) Sets a fixed time for token validation. - The time in seconds since the epoch to use as the current time when verifying the JWT. ```js clockTimestamp: Math.floor(Date.now() / 1000) // current time in seconds ``` - clockTolerance: (integer) Helps with clock skew issues. - Specifies the allowed clock skew (in seconds) when verifying the exp and nbf claims (useful when different servers have slightly unsynchronized clocks). - eg: `clockTolerance: 5` - complete: (boolean) Returns `{ payload, header, signature }` if true. - If true, returns an object with the decoded { payload, header, signature } instead of just the payload. - eg: `complete: true` - issuer: (string | array) Specifies the expected issuer of the JWT. - Specifies the expected issuer of the JWT (the entity that issued the token). Can be a string or an array of strings. - eg: `issuer: 'auth.your-app.com'` - ignoreExpiration: (boolean) Ignores the `exp` claim if true. - If true, ignores the exp claim during verification (useful in development, but not recommended in production). - eg: `ignoreExpiration: true` - ignoreNotBefore: (boolean) Ignores the `nbf` claim if true. - If true, ignores the nbf (Not Before) claim when verifying the token. - eg: `ignoreNotBefore: true` - jwtid: (string) Validates the token ID (jti) claim. - The jti (JWT ID) claim specifies a unique identifier for the token to prevent replay attacks. - eg: `jwtid: 'unique-jwt-id-12345'` - nonce: (string) Checks the `nonce` claim (used in OpenID Connect). - Used to check the nonce claim in OpenID Connect to prevent replay attacks. The nonce is a string used to associate a client session with an ID token. - eg: `nonce: 'nonce-value-generated-at-auth-time'` - subject: (string) Specifies the expected `sub` (Subject) claim. - Specifies the expected sub (Subject) claim of the JWT, which typically identifies the principal (user) of the token. - eg: `subject: 'user-id-12345'` - maxAge: (string | number) Limits how old a token can be. - Specifies the maximum allowable age (in seconds or a time string) for the JWT since its iat (Issued At) claim. Used to reject old tokens. - eg: `maxAge: '24h'` - allowInvalidAsymmetricKeyTypes: (boolean) Allows invalid asymmetric key types if true. - When set to true, allows invalid asymmetric key types during verification (not recommended unless necessary). - eg: `allowInvalidAsymmetricKeyTypes: true` - Examples: ```js const opts = { jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), secretOrKey: 'your_secret_key', jsonWebTokenOptions: { clockTolerance: 5, // Allow 5 seconds of clock skew maxAge: '1d', // Only accept tokens no more than 1 day old algorithms: ['HS256'], // Only accept tokens signed with HS256 ignoreNotBefore: true, // Will ignore token's Not before dates ignoreExpiration: false // Will validate the 'expiration' claim } }; passport.use(new JwtStrategy(opts, (jwtPayload, done) =&gt; { User.findById(jwtPayload.sub, (err, user) =&gt; { if (err) return done(err, false); if (user) return done(null, user); return done(null, false); }); })); ``` `verify` - (function) Verify Callback - **Purpose**: Callback used in the `JwtStrategy` to validate the JWT and determine if it should be accepted. - **Parameters**: - payload - (object) Payload for verify callback - **Purpose**: It is the decoded JWT payload, which contains the claims from the token (e.g., user ID, roles). - It is an object that contains the claims from the decoded JWT. We can only access these claim values and set it. It is set using *jwt.sign()* using [*jsonwebtoken*](http://jwtdocumentation) module. - **Properties** **(Claims)**: 1. `sub`: The **subject** of the token, usually the user ID. This is a standard claim and is often used to identify the user. 2. `exp`: The **expiration** time of the token, specified as a Unix timestamp. This is a standard claim used to determine if the token has expired. 3. `iat`: The **issued-at** time, specified as a Unix timestamp. This indicates when the token was issued. 4. `iss`: The **issuer** of the token, which is a standard claim indicating who issued the token. 5. `aud`: The **audience** for which the token is intended. This is a standard claim indicating the recipient(s) of the token. 6. `nbf`: **Not Before** - The time before which the token should not be considered valid. 7. `jti`: **JWT ID** - A unique identifier for the token, which can be used to prevent replay attacks. &gt; **Note** : we can also have any custom claims. eg: roles, name. - Example: ```js //setting claims in some other file const jwt = require('jsonwebtoken') fucntion signIn(req, res){ const payload = { sub: user._id, roles: user.roles, exp: Math.floor(Date.now() / 1000) + (60 * 60) //etc } const token = jwt.sign(payload, 'your_jwt_secret_key') res.send({token}) } //accessing those claims passport.use(new JwtStrategy(opts, (jwtPayload, done) =&gt; { console.log('User ID:', jwtPayload.sub); console.log('Token Expiry Time:', jwtPayload.exp); console.log('User Roles:', jwtPayload.roles); User.findById(jwtPayload.sub, (err, user) =&gt; { if (err) return done(err, false); if (user) return done(null, user); return done(null, false); }); })); ``` - done - (fucntion) To indicate the result of the verification. - **Purpose**: To indicate the result of the verification. - **Parameters**: - `err`: Error during verification if any - `user`: Any sort of data that comes out after the logic inside verify callback - `info`: [optional] Any message regarding error or user - Example: ```js //without info passport.use(new JwtStrategy(opts, (jwtPayload, done) =&gt; { User.findById(jwtPayload.sub, (err, user) =&gt; { if (err) return done(err, false); if (user) return done(null, user); // Verification successful return done(null, false); // No user found, but no error }); })); ``` ```js //with info passport.use(new JwtStrategy(opts, (jwtPayload, done) =&gt; { User.findById(jwtPayload.sub, (err, user) =&gt; { if (err) return done(err, false); if (!user) return done(null, false, { message: 'User not found' }); }); })); ``` - req [conditional] - Only when inside opts, passReqToCallback is true ```js const opts = {passReqToCallback: true} const verify = (req, payload, done)=&gt;{ // handle payload data } ``` - Example: ```js const verify = (jwtPayload, done) =&gt; { // jwtPayload contains the decoded JWT payload User.findById(jwtPayload.sub, (err, user) =&gt; { if (err) return done(err, false); // Error during user lookup if (user) return done(null, user); // User found, authentication successful return done(null, false); // User not found, authentication failed }); } passport.use(new JwtStrategy(opts, verify)); ``` Example: const JwtStrategy = new Startegy(opts, verify) passport.use(JwtStrategy); Strategy is of 2 tyes: With req - paasing opts with true for passReqToCallback enables us to use `req` in verify callbak ```js const opts = { passReqToCallback:true } const verify = (req, payload, done)=&gt;{ } ``` Without req ```js opts = { passReqToCallback:false } ``` Full Structure (for deafult strategy): Default Strategy: const { Strategy, ExtractJwt } = require("passport-jwt"); const passport = require("passport"); //to use for passport.use() // Options for the strategy const opts = { jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), secretOrKey: "your_jwt_secret_key", //etc }; //verify callback for strategy const verify = (jwtPayload, done) =&gt; { User.findOne({ id: jwtPayload.sub }, (err, user) =&gt; { if (err) { return done(err, false); } if (user) { return done(null, user); } else { return done(null, false); // User not found } }); }; //new jwt-Strategy const JwtStrategy = new Strategy(opts, verify) //using new jwt-strategy in passport passport.use(JwtStrategy); //authenticating default jwt-strategy passport.authenticate('jwt') Named Strategy: const { Strategy, ExtractJwt } = require("passport-jwt"); const passport = require("passport"); const opts = { jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), secretOrKey: "your_jwt_secret_key", //etc }; const verify = (jwtPayload, done) =&gt; { User.findOne({ id: jwtPayload.sub }, (err, user) =&gt; { if (err) { return done(err, false); } if (user) { return done(null, user); } else { return done(null, false); } }); }; const JwtStrategy = new Strategy(opts, verify) //using named jwt-strategy in passport passport.use('my-jwt', JwtStrategy); //authenticating named jwt-strategy passport.authenticate('my-jwt') Authenticating jwt after strategy configuration Ways: As of understood till date, passport jwt can be authenticated in 2ways: With session support (without callback) Without session support (with callback) With session support (without callback), one would need to many extar methods like passport.serializeUser, session(), etc. We would not have to specifically set req.user to user. Passport would do it internally for us. Without session support (with callback), we dont need any extra methods. But we would need to set req.user to user explicitly by us. Without session support (with callback) in the internal code, if passport.authenticate gets a callback, it doesnt call any other internal function. It just returns that callback with user and err, to handle by ourself. ```js // Options for JWT strategy, including extractor function and secret key const optsJwt = { jwtFromRequest: cookieExtractor, secretOrKey: constant.secretKey } // Function to verify JWT token and retrieve user information const verifyJwt = async function (jwt_payload, done) { if (!jwt_payload.id) return done(null, false); try { let user = await User.findOne({ _id: jwt_payload.id }); if (user) return done(null, santizeUser(user)); else return done(null, false); } catch (error) { return done(err, false); } } // Options for Local strategy, specifying the field for username const optsLocal = { usernameField: “email” } // Function to verify local credentials and handle authentication const verifyLocal = async function (email, password, done) { try { const user = await User.findOne({ email: email }).exec(); if (!user) { return done(null, false, { message: "No such user email" }); } crytpoJwt(user, password, done) } catch (error) { return done(error); } } // Initialize Passport with JWT strategy passport.use(“jwt”,new JwtStrategy(optsJwt, verifyJwt);); // Middleware to authenticate requests using JWT strategy app.use((req, res, next) =&gt; { passport.authenticate(“jwt”, (err, user, info) =&gt; { if (err || !user) return next(new ApiError(httpStatus.UNAUTHORIZED, “Please authenticate”)) req.user = user; next() })(req, res, next) }) ``` With session support (without callback) When with callback, internalluy, passport passes many checks and process including needing a session needing to use passport.serializeUser atleast once with a callback containing user.id/user In the latest version, for authenticating using passport-jwt configured strategy, we need to use 2 extra methods from passport package and 1 method from express-session package: passport.authenticate() from passport - `passport.authenticate()` is a passport middleware. It has been [customised internally](https://github.com/mikenicholson/passport-jwt/blob/master/lib/strategy.js#L90) to authenticate jwt via passport-jwt package. - 3 paramters: - strategy: (string|array) - options - callback [optional] - It is wrapped inside a wrapper as an express middleware to access req, res and next. Without the wrapper it won't pass on to the next function. ```js app.use((req, res, next)=&gt;{ passport.authenticate('jwt')(req, res, next) }) ``` - In older versions it would itself be placed as a middleware, but not anymore ```js app.use(passport.authenticate('jwt')) ``` - Parameters: - strategy: (string or array) - **Purpose**: To point to the strategies named during configuration. - **Example**: jwt, my-jwt, [jwt, my-jwt], etc - options: (object) [optional] - **Purpose**: Options to control the behavior of the authentication middleware. - It controls the behaviour at individual route/request level in comparison to opts options which controls behaviour at global/strategy level. - If there are conflicting options between opts and authenticateOptions, then authenticateOptions will override for that particular route. - **Properties**: 1. authInfo Description: Whether to include additional authentication information. Default: undefined (additional info is not included). Example: passport.authenticate('strategy', { authInfo: true }); 2. assignProperty Description: Assigns the object provided by the verify callback to the specified property on the req object. Default: undefined (the object is assigned to req.user). Example: passport.authenticate('strategy', { assignProperty: 'userAccount' }); 3. failureFlash Description: True to flash failure messages or a string to use as a flash message for failures. Default: undefined (failure messages are not flashed). Example: passport.authenticate('strategy', { failureFlash: 'Login failed' }); 4. failureMessage Description: True to store failure message in req.session.messages, or a string to use as an override message for failure. Default: undefined (failure messages are not stored). Example: passport.authenticate('strategy', { failureMessage: 'Login unsuccessful' }); 5. failureRedirect Description: URL to redirect to after a failed login attempt. Default: undefined (no redirect occurs). Example: passport.authenticate('strategy', { failureRedirect: '/login' }); 6. failWithError Description: Whether to fail with an error. Default: undefined (does not fail with error). Example: passport.authenticate('strategy', { failWithError: true }); 7. keepSessionInfo Description: Whether to keep session information. Default: undefined (session info is not specifically retained). Example: passport.authenticate('strategy', { keepSessionInfo: true }); 8. session Description: Save login state in session. Default: true (session is used by default). Example: passport.authenticate('strategy', { session: false }); 9. scope Description: Scope of access required. Default: undefined (no scope is specified). Example: passport.authenticate('strategy', { scope: ['read', 'write'] }); 10. successFlash Description: True to flash success messages or a string to use as a flash message for success. Default: undefined (success messages are not flashed). Example: passport.authenticate('strategy', { successFlash: 'Login successful' }); 11. successMessage Description: True to store success message in req.session.messages, or a string to use as an override message for success. Default: undefined (success messages are not stored). Example: passport.authenticate('strategy', { successMessage: 'Welcome back!' }); 12. successRedirect Description: URL to redirect to after a successful login. Default: undefined (no redirect occurs). Example: passport.authenticate('strategy', { successRedirect: '/dashboard' }); 13. successReturnToOrRedirect Description: URL to redirect to or return to after a successful login. Default: undefined (no redirect or return occurs). Example: passport.authenticate('strategy', { successReturnToOrRedirect: '/profile' }); 14. state Description: State parameter for the request. Default: undefined (no state is set). Example: passport.authenticate('strategy', { state: 'xyz' }); 15. pauseStream Description: Pause the request stream before deserializing the user object from the session. Default: false (stream is not paused). Example: passport.authenticate('strategy', { pauseStream: true }); 16. userProperty Description: Property on req that will be set to the authenticated user object. Default: 'user' (authenticated user is set to req.user). Example: passport.authenticate('strategy', { userProperty: 'currentUser' }); 17. passReqToCallback Description: Whether to pass the request object to the callback. Default: undefined (request object is not passed to the callback). Overrides: Overrides passReqToCallback set in opts of strategy configuration Example: passport.authenticate('strategy', { passReqToCallback: true }); 18. prompt Description: Prompt parameter for the request. Default: undefined (no prompt is set). Example: passport.authenticate('strategy', { prompt: 'login' }); - callback: (function) [optional] - **Purpose**: Handles the result of the authentication process and provides feedback or further actions based on the outcome. - **Parameters**: 1. err: (Error or null) - **Description**: Contains any error that occurred during the authentication process. - **Type**: err | false - **Example**: An error object if something went wrong, otherwise `null`. 2. user: (object | string | Array) - **Description**: The authenticated user object if authentication was successful, or `false` if no user was authenticated. - **Type**: User | false | null - **Example**: The user data retrieved from the database if authentication is successful. 3. info: (Object or false) - **Description**: Contains additional information or error messages about the authentication process. This can include details about why authentication failed. - **Type**: object | string | Array - **Example**: An object with a `message` property if authentication fails, or `false` if no additional information is available. 4. status: (number | Array) - **Description**: The HTTP status code representing the result of the authentication attempt. - **Type**: number | Array (HTTP status code) - **Example**: `401` for unauthorized access, `200` for successful authentication. - Examples: ```js //default strategy without optional parameters app.post("/profile", (req, res, next) =&gt; { passport.authenticate("jwt")(req, res, next) }); ``` more examples ```js //custom strategy without optional parameters app.post("/profile", (req, res, next) =&gt; { passport.authenticate("my-jwt")(req, res, next) }); ``` ```js //default strategy with optional parameters app.post("/profile", (req, res, next) =&gt; { passport.authenticate("jwt", { session: false }, function(err, user, info, status) { if (err) { return res .status(500) .json({ message: 'An error occurred', error: err }); } if (!user) { return res .status(401) .json({ message: 'Unauthorized', info: info }); } //in case of callback we need to set req.user=user req.user=user res.send(status).json(user.profile); })(req, res, next) }); ``` passport.serializeUser() from passport - We need passport.serializeUser() during the process of logIn which happens inside passport.authenticate() - Input parameter: callback function - input parameters of cb fn: user, done - `user`: The user object returned from the authentication process. - done: A callback function that you call after serializing the user, which takes two parameters: err, id - `err`: Any error that occurred during serialization. - `id`: The user ID or any unique identifier that will be stored in the session. ```js passport.serializeUser((user, done)=&gt;{ done(err, id) }); ``` ```js passport.serializeUser((user, done)=&gt;{}); ``` ```js passport.serializeUser(callback); ``` ```js // structure of serialiseUser passport.serializeUser((user, done) =&gt; { done(null, user.id); }); //err can be null or err //user can be false, user, user.id, or anything related to user ``` session() from express-session - session() is also necssary to logIn using passport.authenticate() - Parameter: `sessionOptions` (object) - So structure is `session(sessionOptions) - ```js //structure of session const express = require("express"); const session = require("express-session"); const app = express() app.use(session({ secret: process.env.SESSION_SECRET, resave: false, saveUninitialized: false, })) ``` - Session option keys: 1. secret Type: string | array Default: N/A Description: String(s) used to sign the session ID cookie. Example: secret: 'mySecret' 2. genid(req) Type: function [(req: express.Request) =&gt; string] Default: Uses uid-safe library to generate a unique session ID. Description: Function to generate session IDs. Example: genid: () =&gt; 'customID' 3. name Type: string Default: 'connect.sid' Description: Name of the session ID cookie. Example: name: 'session_id' 4. store Type: Store Default: MemoryStore (in-memory session store) Description: Specifies session store instance. Example: store: new RedisStore() 5. cookie Type: object Default: N/A Description: Options for the session cookie (e.g., maxAge, secure). CookieOptions: 1. maxAge Type: number Default: N/A Description: Specifies the maximum age of the cookie in milliseconds. Example: maxAge: 3600000 (1 hour) 2. partitioned Type: boolean Default: false Description: Specifies the `Partitioned` attribute for the cookie. Not fully standardized yet. Example: partitioned: true 3. priority Type: "low" | "medium" | "high" Default: "medium" Description: Specifies the `Priority` attribute of the cookie (low, medium, or high). Example: priority: 'high' 4. signed Type: boolean Default: false Description: Specifies whether the cookie is signed with the secret. Example: signed: true 5. expires Type: Date | null Default: No expiration set (non-persistent cookie). Description: Specifies the expiration date for the cookie. Example: expires: new Date(Date.now() + 3600000) 6. httpOnly Type: boolean Default: true Description: Specifies whether the cookie is HTTP-only, preventing access from client-side JavaScript. Example: httpOnly: false 7. path Type: string Default: '/' Description: Specifies the path for which the cookie is valid. Example: path: '/admin' 8. domain Type: string Default: No domain set. Description: Specifies the domain for which the cookie is valid. Example: domain: 'example.com' 9. secure Type: boolean | "auto" Default: false Description: Specifies whether the cookie is only sent over HTTPS. Example: secure: true 10. encode Type: (val: string) =&gt; string Default: Default encoder for cookie values. Description: Specifies a custom encoding function for the cookie value. Example: encode: encodeURIComponent 11. sameSite Type: boolean | "lax" | "strict" | "none" Default: false Description: Specifies the `SameSite` attribute for cross-site cookie control (strict, lax, or none). Example: sameSite: 'strict' Example: cookie: { maxAge: 60000 } 6. rolling Type: boolean Default: false Description: Resets session expiration on every response. Example: rolling: true 7. resave Type: boolean Default: true (deprecated) Description: Forces session to be saved on every request, even if unmodified. Example: resave: false 8. proxy Type: boolean Default: undefined Description: Trust reverse proxy when setting secure cookies. Example: proxy: true 9. saveUninitialized Type: boolean Default: true (deprecated) Description: Saves uninitialized sessions. Useful for login sessions. Example: saveUninitialized: false 10. unset Type: "destroy" | "keep" Default: 'keep' Description: Controls behavior when session is deleted. Example: unset: 'destroy' Complete structure for authentication: const express = require('express'); const session = require("express-session"); const passport = require("passport"); const app = express() app.use(session({ //to be called on top secret: process.env.SESSION_SECRET, })) app.use((req, res, next)=&gt;{ //can be called anywhere passport.authenticate('jwt')(req, res, next) }) passport.serializeUser(()=&gt;{ }) Sending jwt from client to server Using Authorisation header (most common) - Bearer Token: The most common and standard method for JWTs. ```js // Client-side (e.g., using Axios in JavaScript) axios.get('/protected-resource', { headers: { 'Authorization': `Bearer ${token}` } }); // Server-side (Express with Passport) const opts = { jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), // Extract JWT from Bearer Token secretOrKey: SECRET_KEY, } ``` - Custom Scheme: Allows custom authentication schemes as needed. ```js // Client-side (e.g., using Axios in JavaScript) axios.get('/protected-resource', { headers: { 'Authorization': `Bearer ${token}` } }); // Server-side (Express) const customSchemeExtractor = (req) =&gt; { const authHeader = req.headers['authorization']; if (authHeader &amp;&amp; authHeader.startsWith('customScheme ')) { return authHeader.split(' ')[1]; } return null; }; const opts = { jwtFromRequest: customSchemeExtractor, // Use custom extractor secretOrKey: SECRET_KEY, } ``` - Digest Authentication: Less common for JWTs, used in specific scenarios. ```js // Client-side (e.g., using Axios in JavaScript) axios.get('/protected-resource', { headers: { 'Authorization': `Digest ${token}` } }); // Server-side (Express) const digestExtractor = (req) =&gt; { const authHeader = req.headers['authorization']; if (authHeader &amp;&amp; authHeader.startsWith('Digest ')) { return authHeader.split(' ')[1]; } return null; }; const opts = { jwtFromRequest: digestExtractor, // Use custom extractor secretOrKey: SECRET_KEY, } ``` - Basic Authentication: Typically used for credentials, not recommended for JWTs. ```js // (Not Recommended for JWTs) // Client-side (e.g., using Axios in JavaScript) axios.get('/protected-resource', { headers: { 'Authorization': `Basic ${token}` } }); // Server-side (Express) const basicExtractor = (req) =&gt; { const authHeader = req.headers['authorization']; if (authHeader &amp;&amp; authHeader.startsWith('Basic ')) { return authHeader.split(' ')[1]; } return null; }; const opts = { jwtFromRequest: basicExtractor, // Use custom extractor secretOrKey: SECRET_KEY, } ``` Using cookies - For client side: - We dont have to do anything. just run both server an dclient on same url (eg: http://localhost:3000), client using build file and server direclty running using node index. - when both run on same server: - cookies sent to client from sever will be stored as Set-Cookies in header and - server itself will read it back when any req is sent from client to server ```js //client side axios.get('/protected-resource') // server side const cookieParser = require('cookie-parser') const express = require('express'); const app = express() app.use(cookieParser()) //custom extractor var cookieExtractor = function (req) { var token = null; if (req &amp;&amp; req.cookies) { token = req.cookies["jwt"]; } return token; }; const opts = { jwtFromRequest: cookieExtractor, secretOrKey: 'your_secret_key' }; ``` Using URL Query Parameters ```js // Client-side (e.g., using Axios) axios.get('/protected-resource?token=' + token) // Custom extractor function for query parameters const queryParamExtractor = (req) =&gt; { return req.query.token; // Extract JWT from query parameter 'token' }; const opts = { jwtFromRequest: queryParamExtractor, // Use custom extractor secretOrKey: SECRET_KEY, } ``` Using Custom Headers ```js // Client-side (e.g., using Axios) axios.get('/protected-resource', { headers: { 'X-Custom-Header': token // Replace 'X-Custom-Header' with your custom header name } }); // Custom extractor function for custom headers const customHeaderExtractor = (req) =&gt; { return req.headers['x-custom-header']; // Replace 'x-custom-header' with your custom header name }; const opts = { jwtFromRequest: customHeaderExtractor, // Use custom extractor secretOrKey: SECRET_KEY, } ```]]></summary></entry><entry><title type="html">Tests</title><link href="https://anusree6154s.github.io/documentation/tests/" rel="alternate" type="text/html" title="Tests" /><published>2024-08-19T00:00:00+00:00</published><updated>2024-08-19T00:00:00+00:00</updated><id>https://anusree6154s.github.io/documentation/tests</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/tests/"><![CDATA[<p>Tests related documentation</p>
<h1 id="tests">Tests</h1>

<p><br /></p>

<h2 id="table-of-contents">Table of Contents</h2>

<ol>
  <li><a href="#1-overview">Overview</a></li>
  <li><a href="#2-test-frameworks">Test Frameworks</a></li>
  <li><a href="#3-pros-and-cons-of-each-with-additional-frameworks">Pros and Cons of Each with Additional Frameworks</a></li>
</ol>

<p><br /></p>

<h2 id="1-overview">1. Overview</h2>

<p><a href="overview"></a>
Testing server-side code is crucial for ensuring that your application behaves as expected and is free of bugs. Here’s an overview of how to write tests for server-side files and the types of tests and folders commonly used:</p>

<h3 id="types-of-tests">Types of Tests</h3>

<ol>
  <li>
    <p><strong>Unit Tests</strong></p>

    <ul>
      <li><strong>Purpose</strong>: Test individual functions, methods, or modules in isolation from the rest of the application.</li>
      <li><strong>Tools</strong>: Jest, Mocha, Chai, Jasmine</li>
      <li><strong>Example</strong>: Testing a utility function that formats dates.</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// utils/dateFormatter.js</span>
<span class="kd">function</span> <span class="nx">formatDate</span><span class="p">(</span><span class="nx">date</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">date</span><span class="p">.</span><span class="nx">toISOString</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">T</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
<span class="p">}</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">formatDate</span><span class="p">;</span>

<span class="c1">// tests/unit/dateFormatter.test.js</span>
<span class="kd">const</span> <span class="nx">formatDate</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../../utils/dateFormatter</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">formats date correctly</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="dl">"</span><span class="s2">2024-08-19T12:00:00Z</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">formatDate</span><span class="p">(</span><span class="nx">date</span><span class="p">)).</span><span class="nx">toBe</span><span class="p">(</span><span class="dl">"</span><span class="s2">2024-08-19</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Integration Tests</strong></p>

    <ul>
      <li><strong>Purpose</strong>: Test how different modules or components work together, including interactions with databases and external services.</li>
      <li><strong>Tools</strong>: Jest, Mocha, Chai, Supertest</li>
      <li><strong>Example</strong>: Testing an API endpoint to ensure it interacts correctly with the database.</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// routes/user.test.js</span>
<span class="kd">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">supertest</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../app</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// Express app instance</span>
<span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">mongoose</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../models/User</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">beforeAll</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">await</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="dl">"</span><span class="s2">mongodb://localhost/testdb</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">afterAll</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">await</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">connection</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
<span class="p">});</span>

<span class="nx">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">GET /users returns a list of users</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">await</span> <span class="nx">User</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John Doe</span><span class="dl">"</span><span class="p">,</span> <span class="na">email</span><span class="p">:</span> <span class="dl">"</span><span class="s2">john@example.com</span><span class="dl">"</span> <span class="p">});</span>
  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">request</span><span class="p">(</span><span class="nx">app</span><span class="p">).</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/users</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">toHaveLength</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">name</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="dl">"</span><span class="s2">John Doe</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>End-to-End (E2E) Tests</strong></p>

    <ul>
      <li><strong>Purpose</strong>: Test the entire application flow from end to end, including the frontend and backend, to ensure all parts of the system work together.</li>
      <li><strong>Tools</strong>: Cypress, Selenium</li>
      <li><strong>Example</strong>: Testing a user flow where a user logs in, performs an action, and logs out.</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// e2e/login.test.js</span>
<span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">User login</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">should log in successfully and redirect to dashboard</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">cy</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="dl">"</span><span class="s2">/login</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">input[name="email"]</span><span class="dl">'</span><span class="p">).</span><span class="nx">type</span><span class="p">(</span><span class="dl">"</span><span class="s2">user@example.com</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">input[name="password"]</span><span class="dl">'</span><span class="p">).</span><span class="nx">type</span><span class="p">(</span><span class="dl">"</span><span class="s2">password123</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">button[type="submit"]</span><span class="dl">'</span><span class="p">).</span><span class="nx">click</span><span class="p">();</span>
    <span class="nx">cy</span><span class="p">.</span><span class="nx">url</span><span class="p">().</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">include</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">/dashboard</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="common-folder-structure-for-tests">Common Folder Structure for Tests</h3>

<p>A well-organized test folder structure can help maintain clarity and manageability. Here’s a common structure:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>project-root/
│
├── src/                     # Source code
│   ├── controllers/         # Controller files
│   ├── models/              # Database models
│   ├── routes/             # API routes
│   └── utils/               # Utility functions
│
└── tests/                   # Test files
    ├── unit/                # Unit tests
    │   ├── utils/           # Tests for utility functions
    │   └── models/          # Tests for database models
    ├── integration/         # Integration tests
    │   ├── routes/          # Tests for API routes
    │   └── services/        # Tests for services
    ├── e2e/                 # End-to-end tests
    │   └── auth/            # E2E tests related to authentication
    ├── setup/               # Test setup and teardown
    │   └── jest.setup.js    # Jest setup file
    └── fixtures/            # Test data and fixtures
        └── users.js         # Example test data for users
</code></pre></div></div>

<h3 id="test-setup-and-configuration">Test Setup and Configuration</h3>

<ul>
  <li><strong>Test Framework</strong>: Set up Jest, Mocha, or another test framework.</li>
  <li><strong>Mocking</strong>: Use libraries like <code class="language-plaintext highlighter-rouge">sinon</code> or <code class="language-plaintext highlighter-rouge">jest.mock</code> to mock dependencies.</li>
  <li><strong>Environment</strong>: Configure test databases or services, and ensure tests run in a controlled environment.</li>
  <li><strong>Continuous Integration</strong>: Integrate tests into your CI/CD pipeline to run tests automatically on commits.</li>
</ul>

<h3 id="key-points">Key Points</h3>

<ul>
  <li><strong>Isolation</strong>: Ensure unit tests run in isolation from each other and external systems.</li>
  <li><strong>Data Cleanup</strong>: Use setup and teardown methods to prepare and clean up test data.</li>
  <li><strong>Coverage</strong>: Aim for high test coverage, but focus on testing critical paths and scenarios.</li>
</ul>

<p>By implementing these practices and using this structure, you can effectively test your server-side code and ensure that your application behaves as expected.</p>

<p><br /></p>

<h2 id="2-test-frameworks">2. Test Frameworks</h2>

<p>Choosing a test framework depends on various factors like project requirements, team familiarity, and specific features you need. Here’s a brief overview of popular test frameworks to help you make an informed choice:</p>

<h3 id="1-jest">1. <strong>Jest</strong></h3>

<ul>
  <li><strong>Description</strong>: Developed by Facebook, Jest is a widely-used testing framework for JavaScript applications. It supports both unit and integration testing and is especially popular for testing React applications.</li>
  <li><strong>Features</strong>:
    <ul>
      <li>Built-in test runner and assertion library.</li>
      <li>Snapshot testing for React components.</li>
      <li>Mocking and spying capabilities.</li>
      <li>Parallel test execution for faster results.</li>
      <li>Zero configuration setup.</li>
    </ul>
  </li>
  <li>
    <p><strong>When to Use</strong>:</p>

    <ul>
      <li>You need an all-in-one testing solution.</li>
      <li>You are working with React or other JavaScript frameworks.</li>
      <li>You prefer an easy setup and a rich feature set out of the box.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save-dev</span> jest
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-mocha">2. <strong>Mocha</strong></h3>

<ul>
  <li><strong>Description</strong>: Mocha is a flexible test framework for Node.js and browser-based JavaScript. It is known for its simplicity and extensibility.</li>
  <li><strong>Features</strong>:
    <ul>
      <li>Allows you to choose your own assertion library (e.g., Chai).</li>
      <li>Supports asynchronous testing.</li>
      <li>Offers a variety of reporters for test results.</li>
      <li>Can be integrated with various plugins and libraries.</li>
    </ul>
  </li>
  <li>
    <p><strong>When to Use</strong>:</p>

    <ul>
      <li>You prefer more control over test configuration and reporting.</li>
      <li>You want to use different assertion libraries or plugins.</li>
      <li>You need a framework that works well with various libraries and tools.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save-dev</span> mocha
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="3-jasmine">3. <strong>Jasmine</strong></h3>

<ul>
  <li><strong>Description</strong>: Jasmine is a behavior-driven development (BDD) testing framework for JavaScript. It is known for its clean syntax and ease of use.</li>
  <li><strong>Features</strong>:
    <ul>
      <li>BDD syntax for writing tests.</li>
      <li>Built-in assertion library.</li>
      <li>No dependencies on other libraries.</li>
      <li>Supports asynchronous testing.</li>
    </ul>
  </li>
  <li>
    <p><strong>When to Use</strong>:</p>

    <ul>
      <li>You prefer BDD-style testing and syntax.</li>
      <li>You want a straightforward testing framework with minimal configuration.</li>
      <li>You need a test framework that doesn’t depend on other libraries.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save-dev</span> jasmine
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="4-ava">4. <strong>Ava</strong></h3>

<ul>
  <li><strong>Description</strong>: Ava is a minimalistic test runner for Node.js that focuses on simplicity and speed.</li>
  <li><strong>Features</strong>:
    <ul>
      <li>Simple syntax and minimal configuration.</li>
      <li>Supports parallel test execution.</li>
      <li>Built-in assertion library.</li>
      <li>Designed for high-performance testing.</li>
    </ul>
  </li>
  <li>
    <p><strong>When to Use</strong>:</p>

    <ul>
      <li>You need a lightweight and fast test runner.</li>
      <li>You prefer a straightforward and minimal configuration.</li>
      <li>You want parallel test execution for better performance.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save-dev</span> ava
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="5-tape">5. <strong>Tape</strong></h3>

<ul>
  <li><strong>Description</strong>: Tape is a minimal test framework for Node.js and browser-based JavaScript that emphasizes simplicity and ease of use.</li>
  <li><strong>Features</strong>:
    <ul>
      <li>Simple and straightforward syntax.</li>
      <li>Provides only basic testing functionality, allowing you to integrate with other libraries as needed.</li>
      <li>No built-in assertion library, encourages using external ones.</li>
    </ul>
  </li>
  <li>
    <p><strong>When to Use</strong>:</p>

    <ul>
      <li>You prefer a minimalistic approach with fewer abstractions.</li>
      <li>You want to integrate with other libraries for assertions and reporting.</li>
      <li>You need a simple and unopinionated testing framework.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save-dev</span> tape
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="how-to-choose-a-test-framework">How to Choose a Test Framework</h3>

<ol>
  <li>
    <p><strong>Project Requirements</strong>: Choose a framework that fits your project’s needs. For example, if you’re working with React, Jest might be a better choice due to its built-in support for snapshot testing.</p>
  </li>
  <li>
    <p><strong>Team Familiarity</strong>: Consider what frameworks your team is already familiar with. This can reduce the learning curve and make adoption smoother.</p>
  </li>
  <li>
    <p><strong>Features</strong>: Evaluate the features you need, such as snapshot testing, parallel execution, or BDD syntax. Different frameworks offer varying levels of support for these features.</p>
  </li>
  <li>
    <p><strong>Performance</strong>: Consider the performance implications of the framework, especially for larger projects with extensive test suites.</p>
  </li>
  <li>
    <p><strong>Integration</strong>: Check how well the framework integrates with your existing tools and libraries, such as build systems, CI/CD pipelines, and other testing utilities.</p>
  </li>
</ol>

<p>By evaluating these factors, you can choose a test framework that best suits your project and development environment.</p>

<p><br /></p>

<h2 id="3-pros-and-cons-of-each-with-additional-frameworks">3. Pros and Cons of each with additional frameworks</h2>

<p>Here’s an expanded overview of popular test frameworks, including their pros and cons, along with additional commonly used test frameworks:</p>

<h3 id="1-jest-1">1. <strong>Jest</strong></h3>

<ul>
  <li><strong>Description</strong>: Developed by Facebook, Jest is an all-in-one testing framework for JavaScript.</li>
  <li><strong>Features</strong>:
    <ul>
      <li>Built-in test runner and assertion library.</li>
      <li>Snapshot testing for React components.</li>
      <li>Mocking and spying capabilities.</li>
      <li>Parallel test execution.</li>
      <li>Zero configuration setup.</li>
    </ul>
  </li>
  <li><strong>Pros</strong>:
    <ul>
      <li>Comprehensive feature set.</li>
      <li>Easy to set up and use, especially for React applications.</li>
      <li>Fast execution due to parallel testing.</li>
      <li>Rich ecosystem with many plugins.</li>
    </ul>
  </li>
  <li><strong>Cons</strong>:
    <ul>
      <li>Can be overkill for simple projects.</li>
      <li>Larger bundle size due to built-in features.</li>
    </ul>
  </li>
  <li>
    <p><strong>When to Use</strong>:</p>

    <ul>
      <li>You need an integrated solution with built-in mocking and snapshot features.</li>
      <li>You’re working with React or other JavaScript frameworks.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save-dev</span> jest
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-mocha-1">2. <strong>Mocha</strong></h3>

<ul>
  <li><strong>Description</strong>: Mocha is a flexible testing framework for Node.js and browser-based JavaScript.</li>
  <li><strong>Features</strong>:
    <ul>
      <li>Allows custom assertion libraries (e.g., Chai).</li>
      <li>Supports asynchronous testing.</li>
      <li>Various reporters available.</li>
      <li>Extensible with plugins.</li>
    </ul>
  </li>
  <li><strong>Pros</strong>:
    <ul>
      <li>Highly customizable with different assertion libraries and reporters.</li>
      <li>Works well with various plugins.</li>
      <li>Suitable for both Node.js and browser testing.</li>
    </ul>
  </li>
  <li><strong>Cons</strong>:
    <ul>
      <li>Requires additional libraries for assertions and mocking (e.g., Chai, Sinon).</li>
      <li>Slightly more configuration needed compared to Jest.</li>
    </ul>
  </li>
  <li>
    <p><strong>When to Use</strong>:</p>

    <ul>
      <li>You prefer flexibility and customization.</li>
      <li>You want to use different assertion libraries or need specific reporting formats.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save-dev</span> mocha
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="3-jasmine-1">3. <strong>Jasmine</strong></h3>

<ul>
  <li><strong>Description</strong>: Jasmine is a behavior-driven development (BDD) framework for JavaScript.</li>
  <li><strong>Features</strong>:
    <ul>
      <li>BDD syntax for writing tests.</li>
      <li>Built-in assertion library.</li>
      <li>No external dependencies.</li>
      <li>Supports asynchronous testing.</li>
    </ul>
  </li>
  <li><strong>Pros</strong>:
    <ul>
      <li>Simple and clean BDD syntax.</li>
      <li>No need for additional libraries.</li>
      <li>Good documentation and community support.</li>
    </ul>
  </li>
  <li><strong>Cons</strong>:
    <ul>
      <li>Limited built-in features compared to Jest.</li>
      <li>Less flexibility in choosing assertion libraries.</li>
    </ul>
  </li>
  <li>
    <p><strong>When to Use</strong>:</p>

    <ul>
      <li>You prefer BDD-style testing and syntax.</li>
      <li>You need a straightforward testing framework without extra dependencies.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save-dev</span> jasmine
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="4-ava-1">4. <strong>Ava</strong></h3>

<ul>
  <li><strong>Description</strong>: Ava is a minimalistic test runner for Node.js focused on simplicity and performance.</li>
  <li><strong>Features</strong>:
    <ul>
      <li>Minimal configuration and syntax.</li>
      <li>Supports parallel test execution.</li>
      <li>Built-in assertion library.</li>
    </ul>
  </li>
  <li><strong>Pros</strong>:
    <ul>
      <li>Fast and efficient due to parallel test execution.</li>
      <li>Simple syntax and minimal setup.</li>
      <li>Good performance for large test suites.</li>
    </ul>
  </li>
  <li><strong>Cons</strong>:
    <ul>
      <li>Limited built-in features compared to Jest.</li>
      <li>Fewer plugins and integrations available.</li>
    </ul>
  </li>
  <li>
    <p><strong>When to Use</strong>:</p>

    <ul>
      <li>You need a lightweight, fast test runner.</li>
      <li>You prefer minimal configuration and simplicity.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save-dev</span> ava
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="5-tape-1">5. <strong>Tape</strong></h3>

<ul>
  <li><strong>Description</strong>: Tape is a minimalistic test framework for Node.js and browser-based JavaScript.</li>
  <li><strong>Features</strong>:
    <ul>
      <li>Simple, straightforward syntax.</li>
      <li>Basic testing functionality.</li>
      <li>Encourages using external libraries for assertions.</li>
    </ul>
  </li>
  <li><strong>Pros</strong>:
    <ul>
      <li>Minimalistic and straightforward.</li>
      <li>Works well with other libraries for assertions and reporting.</li>
      <li>Easy to integrate into various setups.</li>
    </ul>
  </li>
  <li><strong>Cons</strong>:
    <ul>
      <li>Lacks built-in assertion and reporting features.</li>
      <li>Less opinionated, which might require additional setup.</li>
    </ul>
  </li>
  <li>
    <p><strong>When to Use</strong>:</p>

    <ul>
      <li>You prefer a minimalistic approach with custom integrations.</li>
      <li>You want to use external libraries for assertions and reporting.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save-dev</span> tape
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="additional-test-frameworks">Additional Test Frameworks</h3>

<ol>
  <li>
    <p><strong>Karma</strong></p>

    <ul>
      <li><strong>Description</strong>: A test runner for JavaScript that works with various test frameworks (e.g., Jasmine, Mocha).</li>
      <li><strong>Features</strong>:
        <ul>
          <li>Runs tests in real browsers.</li>
          <li>Supports various test frameworks and reporters.</li>
        </ul>
      </li>
      <li><strong>Pros</strong>:
        <ul>
          <li>Browser-based testing.</li>
          <li>Highly configurable and integrates with various frameworks.</li>
        </ul>
      </li>
      <li><strong>Cons</strong>:
        <ul>
          <li>Requires setup and configuration.</li>
          <li>Can be complex for beginners.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Cypress</strong></p>

    <ul>
      <li><strong>Description</strong>: End-to-end testing framework with a focus on frontend applications.</li>
      <li><strong>Features</strong>:
        <ul>
          <li>Real-time browser preview of tests.</li>
          <li>Built-in commands and assertions.</li>
          <li>Easy setup and configuration.</li>
        </ul>
      </li>
      <li><strong>Pros</strong>:
        <ul>
          <li>Excellent for end-to-end and integration testing.</li>
          <li>Interactive test runner.</li>
          <li>Good documentation and support.</li>
        </ul>
      </li>
      <li><strong>Cons</strong>:
        <ul>
          <li>Focused primarily on end-to-end testing.</li>
          <li>Can be overkill for simple unit tests.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Supertest</strong></p>
    <ul>
      <li><strong>Description</strong>: A high-level abstraction for testing HTTP APIs.</li>
      <li><strong>Features</strong>:
        <ul>
          <li>Integrates with Mocha or other test frameworks.</li>
          <li>Provides a fluent API for making HTTP requests and assertions.</li>
        </ul>
      </li>
      <li><strong>Pros</strong>:
        <ul>
          <li>Simplifies HTTP API testing.</li>
          <li>Works well with Mocha for integration tests.</li>
        </ul>
      </li>
      <li><strong>Cons</strong>:
        <ul>
          <li>Limited to HTTP requests and responses.</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<p>By considering the pros, cons, and specific features of each framework, you can choose the one that best fits your project requirements and development preferences.</p>]]></content><author><name>Anusree Anilkumar</name></author><summary type="html"><![CDATA[Tests related documentation Tests]]></summary></entry></feed>