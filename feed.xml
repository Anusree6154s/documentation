<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://anusree6154s.github.io/documentation/feed.xml" rel="self" type="application/atom+xml" /><link href="https://anusree6154s.github.io/documentation/" rel="alternate" type="text/html" /><updated>2025-01-19T07:09:22+00:00</updated><id>https://anusree6154s.github.io/documentation/feed.xml</id><title type="html">Blog &amp;amp; Docs</title><subtitle>This site is my personal documentation, made public for anyone who might find my code scribbles useful! ❤️</subtitle><author><name>Anusree Anilkumar</name></author><entry><title type="html">Typescript learners guide</title><link href="https://anusree6154s.github.io/documentation/typescript-learners-guide" rel="alternate" type="text/html" title="Typescript learners guide" /><published>2025-01-18T00:00:00+00:00</published><updated>2025-01-18T00:00:00+00:00</updated><id>https://anusree6154s.github.io/documentation/typescript</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/typescript-learners-guide"><![CDATA[<p>To study basic and advanced typescript:</p>

<p><br />
<br /></p>

<h3 id="table-of-contents"><ins>Table of Contents</ins></h3>

<ul>
  <li><a href="#basic-typescript-concepts">Basic</a>
    <ol>
      <li><a href="#1-basic-types">Basic Types</a></li>
      <li><a href="#2-type-annotations">Type Annotations</a></li>
      <li><a href="#3-interfaces">Interfaces</a></li>
      <li><a href="#4-classes">Classes</a></li>
      <li><a href="#5-enums">Enums</a></li>
      <li><a href="#6-functions">Functions</a></li>
      <li><a href="#7-arrays-and-tuples">Arrays and Tuples</a></li>
      <li><a href="#8-union-and-intersection-types">Union and Intersection Types</a></li>
      <li><a href="#9-type-aliases">Type Aliases</a></li>
      <li><a href="#10-generics">Generics</a></li>
      <li><a href="#11-modules">Modules</a></li>
      <li><a href="#12-type-inference">Type Inference</a></li>
    </ol>
  </li>
  <li><a href="#advanced-typescript-concepts">Advanced</a>
    <ol>
      <li><a href="#1-advanced-types">Advanced Types</a></li>
      <li><a href="#2-type-guards">Type Guards</a></li>
      <li><a href="#3-discriminated-unions">Discriminated Unions</a></li>
      <li><a href="#4-keyof-and-lookup-types">Keyof and Lookup Types</a></li>
      <li><a href="#5-indexed-access-types">Indexed Access Types</a></li>
      <li><a href="#6-template-literal-types">Template Literal Types</a></li>
      <li><a href="#7-decorators">Decorators</a></li>
      <li><a href="#8-declaration-merging">Declaration Merging</a></li>
      <li><a href="#9-namespace">Namespace</a></li>
      <li><a href="#10-type-manipulation">Type Manipulation</a></li>
      <li><a href="#11-module-augmentation">Module Augmentation</a></li>
      <li><a href="#12-strict-type-checking">Strict Type Checking</a></li>
      <li><a href="#13-advanced-generics">Advanced Generics</a></li>
      <li><a href="#14-dynamic-import-types">Dynamic Import Types</a></li>
      <li><a href="#15-compiler-configuration">Compiler Configuration</a></li>
      <li><a href="#16-advanced-decorator-usage">Advanced Decorator Usage</a></li>
    </ol>
  </li>
</ul>

<p><br />
<br /></p>

<h3 id="basic-typescript-concepts"><ins>Basic Typescript Concepts</ins></h3>

<h4 id="1-basic-types">1. <strong>Basic Types</strong></h4>

<p>TypeScript provides a set of basic types for handling data:</p>

<h5 id="string-number-boolean"><code class="language-plaintext highlighter-rouge">string</code>, <code class="language-plaintext highlighter-rouge">number</code>, <code class="language-plaintext highlighter-rouge">boolean</code></h5>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">name</span><span class="p">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Alice</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">age</span><span class="p">:</span> <span class="kr">number</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">isActive</span><span class="p">:</span> <span class="nx">boolean</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</code></pre></div></div>

<h5 id="null-undefined-void"><code class="language-plaintext highlighter-rouge">null</code>, <code class="language-plaintext highlighter-rouge">undefined</code>, <code class="language-plaintext highlighter-rouge">void</code></h5>

<ul>
  <li><code class="language-plaintext highlighter-rouge">null</code> and <code class="language-plaintext highlighter-rouge">undefined</code> represent absence of value.</li>
  <li><code class="language-plaintext highlighter-rouge">void</code> is used for functions that don’t return a value.</li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">emptyValue</span><span class="p">:</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">notAssigned</span><span class="p">:</span> <span class="kc">undefined</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">logMessage</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="any-unknown"><code class="language-plaintext highlighter-rouge">any</code>, <code class="language-plaintext highlighter-rouge">unknown</code></h5>

<ul>
  <li><code class="language-plaintext highlighter-rouge">any</code> allows any type and essentially disables type checking.</li>
  <li><code class="language-plaintext highlighter-rouge">unknown</code> is similar to <code class="language-plaintext highlighter-rouge">any</code>, but more restrictive, requiring type checking before usage.</li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">anything</span><span class="p">:</span> <span class="kr">any</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="nx">anything</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Now a string</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// No error</span>

<span class="kd">let</span> <span class="nx">uncertain</span><span class="p">:</span> <span class="nx">unknown</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">uncertain</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">string</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">uncertain</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">());</span> <span class="c1">// OK after checking the type</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="never"><code class="language-plaintext highlighter-rouge">never</code></h5>

<p><code class="language-plaintext highlighter-rouge">never</code> is used for functions that never return a value, like functions that throw exceptions or enter infinite loops.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">throwError</span><span class="p">(</span><span class="nx">message</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nx">never</span> <span class="p">{</span>
  <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="2-type-annotations">2. <strong>Type Annotations</strong></h4>

<p>Type annotations specify the type of variables, function parameters, and return values explicitly.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">x</span><span class="p">:</span> <span class="kr">number</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// Type annotation for a number</span>

<span class="kd">function</span> <span class="nx">greet</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="kr">string</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s2">`Hello, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="3-interfaces">3. <strong>Interfaces</strong></h4>

<p>An interface defines the structure of an object, specifying its properties and methods.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nx">greet</span><span class="p">():</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">person</span><span class="p">:</span> <span class="nx">Person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Alice</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
  <span class="nx">greet</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">`Hello, my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div>

<h4 id="4-classes">4. <strong>Classes</strong></h4>

<p>Classes allow you to define blueprints for objects, including properties and methods.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Animal</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">speak</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2"> makes a sound`</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Dog</span> <span class="kd">extends</span> <span class="nx">Animal</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">speak</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2"> barks`</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">dog</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dog</span><span class="p">(</span><span class="dl">"</span><span class="s2">Buddy</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">dog</span><span class="p">.</span><span class="nx">speak</span><span class="p">();</span> <span class="c1">// Buddy barks</span>
</code></pre></div></div>

<h5 id="access-modifiers">Access Modifiers</h5>

<ul>
  <li><code class="language-plaintext highlighter-rouge">public</code>: Can be accessed from anywhere (default).</li>
  <li><code class="language-plaintext highlighter-rouge">private</code>: Can only be accessed within the class.</li>
  <li><code class="language-plaintext highlighter-rouge">protected</code>: Can be accessed within the class and subclasses.</li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">User</span> <span class="p">{</span>
  <span class="k">public</span> <span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">password</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">password</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">password</span> <span class="o">=</span> <span class="nx">password</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">showName</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="5-enums">5. <strong>Enums</strong></h4>

<p>Enums define named constant values. TypeScript supports numeric and string enums.</p>

<h5 id="numeric-enum">Numeric Enum:</h5>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">enum</span> <span class="nx">Direction</span> <span class="p">{</span>
  <span class="nx">Up</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
  <span class="nx">Down</span><span class="p">,</span>
  <span class="nx">Left</span><span class="p">,</span>
  <span class="nx">Right</span><span class="p">,</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">Up</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>

<h5 id="string-enum">String Enum:</h5>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">enum</span> <span class="nx">Status</span> <span class="p">{</span>
  <span class="nx">Pending</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">PENDING</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">InProgress</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">IN_PROGRESS</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">Completed</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">COMPLETED</span><span class="dl">"</span><span class="p">,</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Pending</span><span class="p">);</span> <span class="c1">// "PENDING"</span>
</code></pre></div></div>

<h4 id="6-functions">6. <strong>Functions</strong></h4>

<p>TypeScript allows specifying types for function parameters and return values. It also supports optional, default, and rest parameters.</p>

<h5 id="parameter-types-and-return-types">Parameter Types and Return Types</h5>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">b</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="kr">number</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="optional-parameters-">Optional Parameters (<code class="language-plaintext highlighter-rouge">?</code>)</h5>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">greet</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">age</span><span class="p">?:</span> <span class="kr">number</span><span class="p">):</span> <span class="kr">string</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">age</span> <span class="p">?</span> <span class="s2">`</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2"> is </span><span class="p">${</span><span class="nx">age</span><span class="p">}</span><span class="s2"> years old`</span> <span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">(</span><span class="dl">"</span><span class="s2">Alice</span><span class="dl">"</span><span class="p">));</span> <span class="c1">// Alice</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">(</span><span class="dl">"</span><span class="s2">Bob</span><span class="dl">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">));</span> <span class="c1">// Bob is 30 years old</span>
</code></pre></div></div>

<h5 id="default-parameters">Default Parameters</h5>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">greet</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span> <span class="kr">number</span> <span class="o">=</span> <span class="mi">25</span><span class="p">):</span> <span class="kr">string</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2"> is </span><span class="p">${</span><span class="nx">age</span><span class="p">}</span><span class="s2"> years old`</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="rest-parameters-args">Rest Parameters (<code class="language-plaintext highlighter-rouge">...args</code>)</h5>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">sum</span><span class="p">(...</span><span class="nx">numbers</span><span class="p">:</span> <span class="kr">number</span><span class="p">[]):</span> <span class="kr">number</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nx">num</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span> <span class="c1">// 10</span>
</code></pre></div></div>

<h4 id="7-arrays-and-tuples">7. <strong>Arrays and Tuples</strong></h4>

<h5 id="typed-arrays">Typed Arrays</h5>

<p>Arrays can be strongly typed.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">numbers</span><span class="p">:</span> <span class="kr">number</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">strings</span><span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">c</span><span class="dl">"</span><span class="p">];</span>
</code></pre></div></div>

<h5 id="tuples">Tuples</h5>

<p>Tuples are arrays with fixed sizes and types for each element.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">tuple</span><span class="p">:</span> <span class="p">[</span><span class="kr">string</span><span class="p">,</span> <span class="kr">number</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">Alice</span><span class="dl">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">];</span>
</code></pre></div></div>

<h4 id="8-union-and-intersection-types">8. <strong>Union and Intersection Types</strong></h4>

<h5 id="union-types-">Union Types (<code class="language-plaintext highlighter-rouge">|</code>)</h5>

<p>A variable can hold multiple types.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">print</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="kr">number</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">print</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">print</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>
</code></pre></div></div>

<h5 id="intersection-types-">Intersection Types (<code class="language-plaintext highlighter-rouge">&amp;</code>)</h5>

<p>Combining multiple types into one.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Employee</span> <span class="p">{</span>
  <span class="nl">employeeId</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">role</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">EmployeePerson</span> <span class="o">=</span> <span class="nx">Person</span> <span class="o">&amp;</span> <span class="nx">Employee</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">emp</span><span class="p">:</span> <span class="nx">EmployeePerson</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Alice</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
  <span class="na">employeeId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">E123</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">role</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Engineer</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<h4 id="9-type-aliases">9. <strong>Type Aliases</strong></h4>

<p>Type aliases allow creating custom types that can be reused across the codebase.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">ID</span> <span class="o">=</span> <span class="kr">string</span> <span class="o">|</span> <span class="kr">number</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">getUser</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="nx">ID</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Fetching user with ID: </span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">getUser</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">getUser</span><span class="p">(</span><span class="dl">"</span><span class="s2">abc123</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="10-generics">10. <strong>Generics</strong></h4>

<p>Generics allow writing functions, classes, and interfaces that work with any data type, providing more flexibility and reusability.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">identity</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">arg</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nx">T</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">arg</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">identity</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span> <span class="c1">// Hello</span>

<span class="kd">let</span> <span class="nx">numberOutput</span> <span class="o">=</span> <span class="nx">identity</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numberOutput</span><span class="p">);</span> <span class="c1">// 100</span>
</code></pre></div></div>

<h5 id="generic-classes">Generic Classes</h5>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Box</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="na">value</span><span class="p">:</span> <span class="nx">T</span><span class="p">;</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="na">value</span><span class="p">:</span> <span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">getValue</span><span class="p">():</span> <span class="nx">T</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">stringBox</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Box</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stringBox</span><span class="p">.</span><span class="nx">getValue</span><span class="p">());</span> <span class="c1">// Hello</span>
</code></pre></div></div>

<h4 id="11-modules">11. <strong>Modules</strong></h4>

<p>Modules allow code to be split into separate files, which can be imported/exported.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// file1.ts</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">greet</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="kr">string</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s2">`Hello, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// file2.ts</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">greet</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./file1</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">(</span><span class="dl">"</span><span class="s2">Alice</span><span class="dl">"</span><span class="p">));</span> <span class="c1">// Hello, Alice</span>
</code></pre></div></div>

<h4 id="12-type-inference">12. <strong>Type Inference</strong></h4>

<p>TypeScript automatically infers the type of a variable when the type is not explicitly declared.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">inferredString</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// inferred as string</span>
<span class="kd">let</span> <span class="nx">inferredNumber</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span> <span class="c1">// inferred as number</span>

<span class="c1">// TypeScript can infer types from function return values as well</span>
<span class="kd">function</span> <span class="nx">multiply</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">y</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">y</span><span class="p">;</span> <span class="c1">// inferred return type is number</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">multiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</code></pre></div></div>

<p>Sure! Below is an elaboration on the <strong>Advanced TypeScript</strong> topics you mentioned, along with examples to illustrate each concept.</p>

<p><br />
<br /></p>

<h3 id="advanced-typescript-concepts"><ins>Advanced Typescript Concepts</ins></h3>
<h4 id="1-advanced-types">1. <strong>Advanced Types</strong></h4>

<h5 id="mapped-types"><strong>Mapped Types</strong></h5>

<p>Mapped types allow you to create a new type based on an existing one by transforming its properties. You can modify the properties or their types.</p>

<p>Example: Create a <code class="language-plaintext highlighter-rouge">Readonly</code> type that marks all properties of an object as <code class="language-plaintext highlighter-rouge">readonly</code>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nb">Readonly</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span> <span class="k">readonly</span> <span class="p">[</span><span class="nx">K</span> <span class="k">in</span> <span class="kr">keyof</span> <span class="nx">T</span><span class="p">]:</span> <span class="nx">T</span><span class="p">[</span><span class="nx">K</span><span class="p">]</span> <span class="p">};</span>

<span class="kr">interface</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">ReadonlyPerson</span> <span class="o">=</span> <span class="nb">Readonly</span><span class="o">&lt;</span><span class="nx">Person</span><span class="o">&gt;</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">person</span><span class="p">:</span> <span class="nx">ReadonlyPerson</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Alice</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">30</span> <span class="p">};</span>
<span class="c1">// person.name = 'Bob'; // Error: cannot assign to 'name' because it is a read-only property.</span>
</code></pre></div></div>

<h5 id="conditional-types"><strong>Conditional Types</strong></h5>

<p>Conditional types use the <code class="language-plaintext highlighter-rouge">extends</code> keyword to define conditional logic based on the type of a variable.</p>

<p>Example: Check if a type <code class="language-plaintext highlighter-rouge">T</code> is <code class="language-plaintext highlighter-rouge">string</code>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">IsString</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nx">T</span> <span class="kd">extends</span> <span class="kr">string</span> <span class="p">?</span> <span class="kc">true</span> <span class="p">:</span> <span class="kc">false</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">Test1</span> <span class="o">=</span> <span class="nx">IsString</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">;</span> <span class="c1">// true</span>
<span class="kd">type</span> <span class="nx">Test2</span> <span class="o">=</span> <span class="nx">IsString</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">;</span> <span class="c1">// false</span>
</code></pre></div></div>

<h5 id="utility-types"><strong>Utility Types</strong></h5>

<p>TypeScript provides several built-in utility types that help manipulate types.</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">Partial&lt;T&gt;</code></strong>: Makes all properties of <code class="language-plaintext highlighter-rouge">T</code> optional.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Required&lt;T&gt;</code></strong>: Makes all properties of <code class="language-plaintext highlighter-rouge">T</code> required.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Readonly&lt;T&gt;</code></strong>: Makes all properties of <code class="language-plaintext highlighter-rouge">T</code> read-only.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Pick&lt;T, K&gt;</code></strong>: Picks a subset of properties <code class="language-plaintext highlighter-rouge">K</code> from type <code class="language-plaintext highlighter-rouge">T</code>.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Omit&lt;T, K&gt;</code></strong>: Omits properties <code class="language-plaintext highlighter-rouge">K</code> from type <code class="language-plaintext highlighter-rouge">T</code>.</li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">address</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">PartialPerson</span> <span class="o">=</span> <span class="nb">Partial</span><span class="o">&lt;</span><span class="nx">Person</span><span class="o">&gt;</span><span class="p">;</span> <span class="c1">// All properties are optional</span>
<span class="kd">type</span> <span class="nx">RequiredPerson</span> <span class="o">=</span> <span class="nx">Required</span><span class="o">&lt;</span><span class="nx">Person</span><span class="o">&gt;</span><span class="p">;</span> <span class="c1">// All properties are required</span>
<span class="kd">type</span> <span class="nx">NameOnly</span> <span class="o">=</span> <span class="nb">Pick</span><span class="o">&lt;</span><span class="nx">Person</span><span class="p">,</span> <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="o">&gt;</span><span class="p">;</span> <span class="c1">// Only `name` is picked</span>
<span class="kd">type</span> <span class="nx">WithoutAddress</span> <span class="o">=</span> <span class="nx">Omit</span><span class="o">&lt;</span><span class="nx">Person</span><span class="p">,</span> <span class="dl">"</span><span class="s2">address</span><span class="dl">"</span><span class="o">&gt;</span><span class="p">;</span> <span class="c1">// `address` is omitted</span>
</code></pre></div></div>

<h4 id="2-type-guards">2. <strong>Type Guards</strong></h4>

<p>Type guards help narrow the type within a conditional block using <code class="language-plaintext highlighter-rouge">x is Type</code> syntax or built-in checks.</p>

<h5 id="custom-type-guard">Custom Type Guard</h5>

<p>You can create your own type guards to narrow types based on logic.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">isString</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="kr">any</span><span class="p">):</span> <span class="nx">value</span> <span class="k">is</span> <span class="kr">string</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">string</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">input</span><span class="p">:</span> <span class="kr">any</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, world!</span><span class="dl">"</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">isString</span><span class="p">(</span><span class="nx">input</span><span class="p">))</span> <span class="p">{</span>
  <span class="c1">// TypeScript now knows that `input` is a string here.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">());</span> <span class="c1">// OK</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="instanceof-and-typeof"><code class="language-plaintext highlighter-rouge">instanceof</code> and <code class="language-plaintext highlighter-rouge">typeof</code></h5>

<p><code class="language-plaintext highlighter-rouge">instanceof</code> and <code class="language-plaintext highlighter-rouge">typeof</code> are used for runtime type checks.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Dog</span> <span class="p">{</span>
  <span class="nx">bark</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Woof!</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">pet</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dog</span><span class="p">();</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">pet</span> <span class="k">instanceof</span> <span class="nx">Dog</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">pet</span><span class="p">.</span><span class="nx">bark</span><span class="p">();</span> <span class="c1">// OK, `pet` is now recognized as a `Dog`</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">number</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// OK</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="3-discriminated-unions">3. <strong>Discriminated Unions</strong></h4>

<p>Discriminated unions allow for union types that include a tag (discriminant) to help narrow down types.</p>

<p>Example: Different actions for different shapes using a <code class="language-plaintext highlighter-rouge">type</code> property:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">Shape</span> <span class="o">=</span>
  <span class="o">|</span> <span class="p">{</span> <span class="na">kind</span><span class="p">:</span> <span class="dl">"</span><span class="s2">circle</span><span class="dl">"</span><span class="p">;</span> <span class="nl">radius</span><span class="p">:</span> <span class="kr">number</span> <span class="p">}</span>
  <span class="o">|</span> <span class="p">{</span> <span class="na">kind</span><span class="p">:</span> <span class="dl">"</span><span class="s2">square</span><span class="dl">"</span><span class="p">;</span> <span class="nl">sideLength</span><span class="p">:</span> <span class="kr">number</span> <span class="p">};</span>

<span class="kd">function</span> <span class="nx">area</span><span class="p">(</span><span class="nx">shape</span><span class="p">:</span> <span class="nx">Shape</span><span class="p">):</span> <span class="kr">number</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">shape</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">circle</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="nx">shape</span><span class="p">.</span><span class="nx">radius</span> <span class="o">**</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">shape</span><span class="p">.</span><span class="nx">sideLength</span> <span class="o">**</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="4-keyof-and-lookup-types">4. <strong>Keyof and Lookup Types</strong></h4>

<p><code class="language-plaintext highlighter-rouge">keyof</code> and lookup types allow you to dynamically access the keys and values of a type.</p>

<h5 id="keyof-operator"><code class="language-plaintext highlighter-rouge">keyof</code> Operator</h5>

<p>Get the keys of an object type as a union of string literals.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Key</span> <span class="o">=</span> <span class="kr">keyof</span> <span class="nx">Person</span><span class="p">;</span> <span class="c1">// "name" | "age"</span>
</code></pre></div></div>

<h5 id="lookup-types">Lookup Types</h5>

<p>Access the value of a specific property dynamically.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">Value</span> <span class="o">=</span> <span class="nx">Person</span><span class="p">[</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">];</span> <span class="c1">// string</span>
</code></pre></div></div>

<h4 id="5-indexed-access-types">5. <strong>Indexed Access Types</strong></h4>

<p>Indexed access types allow you to retrieve the type of a property of an object type.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">NameType</span> <span class="o">=</span> <span class="nx">Person</span><span class="p">[</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">];</span> <span class="c1">// string</span>
</code></pre></div></div>

<h4 id="6-template-literal-types">6. <strong>Template Literal Types</strong></h4>

<p>Template literal types allow you to construct types by combining string literals, creating dynamic string types.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">Greeting</span> <span class="o">=</span> <span class="s2">`Hello, </span><span class="p">${</span><span class="kr">string</span><span class="p">}</span><span class="s2">!`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">greeting</span><span class="p">:</span> <span class="nx">Greeting</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, Alice!</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// Valid</span>
<span class="c1">// const invalidGreeting: Greeting = "Hi, Alice!";  // Error: doesn't match `Hello, ${string}!`</span>
</code></pre></div></div>

<h4 id="7-decorators">7. <strong>Decorators</strong></h4>

<p>Decorators are an experimental feature that allows you to modify the behavior of classes, methods, or properties.</p>

<p>Example: A simple class decorator that logs class creation.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">logClass</span><span class="p">(</span><span class="nx">target</span><span class="p">:</span> <span class="nb">Function</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">target</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2"> class is being created!`</span><span class="p">);</span>
<span class="p">}</span>

<span class="p">@</span><span class="nd">logClass</span>
<span class="kd">class</span> <span class="nx">MyClass</span> <span class="p">{}</span>

<span class="kd">const</span> <span class="nx">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyClass</span><span class="p">();</span> <span class="c1">// Logs: MyClass class is being created!</span>
</code></pre></div></div>

<h4 id="8-declaration-merging">8. <strong>Declaration Merging</strong></h4>

<p>Declaration merging occurs when multiple declarations of the same type or interface are combined into one.</p>

<p>Example:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">person</span><span class="p">:</span> <span class="nx">Person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Alice</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
<span class="p">};</span> <span class="c1">// Declaration of `Person` is merged</span>
</code></pre></div></div>

<h4 id="9-namespace">9. <strong>Namespace</strong></h4>

<p>Namespaces are used to organize code into logical groups (legacy feature but still used in some scenarios).</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nx">Shapes</span> <span class="p">{</span>
  <span class="k">export</span> <span class="kr">interface</span> <span class="nx">Circle</span> <span class="p">{</span>
    <span class="nl">radius</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">export</span> <span class="kr">interface</span> <span class="nx">Square</span> <span class="p">{</span>
    <span class="nl">sideLength</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">circle</span><span class="p">:</span> <span class="nx">Shapes</span><span class="p">.</span><span class="nx">Circle</span> <span class="o">=</span> <span class="p">{</span> <span class="na">radius</span><span class="p">:</span> <span class="mi">5</span> <span class="p">};</span>
<span class="kd">const</span> <span class="nx">square</span><span class="p">:</span> <span class="nx">Shapes</span><span class="p">.</span><span class="nx">Square</span> <span class="o">=</span> <span class="p">{</span> <span class="na">sideLength</span><span class="p">:</span> <span class="mi">10</span> <span class="p">};</span>
</code></pre></div></div>

<h4 id="10-type-manipulation">10. <strong>Type Manipulation</strong></h4>

<p>Advanced type manipulation allows you to infer types using <code class="language-plaintext highlighter-rouge">infer</code> and perform conditional type transformations.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">ReturnType</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nx">T</span> <span class="kd">extends</span> <span class="p">(...</span><span class="nx">args</span><span class="p">:</span> <span class="kr">any</span><span class="p">[])</span> <span class="o">=&gt;</span> <span class="nx">infer</span> <span class="nx">R</span> <span class="p">?</span> <span class="nx">R</span> <span class="p">:</span> <span class="nx">never</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">MyFunction</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">y</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kr">string</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">Result</span> <span class="o">=</span> <span class="nx">ReturnType</span><span class="o">&lt;</span><span class="nx">MyFunction</span><span class="o">&gt;</span><span class="p">;</span> <span class="c1">// string</span>
</code></pre></div></div>

<h4 id="11-module-augmentation">11. <strong>Module Augmentation</strong></h4>

<p>Module augmentation allows you to extend or modify existing modules, adding new functionality.</p>

<p>Example: Augmenting a module to add new properties to an existing interface.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Augmenting a global module or third-party library</span>
<span class="kr">declare</span> <span class="kr">module</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span> <span class="p">{</span>
  <span class="kr">interface</span> <span class="nx">Request</span> <span class="p">{</span>
    <span class="nl">user</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Now you can access `user` property on `Request`</span>
</code></pre></div></div>

<h4 id="12-strict-type-checking">12. <strong>Strict Type Checking</strong></h4>

<p>Enable strict type checking options to enforce safer coding practices.</p>

<p>In <code class="language-plaintext highlighter-rouge">tsconfig.json</code>:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"strict"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"strictNullChecks"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noImplicitAny"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">strictNullChecks</code> ensures that <code class="language-plaintext highlighter-rouge">null</code> and <code class="language-plaintext highlighter-rouge">undefined</code> are not assignable to other types by default. <code class="language-plaintext highlighter-rouge">noImplicitAny</code> disallows variables from being implicitly typed as <code class="language-plaintext highlighter-rouge">any</code>.</p>

<h4 id="13-advanced-generics">13. <strong>Advanced Generics</strong></h4>

<h5 id="generic-constraints-t-extends-u">Generic Constraints (<code class="language-plaintext highlighter-rouge">T extends U</code>)</h5>

<p>Restrict the types that can be used with generics.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">echo</span><span class="o">&lt;</span><span class="nx">T</span> <span class="kd">extends</span> <span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nx">T</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">echo</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// OK</span>
<span class="c1">// echo(123);  // Error: Argument of type 'number' is not assignable to parameter of type 'string'.</span>
</code></pre></div></div>

<h5 id="default-generic-parameters">Default Generic Parameters</h5>

<p>You can set default types for generics.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">identity</span><span class="o">&lt;</span><span class="nx">T</span> <span class="o">=</span> <span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nx">T</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">identity</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// string</span>
<span class="nx">identity</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span> <span class="c1">// number</span>
</code></pre></div></div>

<h5 id="recursive-generics">Recursive Generics</h5>

<p>Generics can be recursive, allowing more complex types.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">List</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nx">T</span> <span class="o">|</span> <span class="nx">List</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">[];</span>

<span class="kd">const</span> <span class="nx">stringList</span><span class="p">:</span> <span class="nx">List</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">Alice</span><span class="dl">"</span><span class="p">,</span> <span class="p">[</span><span class="dl">"</span><span class="s2">Bob</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Charlie</span><span class="dl">"</span><span class="p">]];</span>
</code></pre></div></div>

<h4 id="14-dynamic-import-types">14. <strong>Dynamic Import Types</strong></h4>

<p>Using <code class="language-plaintext highlighter-rouge">import()</code> syntax to dynamically load modules at runtime.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">Module</span> <span class="o">=</span> <span class="k">typeof</span> <span class="k">import</span><span class="p">(</span><span class="dl">"</span><span class="s2">./module</span><span class="dl">"</span><span class="p">);</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nx">loadModule</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="kr">module</span> <span class="o">=</span> <span class="k">await</span> <span class="k">import</span><span class="p">(</span><span class="dl">"</span><span class="s2">./module</span><span class="dl">"</span><span class="p">);</span>
  <span class="kr">module</span><span class="p">.</span><span class="nx">someFunction</span><span class="p">();</span> <span class="c1">// Access the dynamically imported function</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="15-compiler-configuration">15. <strong>Compiler Configuration</strong></h4>

<p><code class="language-plaintext highlighter-rouge">tsconfig.json</code> is the configuration file for TypeScript. It lets you set compiler options, such as module resolution, strict settings, and more.</p>

<p>Example <code class="language-plaintext highlighter-rouge">tsconfig.json</code>:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ES2020"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"commonjs"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"strict"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"outDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./dist"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h4 id="16-advanced-decorator-usage">16. <strong>Advanced Decorator Usage</strong></h4>

<p>For frameworks like Angular, decorators play an essential role in metadata reflection. This enables functionality such as dependency injection.</p>

<p>Example: An Angular-style decorator for a class:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Injectable</span><span class="p">(</span><span class="nx">target</span><span class="p">:</span> <span class="nb">Function</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Injectable: </span><span class="p">${</span><span class="nx">target</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>

<span class="p">@</span><span class="nd">Injectable</span>
<span class="kd">class</span> <span class="nx">MyService</span> <span class="p">{}</span>
</code></pre></div></div>

<h5 id="key-use-cases-for-advanced-topics"><strong>Key Use Cases for Advanced Topics</strong></h5>

<p>Advanced TypeScript concepts often come into play when building:</p>

<ul>
  <li>Frameworks or libraries.</li>
  <li>Complex type-safe APIs.</li>
  <li>Enterprise-level projects requiring strict type safety.</li>
  <li>Integration with JavaScript libraries using type declarations.</li>
</ul>]]></content><author><name>Anusree Anilkumar</name></author><category term="typescript" /><summary type="html"><![CDATA[To study basic and advanced typescript]]></summary></entry><entry><title type="html">Jekyll Github Pages Website</title><link href="https://anusree6154s.github.io/documentation/jekyll-github-pages-website" rel="alternate" type="text/html" title="Jekyll Github Pages Website" /><published>2025-01-18T00:00:00+00:00</published><updated>2025-01-18T00:00:00+00:00</updated><id>https://anusree6154s.github.io/documentation/jekyll-github-pages-website</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/jekyll-github-pages-website"><![CDATA[<p>This is my personal guide related to all about making github pages with and without jekyll.</p>

<p><br /></p>

<h3 id="1-github-pages-website-without-jekyll--only-markdown-files">1. Github pages website (without jekyll + only markdown files)</h3>

<ul>
  <li><strong>Reference Repo</strong>: <a href="https://github.com/Anusree6154s/github-pages-website-demo-1">this</a></li>
  <li><strong>Reference Website:</strong> <a href="https://anusree6154s.github.io/github-pages-website-demo-1/">this</a></li>
  <li>It contains no themes, no extra github pages features, etc. Just the simplest form of github pages website.</li>
  <li><strong>Process:</strong>
    <ol>
      <li>Initialise a repo</li>
      <li>Add a readme and any other markdown files that you want to put.</li>
      <li>Go to settings tab of repo, pages sections, these choose main branch and root directory. In sometime the website url will apear in the current page (just reload after a while)</li>
    </ol>
  </li>
  <li><strong>Features:</strong>
    <ol>
      <li>Allows normal features of markdown files: links, markdown syntax etc</li>
      <li>No themes, automatic navbar, etc</li>
    </ol>
  </li>
</ul>

<p><br /></p>

<h3 id="2-github-pages-website-with-jekyll-theme--only-markdown-files">2. Github pages website (with jekyll theme + only markdown files)</h3>

<ul>
  <li><strong>Reference Repo:</strong> <a href="https://github.com/Anusree6154s/github-pages-website-demo-2">this</a></li>
  <li><strong>Reference Website:</strong> <a href="https://anusree6154s.github.io/github-pages-website-demo-2/">this</a></li>
  <li><strong>Process:</strong>
    <ol>
      <li>Steps 1 to 3 same as <a href="#1-github-pages-website-without-jekyll-only-markdown-files">above</a></li>
      <li>Add a _config.yml file which contains a theme <a href="https://pages.github.com/themes/">supported by github</a> and other configuration respective to that theme provide its repo.</li>
    </ol>
  </li>
  <li><strong>Features:</strong>
    <ol>
      <li>Allows normal features of markdown files: links, markdown syntax etc</li>
      <li>Github supported themes and any features respective to that theme alone (no custom configurations outside of what that theme can provide)</li>
    </ol>
  </li>
</ul>

<p><br /></p>

<h3 id="3-autogenerated-github-pages-website--with-jekyll-theme--markdown--html-files">3. Autogenerated Github pages website ( with jekyll theme + markdown + html files)</h3>

<ul>
  <li><strong>Reference Repo:</strong> <a href="https://github.com/Anusree6154s/github-pages-website-demo-3">this</a></li>
  <li><strong>Reference Website:</strong> <a href="https://anusree6154s.github.io/github-pages-website-demo-3/">this</a></li>
  <li><strong>Pre-requisites:</strong>
    <ul>
      <li>Ruby installed (For windows - https://rubyinstaller.org/downloads/), the one with devkit</li>
      <li>Jekyll and bundler installed - <code class="language-plaintext highlighter-rouge">gem install jekyll bundler</code></li>
    </ul>
  </li>
  <li><strong>Process:</strong>
    <ul>
      <li>Creating webpage: run <code class="language-plaintext highlighter-rouge">jekyll new my-site</code></li>
      <li>Running webpage locally: run <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code></li>
      <li>Running webpage with github: push to repo and setup github pages via settings (as point 3 in <a href="#1-github-pages-website-without-jekyll-only-markdown-files">here</a>)</li>
    </ul>
  </li>
  <li><strong>Features:</strong>
    <ol>
      <li>Neccessary markdown and html files, Gemfile with predefined gems, _config.yml with preset configurations and theme.</li>
      <li>Just have to add more markdown files into _posts folder to add more posts to the website. Everything else is autogenerated</li>
    </ol>
  </li>
</ul>

<p><br /></p>

<h3 id="4-github-pages-website-from-scratch-with-jekyll---markdown--html-files--github-pages-workflows">4. Github pages website from scratch (with jekyll +  markdown + html files + github pages workflows)</h3>
<ul>
  <li><strong>Reference Repo:</strong> <a href="https://github.com/Anusree6154s/github-pages-website-demo-4">this</a></li>
  <li><strong>Reference Website:</strong> <a href="https://anusree6154s.github.io/github-pages-website-demo-4/">this</a></li>
  <li><strong>Pre-requisites:</strong>
    <ul>
      <li>Ruby installed (For windows - <a href="https://rubyinstaller.org/downloads/">https://rubyinstaller.org/downloads/</a>), the one with devkit</li>
      <li>jekyll and bundler installed - <code class="language-plaintext highlighter-rouge">gem install jekyll bundler</code></li>
    </ul>
  </li>
  <li><strong>Process:</strong>
    <ul>
      <li><strong>Create a <code class="language-plaintext highlighter-rouge">_config.yml</code></strong>
        <ul>
          <li>For properties, visit <a href="https://json.schemastore.org/jekyll.json">https://json.schemastore.org/jekyll.json</a>. In that go to the key called properties and under it every key is a possible property that can be added to the config file.</li>
          <li>For default properties specific to any particular theme or website template, visit that template and read its documentation or code base to identiy what variables are used in its code.</li>
          <li>Finding variables :</li>
          <li><img src="https://github.com/user-attachments/assets/04612ac5-0aba-45f2-8b2e-fdea9d482f74" width="400" /></li>
          <li><img src="https://github.com/user-attachments/assets/045f61eb-3b55-407a-9ace-a021514d1913" width="400" /></li>
          <li>We will be using architect theme from <a href="https://github.com/pages-themes/architect">https://github.com/pages-themes/architect</a>. I’ll just go ahead and copy info from its <code class="language-plaintext highlighter-rouge">_config.yml</code></li>
        </ul>
      </li>
      <li><strong>Create a file called <code class="language-plaintext highlighter-rouge">Gemfile</code></strong>
        <ul>
          <li>Its like package.json but for ruby. It contains gems (packages for installation)</li>
          <li>In it add necessary gems for jekyll, and those related to the respective theme/template. (<a href="https://github.com/Anusree6154s/github-pages-website-demo-4/blob/main/Gemfile">example</a>)</li>
          <li>Bundle the gemfile by running <code class="language-plaintext highlighter-rouge">bundle install</code> or just <code class="language-plaintext highlighter-rouge">bundle</code></li>
        </ul>
      </li>
      <li><strong>Create a file called <code class="language-plaintext highlighter-rouge">.gitignore</code></strong> specific to jekyll, automatically by running <code class="language-plaintext highlighter-rouge">npx gitignore jekyll</code></li>
      <li><strong>Adding files</strong>:
        <ul>
          <li>Add a readme file that acts a starting point</li>
          <li>Add additonal <a href="https://jekyllrb.com/docs/front-matter/">frontmatter</a> to any post or page that you make. (<a href="https://github.com/Anusree6154s/github-pages-website-demo-4/blob/main/first-default-page.md?plain=1">example</a>)</li>
          <li>Add custom markdown pages [optional]. (<a href="https://github.com/Anusree6154s/github-pages-website-demo-4/blob/main/first-simple-page.md">example</a>)</li>
          <li>Add custom html pages [optional]. (<a href="https://github.com/Anusree6154s/github-pages-website-demo-4/blob/main/_layouts/default.html">example</a>)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Running:</strong>
    <ul>
      <li>Running webpage locally: run <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code></li>
      <li>Running webpage with github: push to repo and setup github pages via settings</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="5-github-pages-website-from-scratch-with-jekyll--markdown--html-files--custom-github-workflows">5. Github pages website from scratch (with jekyll + markdown + html files + custom github workflows)</h3>
<ul>
  <li><strong>Reference Repo:</strong> <a href="https://github.com/Anusree6154s/documentation">this</a></li>
  <li><strong>Reference Website:</strong> <a href="https://anusree6154s.github.io/documentation/">This current blog website</a></li>
  <li><strong>Process:</strong>
    <ul>
      <li>Every thing same as <a href="#4-github-pages-website-from-scratch-with-jekyll---markdown--html-files--github-pages-workflows">4</a>, but we will build our own workflow.</li>
      <li>This is required when we make any changes in jekyll core code, because github-pages gem do not consider any changes that is made in jekyll core code. So we make our own github workflow.</li>
    </ul>
  </li>
  <li>Github Workflow:
    <ul>
      <li>Add a folder named <code class="language-plaintext highlighter-rouge">.github</code>, within which you add another folder <code class="language-plaintext highlighter-rouge">workflows</code>, within which you add a file named <code class="language-plaintext highlighter-rouge">jekyll.yml</code></li>
      <li>In that file you add the following <a href="https://github.com/Anusree6154s/documentation/blob/main/.github/workflows/jekyll.yml">code</a></li>
    </ul>
  </li>
  <li><strong>Running:</strong>
    <ul>
      <li>Same as <a href="#4-github-pages-website-from-scratch-with-jekyll---markdown--html-files--github-pages-workflows">4</a></li>
      <li>Running webpage locally: run <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code></li>
      <li>Running webpage with github: push to repo and setup github pages via settings</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="-additional-notes">◈ Additional Notes:</h3>

<ul>
  <li>List of starter file of some simple and pretty github pages websites:
    <ul>
      <li><a href="https://github.com/cotes2020/chirpy-starter">https://github.com/cotes2020/chirpy-starter</a></li>
      <li><a href="https://github.com/jekyll/minima/tree/v2.5.2">https://github.com/jekyll/minima/tree/v2.5.2</a></li>
      <li><a href="https://github.com/jsanz/gh-pages-minima-starter">https://github.com/jsanz/gh-pages-minima-starter</a></li>
      <li><a href="https://github.com/alshedivat/al-folio">https://github.com/alshedivat/al-folio</a></li>
    </ul>
  </li>
  <li>Some other references for github pages website setup:
    <ul>
      <li><a href="https://github.com/jekyll/jekyll/blob/master/lib/site_template/_config.yml">https://github.com/jekyll/jekyll/blob/master/lib/site_template/_config.yml</a></li>
      <li><a href="https://opensource.com/article/21/11/jekyll-config-files">https://opensource.com/article/21/11/jekyll-config-files</a></li>
      <li><a href="https://nainagurung.medium.com/publish-github-pages-using-jekyll-369a8e2800b7">https://nainagurung.medium.com/publish-github-pages-using-jekyll-369a8e2800b7</a></li>
    </ul>
  </li>
</ul>]]></content><author><name>Anusree Anilkumar</name></author><category term="jekyll" /><category term="ruby" /><category term="scss" /><category term="markdown" /><summary type="html"><![CDATA[This is my personal guide related to all about making github pages with and without jekyll. 1. Github pages website (without jekyll + only markdown files) Reference Repo: this Reference Website: this It contains no themes, no extra github pages features, etc. Just the simplest form of github pages website. Process: Initialise a repo Add a readme and any other markdown files that you want to put. Go to settings tab of repo, pages sections, these choose main branch and root directory. In sometime the website url will apear in the current page (just reload after a while) Features: Allows normal features of markdown files: links, markdown syntax etc No themes, automatic navbar, etc 2. Github pages website (with jekyll theme + only markdown files) Reference Repo: this Reference Website: this Process: Steps 1 to 3 same as above Add a _config.yml file which contains a theme supported by github and other configuration respective to that theme provide its repo. Features: Allows normal features of markdown files: links, markdown syntax etc Github supported themes and any features respective to that theme alone (no custom configurations outside of what that theme can provide) 3. Autogenerated Github pages website ( with jekyll theme + markdown + html files) Reference Repo: this Reference Website: this Pre-requisites: Ruby installed (For windows - https://rubyinstaller.org/downloads/), the one with devkit Jekyll and bundler installed - gem install jekyll bundler Process: Creating webpage: run jekyll new my-site Running webpage locally: run bundle exec jekyll serve Running webpage with github: push to repo and setup github pages via settings (as point 3 in here) Features: Neccessary markdown and html files, Gemfile with predefined gems, _config.yml with preset configurations and theme. Just have to add more markdown files into _posts folder to add more posts to the website. Everything else is autogenerated 4. Github pages website from scratch (with jekyll + markdown + html files + github pages workflows) Reference Repo: this Reference Website: this Pre-requisites: Ruby installed (For windows - https://rubyinstaller.org/downloads/), the one with devkit jekyll and bundler installed - gem install jekyll bundler Process: Create a _config.yml For properties, visit https://json.schemastore.org/jekyll.json. In that go to the key called properties and under it every key is a possible property that can be added to the config file. For default properties specific to any particular theme or website template, visit that template and read its documentation or code base to identiy what variables are used in its code. Finding variables : We will be using architect theme from https://github.com/pages-themes/architect. I’ll just go ahead and copy info from its _config.yml Create a file called Gemfile Its like package.json but for ruby. It contains gems (packages for installation) In it add necessary gems for jekyll, and those related to the respective theme/template. (example) Bundle the gemfile by running bundle install or just bundle Create a file called .gitignore specific to jekyll, automatically by running npx gitignore jekyll Adding files: Add a readme file that acts a starting point Add additonal frontmatter to any post or page that you make. (example) Add custom markdown pages [optional]. (example) Add custom html pages [optional]. (example) Running: Running webpage locally: run bundle exec jekyll serve Running webpage with github: push to repo and setup github pages via settings 5. Github pages website from scratch (with jekyll + markdown + html files + custom github workflows) Reference Repo: this Reference Website: This current blog website Process: Every thing same as 4, but we will build our own workflow. This is required when we make any changes in jekyll core code, because github-pages gem do not consider any changes that is made in jekyll core code. So we make our own github workflow. Github Workflow: Add a folder named .github, within which you add another folder workflows, within which you add a file named jekyll.yml In that file you add the following code Running: Same as 4 Running webpage locally: run bundle exec jekyll serve Running webpage with github: push to repo and setup github pages via settings ◈ Additional Notes: List of starter file of some simple and pretty github pages websites: https://github.com/cotes2020/chirpy-starter https://github.com/jekyll/minima/tree/v2.5.2 https://github.com/jsanz/gh-pages-minima-starter https://github.com/alshedivat/al-folio Some other references for github pages website setup: https://github.com/jekyll/jekyll/blob/master/lib/site_template/_config.yml https://opensource.com/article/21/11/jekyll-config-files https://nainagurung.medium.com/publish-github-pages-using-jekyll-369a8e2800b7]]></summary></entry><entry><title type="html">Claude AI Code for Nodemailer</title><link href="https://anusree6154s.github.io/documentation/claudeai-code" rel="alternate" type="text/html" title="Claude AI Code for Nodemailer" /><published>2025-01-09T00:00:00+00:00</published><updated>2025-01-09T00:00:00+00:00</updated><id>https://anusree6154s.github.io/documentation/claudeai-code</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/claudeai-code"><![CDATA[<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">express</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">google</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">googleapis</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">OAuth2Client</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">google-auth-library</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">nodemailer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">nodemailer</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Mail</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">nodemailer/lib/mailer</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">SMTPTransport</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">nodemailer/lib/smtp-transport</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
  <span class="nx">google_client_id</span><span class="p">,</span>
  <span class="nx">google_client_secret</span><span class="p">,</span>
  <span class="nx">google_refresh_token</span><span class="p">,</span>
  <span class="nx">senders_gmail</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../config/constants</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>

<span class="kr">interface</span> <span class="nx">OTPRequest</span> <span class="p">{</span>
  <span class="nl">email</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">createTransporter</span> <span class="o">=</span> <span class="k">async</span> <span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">nodemailer</span><span class="p">.</span><span class="nx">Transporter</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">oauth2Client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OAuth2Client</span><span class="p">(</span>
      <span class="nx">google_client_id</span><span class="p">,</span>
      <span class="nx">google_client_secret</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">https://developers.google.com/oauthplayground</span><span class="dl">"</span>
    <span class="p">);</span>

    <span class="nx">oauth2Client</span><span class="p">.</span><span class="nx">setCredentials</span><span class="p">({</span>
      <span class="na">refresh_token</span><span class="p">:</span> <span class="nx">google_refresh_token</span><span class="p">,</span>
    <span class="p">});</span>

    <span class="kd">const</span> <span class="nx">accessToken</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">oauth2Client</span><span class="p">.</span><span class="nx">getAccessToken</span><span class="p">();</span>

    <span class="c1">// Properly type the SMTP transport options</span>
    <span class="kd">const</span> <span class="na">transportOptions</span><span class="p">:</span> <span class="nx">SMTPTransport</span><span class="p">.</span><span class="nx">Options</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">host</span><span class="p">:</span> <span class="dl">'</span><span class="s1">smtp.gmail.com</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">port</span><span class="p">:</span> <span class="mi">465</span><span class="p">,</span>
      <span class="na">secure</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">auth</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">OAuth2</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">user</span><span class="p">:</span> <span class="nx">senders_gmail</span><span class="p">,</span>
        <span class="na">clientId</span><span class="p">:</span> <span class="nx">google_client_id</span><span class="p">,</span>
        <span class="na">clientSecret</span><span class="p">:</span> <span class="nx">google_client_secret</span><span class="p">,</span>
        <span class="na">refreshToken</span><span class="p">:</span> <span class="nx">google_refresh_token</span><span class="p">,</span>
        <span class="na">accessToken</span><span class="p">:</span> <span class="nx">accessToken</span><span class="p">.</span><span class="nx">token</span> <span class="o">||</span> <span class="kc">undefined</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">};</span>

    <span class="kd">const</span> <span class="nx">transporter</span> <span class="o">=</span> <span class="nx">nodemailer</span><span class="p">.</span><span class="nx">createTransport</span><span class="p">(</span><span class="nx">transportOptions</span><span class="p">);</span>

    <span class="c1">// Verify transporter configuration</span>
    <span class="k">await</span> <span class="nx">transporter</span><span class="p">.</span><span class="nx">verify</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">transporter</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Error creating transporter:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Failed to create email transporter</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nx">sendEmail</span><span class="p">(</span><span class="nx">to</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">otp</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">transporter</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createTransporter</span><span class="p">();</span>
    
    <span class="kd">const</span> <span class="na">mailOptions</span><span class="p">:</span> <span class="nx">Mail</span><span class="p">.</span><span class="nx">Options</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">from</span><span class="p">:</span> <span class="s2">`"Auth Service" &lt;</span><span class="p">${</span><span class="nx">senders_gmail</span><span class="p">}</span><span class="s2">&gt;`</span><span class="p">,</span>
      <span class="nx">to</span><span class="p">,</span>
      <span class="na">subject</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Passwordless Authentication OTP</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">text</span><span class="p">:</span> <span class="s2">`Your OTP for authentication is: </span><span class="p">${</span><span class="nx">otp</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span>
      <span class="na">html</span><span class="p">:</span> <span class="s2">`
        &lt;h2&gt;Authentication OTP&lt;/h2&gt;
        &lt;p&gt;Use the following OTP to log in:&lt;/p&gt;
        &lt;h3 style="color: #4CAF50; font-size: 24px;"&gt;</span><span class="p">${</span><span class="nx">otp</span><span class="p">}</span><span class="s2">&lt;/h3&gt;
        &lt;p&gt;This OTP will expire in 10 minutes.&lt;/p&gt;
        &lt;p&gt;If you didn't request this OTP, please ignore this email.&lt;/p&gt;
      `</span><span class="p">,</span>
    <span class="p">};</span>

    <span class="k">await</span> <span class="nx">transporter</span><span class="p">.</span><span class="nx">sendMail</span><span class="p">(</span><span class="nx">mailOptions</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Error sending email:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Failed to send email</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/sendOTP</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">:</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Request</span><span class="o">&lt;</span><span class="p">{},</span> <span class="p">{},</span> <span class="nx">OTPRequest</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">res</span><span class="p">:</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">email</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">email</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> 
        <span class="na">error</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Email is required</span><span class="dl">"</span> 
      <span class="p">});</span>
    <span class="p">}</span>

    <span class="c1">// Validate email format</span>
    <span class="kd">const</span> <span class="nx">emailRegex</span> <span class="o">=</span> <span class="sr">/^</span><span class="se">[^\s</span><span class="sr">@</span><span class="se">]</span><span class="sr">+@</span><span class="se">[^\s</span><span class="sr">@</span><span class="se">]</span><span class="sr">+</span><span class="se">\.[^\s</span><span class="sr">@</span><span class="se">]</span><span class="sr">+$/</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">emailRegex</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">email</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> 
        <span class="na">error</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Invalid email format</span><span class="dl">"</span> 
      <span class="p">});</span>
    <span class="p">}</span>

    <span class="kd">const</span> <span class="nx">otp</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="mi">100000</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">900000</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span>
    
    <span class="c1">// Send email</span>
    <span class="k">await</span> <span class="nx">sendEmail</span><span class="p">(</span><span class="nx">email</span><span class="p">,</span> <span class="nx">otp</span><span class="p">);</span>

    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> 
      <span class="na">success</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">OTP sent successfully</span><span class="dl">"</span> 
    <span class="p">});</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Error in /sendOTP:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> 
      <span class="na">error</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Failed to send OTP</span><span class="dl">"</span> 
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">router</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name>Anusree Anilkumar</name></author><category term="jwt" /><category term="oauth2" /><category term="typescript" /><category term="nextjs" /><category term="oidc" /><category term="passwordless-authentication" /><summary type="html"><![CDATA[import express from "express"; import { google } from "googleapis"; import { OAuth2Client } from "google-auth-library"; import nodemailer from "nodemailer"; import Mail from "nodemailer/lib/mailer"; import SMTPTransport from "nodemailer/lib/smtp-transport"; import { google_client_id, google_client_secret, google_refresh_token, senders_gmail, } from "../config/constants"; const router = express.Router(); interface OTPRequest { email: string; } const createTransporter = async (): Promise&lt;nodemailer.Transporter&gt; =&gt; { try { const oauth2Client = new OAuth2Client( google_client_id, google_client_secret, "https://developers.google.com/oauthplayground" ); oauth2Client.setCredentials({ refresh_token: google_refresh_token, }); const accessToken = await oauth2Client.getAccessToken(); // Properly type the SMTP transport options const transportOptions: SMTPTransport.Options = { host: 'smtp.gmail.com', port: 465, secure: true, auth: { type: "OAuth2", user: senders_gmail, clientId: google_client_id, clientSecret: google_client_secret, refreshToken: google_refresh_token, accessToken: accessToken.token || undefined, }, }; const transporter = nodemailer.createTransport(transportOptions); // Verify transporter configuration await transporter.verify(); return transporter; } catch (error) { console.error("Error creating transporter:", error); throw new Error("Failed to create email transporter"); } } async function sendEmail(to: string, otp: string): Promise&lt;void&gt; { try { const transporter = await createTransporter(); const mailOptions: Mail.Options = { from: `"Auth Service" &lt;${senders_gmail}&gt;`, to, subject: "Passwordless Authentication OTP", text: `Your OTP for authentication is: ${otp}`, html: ` &lt;h2&gt;Authentication OTP&lt;/h2&gt; &lt;p&gt;Use the following OTP to log in:&lt;/p&gt; &lt;h3 style="color: #4CAF50; font-size: 24px;"&gt;${otp}&lt;/h3&gt; &lt;p&gt;This OTP will expire in 10 minutes.&lt;/p&gt; &lt;p&gt;If you didn't request this OTP, please ignore this email.&lt;/p&gt; `, }; await transporter.sendMail(mailOptions); } catch (error) { console.error("Error sending email:", error); throw new Error("Failed to send email"); } } router.post("/sendOTP", async (req: express.Request&lt;{}, {}, OTPRequest&gt;, res: express.Response) =&gt; { try { const { email } = req.body; if (!email) { return res.status(400).json({ error: "Email is required" }); } // Validate email format const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; if (!emailRegex.test(email)) { return res.status(400).json({ error: "Invalid email format" }); } const otp = Math.floor(100000 + Math.random() * 900000).toString(); // Send email await sendEmail(email, otp); res.status(200).json({ success: true, message: "OTP sent successfully" }); } catch (error) { console.error("Error in /sendOTP:", error); res.status(500).json({ error: "Failed to send OTP" }); } }); export default router;]]></summary></entry><entry><title type="html">Gitignore Config for Certificates</title><link href="https://anusree6154s.github.io/documentation/gitignore-commands" rel="alternate" type="text/html" title="Gitignore Config for Certificates" /><published>2025-01-09T00:00:00+00:00</published><updated>2025-01-09T00:00:00+00:00</updated><id>https://anusree6154s.github.io/documentation/gitignore-commands</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/gitignore-commands"><![CDATA[<pre><code class="language-.gitignore"># config specific to the language or editor you use

# Ignore certificate and key files
*.key
*.crt
*.csr
*.pem
*.p12
*.der
*.srl

# Ignore any directory containing certs or keys
certs/
keys/
secrets/
</code></pre>]]></content><author><name>Anusree Anilkumar</name></author><category term="jwt" /><category term="oauth2" /><category term="typescript" /><category term="nextjs" /><category term="oidc" /><category term="passwordless-authentication" /><summary type="html"><![CDATA[# config specific to the language or editor you use # Ignore certificate and key files *.key *.crt *.csr *.pem *.p12 *.der *.srl # Ignore any directory containing certs or keys certs/ keys/ secrets/]]></summary></entry><entry><title type="html">OAuth/OIDC App Configurations</title><link href="https://anusree6154s.github.io/documentation/oauth-oidc" rel="alternate" type="text/html" title="OAuth/OIDC App Configurations" /><published>2025-01-09T00:00:00+00:00</published><updated>2025-01-09T00:00:00+00:00</updated><id>https://anusree6154s.github.io/documentation/oauth-oidc</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/oauth-oidc"><![CDATA[<h1 id="oauthoidc-app-configurations">OAuth/OIDC App Configurations</h1>

<h3 id="table-of-contents">Table of Contents</h3>
<ol>
  <li><a href="#oauth-configuration">OAuth config</a>
    <ol>
      <li><a href="#google-oauth">Google</a></li>
      <li><a href="#facebook">Facebook</a></li>
      <li><a href="#twitter">Twitter</a></li>
      <li><a href="#github">Github</a></li>
    </ol>
  </li>
  <li><a href="#oidc-configuration">OIDC config</a>
    <ol>
      <li><a href="#google-oidc">Google</a></li>
    </ol>
  </li>
</ol>

<h2 id="oauth-configuration">OAuth Configuration</h2>

<h3 id="google-oauth">Google OAuth</h3>
<ol>
  <li>visit https://console.cloud.google.com/
    <ul>
      <li><img width="400" alt="image" src="https://github.com/user-attachments/assets/f4118bef-c176-47af-9dfe-1d70f8672e2f" /></li>
    </ul>
  </li>
  <li>add project/choose project
    <ul>
      <li>add project
        <ul>
          <li><img width="300" alt="image" src="https://github.com/user-attachments/assets/5bdb6739-ad8f-4986-b13e-b882ddcc19a5" /></li>
          <li><img width="400" alt="image" src="https://github.com/user-attachments/assets/3e3741c1-a5ae-4fd7-a93e-5d8b5a1dc878" /></li>
          <li><img width="400" alt="image" src="https://github.com/user-attachments/assets/6c3f61ca-55f3-49bb-8123-5c70caaecbb3" /></li>
          <li>fill oauth consent screen. keep setting same in all. just change names wherever neccessary. fill those place that are filled
            <ul>
              <li><img width="300" alt="image" src="https://github.com/user-attachments/assets/92473ec7-6e6c-40e0-a094-9ed377d260d1" /></li>
              <li><img width="400" alt="image" src="https://github.com/user-attachments/assets/cb4d8375-c38a-4ee8-bcca-312678d37d26" /></li>
              <li><img width="400" alt="image" src="https://github.com/user-attachments/assets/c7653316-4e71-412c-a029-bec9c0fc12f2" /></li>
            </ul>
          </li>
        </ul>
      </li>
      <li>or choose project</li>
      <li><img width="400" alt="image" src="https://github.com/user-attachments/assets/999366b0-f8fb-4fec-995b-2aad27529eee" /></li>
    </ul>
  </li>
  <li>add credentials
    <ul>
      <li><img width="200" alt="image" src="https://github.com/user-attachments/assets/acf3044d-2c89-41e9-b2b2-b223ee0e0602" /></li>
      <li><img width="400" alt="image" src="https://github.com/user-attachments/assets/acbe9869-2959-4847-b10d-d6fd2506f34b" /></li>
      <li>getting google api key for apps like nodemailer
        <ul>
          <li><img width="400" alt="image" src="https://github.com/user-attachments/assets/48996fca-30f0-4f64-a6df-36d934e57517" /></li>
          <li><img width="400" alt="image" src="https://github.com/user-attachments/assets/a6a7037f-3b20-4191-a319-5ce0b408ebe1" /></li>
        </ul>
      </li>
      <li>getting google cient id and secret for oauth
        <ul>
          <li><img width="500" alt="image" src="https://github.com/user-attachments/assets/d6aa41a8-a35d-46a2-8f0e-98dff4632fab" /></li>
          <li><img width="500" alt="image" src="https://github.com/user-attachments/assets/ee9a6e10-18cd-4364-9c67-4d7817aa606b" /></li>
          <li><img width="500" alt="image" src="https://github.com/user-attachments/assets/ae7f9b61-8621-4b15-acb4-feffba10d8d5" /></li>
          <li><img width="300" alt="image" src="https://github.com/user-attachments/assets/9d355a62-decf-4fef-b312-f17e2ab23f52" /></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>adding redirect uris and source url (needs to be changed each time you change hostname or create a new deployment url)
    <ul>
      <li><img width="400" alt="image" src="https://github.com/user-attachments/assets/ed9bde68-6c83-4ca7-b319-ee38574acdd1" /></li>
    </ul>
  </li>
</ol>

<h3 id="facebook">Facebook</h3>
<ol>
  <li>visit facebook developer portal https://developers.facebook.com/
    <ul>
      <li><img width="600" alt="image" src="https://github.com/user-attachments/assets/1f69d3c0-2494-41b2-aac1-cee03118cacc" /></li>
    </ul>
  </li>
  <li>create a new app/choose existing app
    <ul>
      <li>create new app</li>
      <li><img width="600" alt="image" src="https://github.com/user-attachments/assets/c53caf90-f6a3-4de1-8e75-f93001b1d383" /></li>
      <li><img width="400" alt="image" src="https://github.com/user-attachments/assets/5067b56f-d3ca-4d12-9459-63bdf4d569fc" /></li>
      <li><img width="600" alt="image" src="https://github.com/user-attachments/assets/edc41216-1066-4ffc-9b71-2267b9e3a3e7" /></li>
      <li><img width="400" alt="image" src="https://github.com/user-attachments/assets/25cca23d-a911-492c-bf9c-3f745ac076ab" /></li>
      <li><img width="432" alt="image" src="https://github.com/user-attachments/assets/0f878b3d-02ba-4ba4-886a-fa99fea6b024" /></li>
      <li><img width="430" alt="image" src="https://github.com/user-attachments/assets/29d2c4b8-34fe-46be-906f-0ed3cf450124" /></li>
      <li><img width="212" alt="image" src="https://github.com/user-attachments/assets/c12339ef-5b45-4ba1-83b3-89734779f878" />
    - NOT COMPLETED BECAUSE I DONT KNO WHY BUT APP IS WORKING NO MATTER WHAT CHANGE I MAKE</li>
    </ul>
  </li>
</ol>

<h3 id="twitter">Twitter</h3>

<ul>
  <li><img width="600" alt="image" src="https://github.com/user-attachments/assets/596f9791-9eae-483f-9a14-9bc49391d99f" /></li>
  <li><img width="400" alt="image" src="https://github.com/user-attachments/assets/0c4c1cbe-4f9f-41ab-9a96-970c0dc387df" /></li>
  <li><img width="400" alt="image" src="https://github.com/user-attachments/assets/5ce047e0-42f1-4f88-af39-293615133007" /></li>
  <li><img width="300" alt="image" src="https://github.com/user-attachments/assets/d84544ad-4eab-4504-9f75-848b0170487d" /></li>
  <li><img width="300" alt="image" src="https://github.com/user-attachments/assets/67e867dd-327f-428c-8557-d19a1bb80a11" /></li>
  <li><img width="600" alt="image" src="https://github.com/user-attachments/assets/983f6cd8-4c62-405c-95c7-cb478324fc02" /></li>
  <li><img width="300" alt="image" src="https://github.com/user-attachments/assets/431f9c14-5afd-4220-8949-6646ae36d287" /></li>
  <li><img width="300" alt="image" src="https://github.com/user-attachments/assets/db41f022-39e3-465d-9d2b-edbeb8c95f0a" /></li>
  <li><img width="400" alt="image" src="https://github.com/user-attachments/assets/05e79721-938d-4de5-b447-4b7bdeb3257f" /></li>
  <li><img width="400" alt="image" src="https://github.com/user-attachments/assets/7fbe7571-a483-45c3-bf0c-1a3cc85e21f8" /></li>
</ul>

<h3 id="github">Github</h3>
<ul>
  <li><img width="300" alt="image" src="https://github.com/user-attachments/assets/c495dd2f-a80c-43c3-a068-9b78ebe820cc" /></li>
  <li><img width="200" alt="image" src="https://github.com/user-attachments/assets/33f8a77d-2ff0-47ff-bec8-eade05ce381c" /></li>
  <li><img width="200" alt="image" src="https://github.com/user-attachments/assets/d0a9920d-1cfc-4679-b5ce-80b9ec03e991" /></li>
  <li><img width="200" alt="image" src="https://github.com/user-attachments/assets/f9e08de4-3ad5-49ff-91be-8a1f95f77d4f" /></li>
  <li><img width="600" alt="image" src="https://github.com/user-attachments/assets/793ca42d-bef2-4e83-a504-cdedabbdc925" /></li>
  <li><img width="300" alt="image" src="https://github.com/user-attachments/assets/27169d01-91f2-4416-b8a5-221248a19d1e" /></li>
  <li><img width="600" alt="image" src="https://github.com/user-attachments/assets/28e7561b-7f06-4901-877b-dc1efe4ab58d" /></li>
  <li><img width="600" alt="image" src="https://github.com/user-attachments/assets/ccfc0e2f-3246-4ef2-bdd1-8a28cc6b196d" /></li>
</ul>

<h2 id="oidc-configuration">OIDC Configuration</h2>
<h3 id="google-oidc">Google OIDC</h3>
<ul>
  <li>follow all same steps as in <a href="#goggle-oauth">google oauth</a>, except the last step - just callback url is different
    <ul>
      <li><img width="400" alt="image" src="https://github.com/user-attachments/assets/1cbf5d6d-dc88-4aab-9a82-61e10ed305e6" /></li>
    </ul>
  </li>
</ul>]]></content><author><name>Anusree Anilkumar</name></author><category term="jwt" /><category term="oauth2" /><category term="typescript" /><category term="nextjs" /><category term="oidc" /><category term="passwordless-authentication" /><summary type="html"><![CDATA[OAuth/OIDC App Configurations Table of Contents OAuth config Google Facebook Twitter Github OIDC config Google OAuth Configuration Google OAuth visit https://console.cloud.google.com/ add project/choose project add project fill oauth consent screen. keep setting same in all. just change names wherever neccessary. fill those place that are filled or choose project add credentials getting google api key for apps like nodemailer getting google cient id and secret for oauth adding redirect uris and source url (needs to be changed each time you change hostname or create a new deployment url) Facebook visit facebook developer portal https://developers.facebook.com/ create a new app/choose existing app create new app - NOT COMPLETED BECAUSE I DONT KNO WHY BUT APP IS WORKING NO MATTER WHAT CHANGE I MAKE Twitter Github OIDC Configuration Google OIDC follow all same steps as in google oauth, except the last step - just callback url is different]]></summary></entry><entry><title type="html">OAuth Config Setup in Different Apps</title><link href="https://anusree6154s.github.io/documentation/oauth-config-setup" rel="alternate" type="text/html" title="OAuth Config Setup in Different Apps" /><published>2025-01-09T00:00:00+00:00</published><updated>2025-01-09T00:00:00+00:00</updated><id>https://anusree6154s.github.io/documentation/readme</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/oauth-config-setup"><![CDATA[<h1 id="auth-app">Auth App</h1>

<p>To study diff auth methods
<br /></p>

<video width="600" height="400" controls="">
  <source src="https://github.com/user-attachments/assets/04e7f79b-77b6-4382-9507-b08ee8cdb012" type="video/mp4" />
Your browser does not support the video tag.
</video>

<p><br /></p>

<h2 id="notes">Notes</h2>

<h3 id="table-of-contents">Table of Contents</h3>

<ol>
  <li><a href="#1-basic-auth">Basic Auth</a></li>
  <li><a href="#2-oauth">OAuth based auth</a></li>
  <li><a href="#3-jwt">JWT token based auth</a></li>
  <li><a href="#4-session-based">Session based auth</a></li>
  <li><a href="#5-passwordless">Passwordless auth</a></li>
  <li><a href="#6-openid-connect">Open ID Connect (OIDC) based auth</a></li>
  <li><a href="#7-mtls-mutual-transport-layer-security-not-implemented-completely-cause-of-minor-errors">mTLS based auth</a></li>
  <li><a href="#8-deployment">Deployment</a></li>
  <li><a href="#9-choice-of-techstack">Choice of Techstack</a></li>
</ol>

<p><br /></p>

<h3 id="1-basic-auth">1. Basic Auth</h3>

<ul>
  <li>Like Bearer Auth</li>
  <li>Using basic-auth library</li>
  <li>often accompanied by any other form of session/token storage to maintain session expiry</li>
</ul>

<p><br /></p>

<h3 id="2-oauth">2. Oauth</h3>

<ul>
  <li>uses passport-google-oauth20 etc</li>
  <li>that uses passport session to manage sessions</li>
  <li>passport session needs express session</li>
  <li>
    <p>express session can send cookies from backend to frontned (NEEDS TO BE STUDIED. NOT SURE)</p>

    <ul>
      <li>while using diff frontend andb backend hosts only if both have https</li>
      <li>only if frontend and baclemd are on same site(using nginx proxy or setting express.static())</li>
      <li><em>we are using express.static() method to access frontend files via backend</em> [in vanilla html]</li>
    </ul>
  </li>
  <li>
    <p>refer <a href="./oauth-oidc">this</a> for oauth apps url configurations</p>
  </li>
  <li><strong>Tips</strong>:
    <ul>
      <li>use <code class="language-plaintext highlighter-rouge">&lt;base href="http://localhost:8000"&gt;</code> in html head to avoid rewriting baseurl in html (while accessing frontend files via backend express.static()) [in case of vanilla html]</li>
      <li>use below in nextjs avoid rewriting baseurl
        <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="nx">rewrites</span><span class="p">()</span> <span class="p">{</span>
<span class="k">return</span> <span class="p">[</span>
    <span class="p">{</span>
    <span class="na">source</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/auth/:path*</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// Frontend route</span>
    <span class="na">destination</span><span class="p">:</span> <span class="dl">"</span><span class="s2">http://localhost:8000/auth/:path*</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// Backend route</span>
    <span class="p">},</span>
<span class="p">];</span>
<span class="p">},</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="3-jwt">3. JWT</h3>

<ul>
  <li><strong>Redis</strong> is particularly well-suited for token blacklisting token during logout due to its speed, simplicity, and built-in expiration features. Redis is designed for low-latency operations because it stores data in memory. This makes it significantly faster than traditional disk-based databases like MongoDB or SQL.</li>
  <li>created redis db using upstash</li>
</ul>

<p><br /></p>

<h3 id="4-session-based">4. Session based</h3>

<ul>
  <li>Plain session based auth</li>
  <li>It has already been used along with basic auth and oauth, but just t o study it in isolation</li>
</ul>

<p><br /></p>

<h3 id="5-passwordless">5. Passwordless</h3>

<ul>
  <li>Only for signup and signin. Verfication is through traditional jwt cookies/headers</li>
  <li>During signin we dont use password(only email). Instead would send an otp to email and verify its expiration. And then will send the token to frontend. (an extra step like 2 factor auth)</li>
  <li>For checking auth this token is sent via headers/stored in cookies each time for every route</li>
  <li>To set up modemailer follow the set mentioned here <a href="https://dev.to/chandrapantachhetri/sending-emails-securely-using-node-js-nodemailer-smtp-gmail-and-oauth2-g3a">https://dev.to/chandrapantachhetri/sending-emails-securely-using-node-js-nodemailer-smtp-gmail-and-oauth2-g3a </a> and code mentioned in claude ai code here <a href="./claudeai-code">claudeai-code.md</a></li>
</ul>

<p><br /></p>

<h3 id="6-openid-connect">6. OpenID Connect</h3>

<ul>
  <li>We used Google as the OpenID Provider (IdP) and passport-openidconnect to help set up openid</li>
</ul>

<p><br /></p>

<h3 id="7-mtls-mutual-transport-layer-security-not-implemented-completely-cause-of-minor-errors">7. mTLS (Mutual Transport Layer Security) (not implemented completely cause of minor errors)</h3>

<ul>
  <li><a href="https://github.com/edum-compassuol/mTLS-nodejs-example/blob/main/server/src/server.ts">https://github.com/edum-compassuol/mTLS-nodejs-example/blob/main/server/src/server.ts</a></li>
  <li>Mutual TLS (mTLS) authentication involves verifying both the client and server identities using TLS certificates.</li>
  <li>Includes 2 steps:
    <ol>
      <li>creating certficated for server &amp; client</li>
      <li>logging in after verifying the certificates (session is managed by header/cookies)</li>
    </ol>
  </li>
  <li>First You’ll need to create the following in a seperate folder called <code class="language-plaintext highlighter-rouge">cert</code> outside frotend or backend folder:
    <ul>
      <li>A CA certificate to sign client and server certificates.</li>
      <li>A server certificate and private key.</li>
      <li>A client certificate and private key.</li>
    </ul>
  </li>
  <li>Download ssl from <a href="https://slproweb.com/products/Win32OpenSSL.html">https://slproweb.com/products/Win32OpenSSL.html</a></li>
  <li>OpenSSL commands to create certificates in cert folder: <a href="./ssl-commands">ssl-commands.md</a></li>
  <li><strong>remember to add the folder cert/ and all the related certificate extensions as in <a href="./gitignore-commands">gitignore-commands.md</a> to gitignore before committing</strong></li>
  <li>If everything is configured correctly:
    <ul>
      <li>The server will verify the client certificate.</li>
      <li>The client will verify the server certificate.</li>
    </ul>
  </li>
  <li>Common Issues
    <ul>
      <li>Certificate Mismatch: Ensure the client and server - certificates are signed by the same CA.</li>
      <li>Incorrect Paths: Double-check the file paths for the keys and certificates.</li>
      <li>Firewall/Port Issues: Ensure port 8443 is open for communication.(convetionally use port 8443 for mTLS)</li>
    </ul>
  </li>
  <li>Used in Banks (e.g., JPMorgan Chase, Goldman Sachs), Payment Processors (e.g., Stripe, PayPal, Square), Cloud Providers (e.g., AWS, Microsoft Azure, Google Cloud), etc</li>
  <li>Working:
    <ul>
      <li>Browsers do not natively support mTLS directly due to security constraints. So we will use nextjs api to work with client certificates. (∴ cannot do directly within page.tsx)</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="8-deployment">8. Deployment</h3>

<ul>
  <li>Basic typescript nodejs deployment: <a href="https://youtu.be/4mqy5SjkDec?si=rFG2Wu8NYmq-8PjD">https://youtu.be/4mqy5SjkDec?si=rFG2Wu8NYmq-8PjD</a></li>
  <li>Durig deployment, there is this whole mess. Checkout all changes I’ve made so far, all the minor fix commits to get an idea.</li>
  <li>Express session does indeed not work with frontend and backend on diff servers.
    <ul>
      <li>During development it worked because the browser confused the host(localhost) of both port 8000 and 3000 as it is coming from same domain.</li>
      <li>Added diff frontend host url as below in .env file of react to change hostname and it stopped co-operating with express-session
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">HOST</span><span class="o">=</span>frontend.local
</code></pre></div>        </div>
      </li>
      <li>Therefore had to serve rthe frontend build folder from backend</li>
    </ul>
  </li>
  <li>Render is horrible at building and starting the server by itself for frontend as well as backend (as I’ve seen so far).
    <ul>
      <li>Therefore I’m building the build files in both frontend and backend before commiting and pushing the build folders to github</li>
      <li>In render I just start the backend server</li>
    </ul>
  </li>
  <li>Rememeber for OAuth authentication always need to update the redirect urls in case you plan to host the server in any other website.
    <ul>
      <li>Also update the env variables accordingly</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="9-choice-of-techstack">9. Choice of Techstack</h3>

<ul>
  <li>ReactJS because of not able to use express-session
    <ul>
      <li>NextSJ was the first choice in order to learn the techstack. But express-session was not letting me set cookies in frontend because of cross-origin. (couldnt find a simple solution in neither stackoverflow nor gpt)</li>
      <li>So now im serving react build files directly from server</li>
    </ul>
  </li>
</ul>]]></content><author><name>Anusree Anilkumar</name></author><category term="jwt" /><category term="oauth2" /><category term="typescript" /><category term="nextjs" /><category term="oidc" /><category term="passwordless-authentication" /><summary type="html"><![CDATA[To study diff auth methods]]></summary></entry><entry><title type="html">SSL Commands</title><link href="https://anusree6154s.github.io/documentation/ssl-commands" rel="alternate" type="text/html" title="SSL Commands" /><published>2025-01-09T00:00:00+00:00</published><updated>2025-01-09T00:00:00+00:00</updated><id>https://anusree6154s.github.io/documentation/ssl-commands</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/ssl-commands"><![CDATA[<p>Generate a CA certificate:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl genrsa <span class="nt">-out</span> ca.key 2048
openssl req <span class="nt">-x509</span> <span class="nt">-new</span> <span class="nt">-nodes</span> <span class="nt">-key</span> ca.key <span class="nt">-sha256</span> <span class="nt">-days</span> 365 <span class="nt">-out</span> ca.crt
</code></pre></div></div>

<p>Generate a server certificate:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl genrsa <span class="nt">-out</span> server.key 2048
openssl req <span class="nt">-new</span> <span class="nt">-key</span> server.key <span class="nt">-out</span> server.csr
openssl x509 <span class="nt">-req</span> <span class="nt">-in</span> server.csr <span class="nt">-CA</span> ca.crt <span class="nt">-CAkey</span> ca.key <span class="nt">-CAcreateserial</span> <span class="nt">-out</span> server.crt <span class="nt">-days</span> 365 <span class="nt">-sha256</span>
</code></pre></div></div>

<p>Generate a client certificate:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl genrsa <span class="nt">-out</span> client.key 2048
openssl req <span class="nt">-new</span> <span class="nt">-key</span> client.key <span class="nt">-out</span> client.csr
openssl x509 <span class="nt">-req</span> <span class="nt">-in</span> client.csr <span class="nt">-CA</span> ca.crt <span class="nt">-CAkey</span> ca.key <span class="nt">-CAcreateserial</span> <span class="nt">-out</span> client.crt
</code></pre></div></div>]]></content><author><name>Anusree Anilkumar</name></author><category term="jwt" /><category term="oauth2" /><category term="typescript" /><category term="nextjs" /><category term="oidc" /><category term="passwordless-authentication" /><summary type="html"><![CDATA[Generate a CA certificate: openssl genrsa -out ca.key 2048 openssl req -x509 -new -nodes -key ca.key -sha256 -days 365 -out ca.crt Generate a server certificate: openssl genrsa -out server.key 2048 openssl req -new -key server.key -out server.csr openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365 -sha256 Generate a client certificate: openssl genrsa -out client.key 2048 openssl req -new -key client.key -out client.csr openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out client.crt]]></summary></entry><entry><title type="html">API Documentation Tools</title><link href="https://anusree6154s.github.io/documentation/api-documentaion" rel="alternate" type="text/html" title="API Documentation Tools" /><published>2024-10-31T00:00:00+00:00</published><updated>2024-10-31T00:00:00+00:00</updated><id>https://anusree6154s.github.io/documentation/readme</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/api-documentaion"><![CDATA[<h2 id="api-documentaion-tools">Api Documentaion Tools</h2>

<p>Following are the api documentation tools that helps you create api docs in pretty websites.</p>

<h3 id="tools-that-can-be-used-tried-so-far">🔨Tools that can be used (Tried so far):</h3>

<ol>
  <li>Redocs : Free and Good UI</li>
  <li>Swagger: Free but little confusing UI</li>
  <li>Postman: Free but bland UI</li>
</ol>

<ul>
  <li>
    <h4 id="common-docs">Common Docs</h4>
    <ul>
      <li>
        <h5 id="redoc-and-swagger">Redoc and Swagger</h5>
        <ul>
          <li>swagger(openapi) specification docs: https://swagger.io/specification/</li>
          <li>example swagger(openapi) yaml code: https://github.com/Redocly/redoc/blob/main/demo/openapi-3-1.yaml</li>
          <li>example swagger(openapi) json code: https://github.com/Redocly/redoc/blob/main/demo/big-openapi.json</li>
          <li>exmaple website github: https://github.com/Redocly/redoc/blob/main/demo/museum.yaml</li>
          <li>example website: https://redocly.github.io/redoc/</li>
          <li>my own repo: https://github.com/Anusree6154s/qkart-backend-2</li>
        </ul>
      </li>
      <li>
        <h5 id="postman">Postman</h5>
        <ul>
          <li>example api doc: https://www.postman.com/lunar-module-geoscientist-23775876/xflix-backend-api/collection/6wogu2r/xflix?action=share&amp;creator=33572999</li>
          <li>above example is intuitive. follow it for other postman docs</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <h4 id="how-to-create-documentaion-right-from-the-server">How to create documentaion right from the server</h4>

    <ul>
      <li>
        <h5 id="redoc">Redoc</h5>

        <details>
  <summary>
    <strong>Using CDN</strong>
  </summary>

- In app.js
  ```js
  const express = require("express");
  const app = express();
  const PORT=8082 // put your port here
  app.use((req, res, next) =&gt; {
      // Set Content Security Policy for running redocly via cdn
      res.header("Content-Security-Policy", " script-src-elem 'self' https://cdn.redoc.ly;");
      next();
  app.get('/swagger.json', (req, res) =&gt; {
      // will be called when spec-url='/swagger.json' executes in docs.html
      res.sendFile(path.join(__dirname, '/documentation/swagger.json'));
  });
  app.use('/docs', (req, res) =&gt; {
      // will be called when this route will be accessed (http://localhost:PORT/docs)
      res.sendFile(path.join(__dirname, 'html-docs.html'));
  });
  app.listen(PORT)
  ```
  - Make a file named swagger.js or openapi.js. In that file create a yaml or json content by referring to these docs:
  - https://swagger.io/specification/
  - https://github.com/Redocly/redoc/blob/main/demo/openapi-3-1.yaml
  - https://github.com/Redocly/redoc/blob/main/demo/big-openapi.json
  - Create a docs.html and copy the code below:
  ```html
  &lt;!DOCTYPE html&gt;
  <html>
    <head>
      <title>API Documentation</title>
    </head>
    <body>
      <redoc spec-url="/swagger.json" suppress-warnings=""></redoc>
      <script src="https://cdn.redoc.ly/redoc/latest/bundles/redoc.standalone.js"></script>
    </body>
  </html>
  ```
  - Run `node app.js` in terminal. Api documentation will be live on url `http://localhost:8082/docs`

</details>
        <details>
  <summary>
    <strong>Using NPM package</strong>
  </summary>

- create swagger.js or openapi.js using above mentioned files
- In app.js
  ```js
  const express = require("express");
  const app = express();
  const PORT = 8082;
  app.use("/docs", (req, res) =&gt; {
    // will be called when this route will be accessed (http://localhost:PORT/docs)
    res.sendFile(path.join(__dirname, "docs.html"));
  });
  app.listen(PORT);
  ```
- in terminal run `npx @redocly/cli build-docs swagger.json --output docs.html` , then `node app.js`.
- Api documentation will be live on url `http://localhost:8082/docs`

</details>
      </li>
    </ul>
  </li>
  <li>
    <h5 id="swagger">Swagger</h5>
    <ul>
      <li>
        <h6 id="using-npm-package">using npm package</h6>
        <ul>
          <li>in app.js
            <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="mi">8082</span><span class="p">;</span> <span class="c1">// put your port here</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/swagger.json</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// will be called when spec-url='/swagger.json' executes in docs.html</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">sendFile</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">"</span><span class="s2">/documentation/swagger.json</span><span class="dl">"</span><span class="p">));</span>
<span class="p">});</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">"</span><span class="s2">/docs</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// will be called when this route will be accessed (http://localhost:PORT/docs)</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">sendFile</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">"</span><span class="s2">html-docs.html</span><span class="dl">"</span><span class="p">));</span>
<span class="p">});</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">);</span>
</code></pre></div>            </div>
          </li>
          <li>in swagger.json or openapi.json, write content referring to previous docs</li>
          <li>Api documentation will be live on url <code class="language-plaintext highlighter-rouge">http://localhost:8082/docs</code></li>
        </ul>
      </li>
      <li>
        <h6 id="using-cdn-dont-know-yet">using cdn: dont know yet</h6>
      </li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>[!NOTE] &gt; <strong>Tips while using redocly</strong><br /></p>

  <ol>
    <li><strong>authorization error</strong>: add that url into res.header in app.js<br /></li>
    <li><strong>error adding logo</strong>: add logo to your own repo, create a route for it, place that routed url in img src<br />
refer my own docs for eg: https://github.com/Anusree6154s/qkart-backend-2<br /></li>
  </ol>
</blockquote>

<hr />

<h3 id="-total-list-of-tools-from-gpt">📃 Total list of tools from gpt</h3>

<h4 id="1-postman">1. <strong>Postman</strong></h4>

<ul>
  <li><strong>Overview</strong>: Postman is widely used for API development and testing, but it also provides features to generate and host API documentation.</li>
  <li><strong>Key Features</strong>:
    <ul>
      <li>Auto-generate documentation from collections.</li>
      <li>Easy collaboration and sharing of documentation with team members.</li>
      <li>Can publish documentation online or integrate with CI/CD pipelines.</li>
    </ul>
  </li>
  <li><strong>Documentation Example</strong>: Postman allows you to document your API requests, responses, and workflows directly within your collections. You can then share the documentation via a public or private URL.</li>
  <li><strong>Website</strong>: <a href="https://learning.postman.com/docs/publishing-your-api/documenting-your-api/">Postman API Docs</a></li>
</ul>

<h4 id="2-redoc">2. <strong>Redoc</strong></h4>

<ul>
  <li><strong>Overview</strong>: Redoc is an open-source tool that renders OpenAPI (Swagger) specifications as rich and customizable HTML documentation.</li>
  <li><strong>Key Features</strong>:
    <ul>
      <li>Provides a clean and intuitive UI for API docs.</li>
      <li>Easy to integrate into existing applications.</li>
      <li>Supports OpenAPI 2.0 and 3.0.</li>
      <li>The appearance of the docs can be customized to fit your branding.</li>
    </ul>
  </li>
  <li><strong>Use Case</strong>: Often used as a standalone documentation renderer for OpenAPI specs.</li>
  <li><strong>Website</strong>: <a href="https://github.com/Redocly/redoc">Redoc</a></li>
</ul>

<h4 id="3-slate">3. <strong>Slate</strong></h4>

<ul>
  <li><strong>Overview</strong>: Slate is an open-source tool for generating beautiful, static API documentation.</li>
  <li><strong>Key Features</strong>:
    <ul>
      <li>Features three-pane design (navigation, request, and response sections).</li>
      <li>Static site generator — docs are hosted as simple static HTML.</li>
      <li>Markdown-based, so easy to write and maintain documentation.</li>
      <li>Good for read-only API docs.</li>
    </ul>
  </li>
  <li><strong>Use Case</strong>: Good for organizations that want static, easy-to-read documentation, and don’t need interactive API testing directly in the docs.</li>
  <li><strong>Website</strong>: <a href="https://github.com/slatedocs/slate">Slate</a></li>
</ul>

<h4 id="4-apiary">4. <strong>Apiary</strong></h4>

<ul>
  <li><strong>Overview</strong>: Apiary, now part of Oracle, is a platform for designing, documenting, and testing APIs.</li>
  <li><strong>Key Features</strong>:
    <ul>
      <li>Supports API Blueprint (a markdown-like language for describing APIs) and OpenAPI.</li>
      <li>Provides mock servers, documentation generation, and testing capabilities.</li>
      <li>Collaborative design features, letting teams work on API specs together.</li>
      <li>Hosted, so no need for infrastructure setup.</li>
    </ul>
  </li>
  <li><strong>Use Case</strong>: Useful for teams who want an all-in-one solution for API design, mockups, and documentation.</li>
  <li><strong>Website</strong>: <a href="https://apiary.io/">Apiary</a></li>
</ul>

<h4 id="5-rapidoc">5. <strong>RapiDoc</strong></h4>

<ul>
  <li><strong>Overview</strong>: RapiDoc is another OpenAPI renderer, like Redoc, that generates interactive and beautiful API documentation.</li>
  <li><strong>Key Features</strong>:
    <ul>
      <li>Fast and simple, optimized for performance.</li>
      <li>Allows real-time API request testing directly from the documentation.</li>
      <li>Fully customizable to match the branding of your application.</li>
    </ul>
  </li>
  <li><strong>Use Case</strong>: Great for users looking to customize their API documentation with real-time testing capabilities.</li>
  <li><strong>Website</strong>: <a href="https://mrin9.github.io/RapiDoc/">RapiDoc</a></li>
</ul>

<h4 id="6-docusaurus-with-api-docs-plugin">6. <strong>Docusaurus with API Docs Plugin</strong></h4>

<ul>
  <li><strong>Overview</strong>: Docusaurus is a static site generator designed for documentation websites. Using plugins, it can also support API documentation.</li>
  <li><strong>Key Features</strong>:
    <ul>
      <li>React-based static site generator.</li>
      <li>Easily extendable with plugins to handle API documentation.</li>
      <li>Flexible and customizable documentation sites, supporting markdown and custom layouts.</li>
    </ul>
  </li>
  <li><strong>Use Case</strong>: Great for companies or projects that need a full documentation website with an API section.</li>
  <li><strong>Website</strong>: <a href="https://docusaurus.io/">Docusaurus</a></li>
</ul>

<h4 id="7-docz">7. <strong>Docz</strong></h4>

<ul>
  <li><strong>Overview</strong>: Docz is a documentation tool for building beautiful and interactive API docs using MDX (a mix of Markdown and JSX).</li>
  <li><strong>Key Features</strong>:
    <ul>
      <li>Highly customizable and developer-friendly.</li>
      <li>Interactive components (since it supports JSX).</li>
      <li>Great for documenting components and APIs in React-based projects.</li>
    </ul>
  </li>
  <li><strong>Use Case</strong>: Ideal for projects that need interactive documentation, especially in the context of React or component-based libraries.</li>
  <li><strong>Website</strong>: <a href="https://www.docz.site/">Docz</a></li>
</ul>

<h4 id="8-sphinx">8. <strong>Sphinx</strong></h4>

<ul>
  <li><strong>Overview</strong>: Sphinx is a Python documentation generator, but it can be extended to document APIs using plugins such as <code class="language-plaintext highlighter-rouge">sphinxcontrib-httpdomain</code>.</li>
  <li><strong>Key Features</strong>:
    <ul>
      <li>Markdown and reStructuredText support.</li>
      <li>Highly customizable via extensions.</li>
      <li>Many plugins are available, including ones for API documentation.</li>
    </ul>
  </li>
  <li><strong>Use Case</strong>: Often used for documenting Python projects but can be extended to other languages or APIs.</li>
  <li><strong>Website</strong>: <a href="https://www.sphinx-doc.org/">Sphinx</a></li>
</ul>

<h4 id="9-redocly">9. <strong>ReDocly</strong></h4>

<ul>
  <li><strong>Overview</strong>: ReDocly (built on top of Redoc) is a premium solution for API documentation, offering extra features like linting, versioning, and monetization.</li>
  <li><strong>Key Features</strong>:
    <ul>
      <li>API documentation hosting with version control.</li>
      <li>Linter for OpenAPI specifications.</li>
      <li>Full-text search across API docs.</li>
    </ul>
  </li>
  <li><strong>Use Case</strong>: Enterprise-level documentation solution for teams looking for a more comprehensive suite than Redoc.</li>
  <li><strong>Website</strong>: <a href="https://redocly.com/">ReDocly</a></li>
</ul>

<h4 id="10-spectacle">10. <strong>Spectacle</strong></h4>

<ul>
  <li><strong>Overview</strong>: Spectacle is an API documentation tool built on top of OpenAPI.</li>
  <li><strong>Key Features</strong>:
    <ul>
      <li>Simple and easy to set up.</li>
      <li>Provides good visualization for OpenAPI documentation.</li>
      <li>Can be used as a standalone documentation tool or embedded into a project.</li>
    </ul>
  </li>
  <li><strong>Use Case</strong>: Good for teams using OpenAPI and looking for an alternative to Swagger UI.</li>
  <li><strong>Website</strong>: <a href="https://sourcey.com/spectacle/">Spectacle</a></li>
</ul>

<h4 id="11-restlet-studio">11. <strong>Restlet Studio</strong></h4>

<ul>
  <li><strong>Overview</strong>: A full-featured API development platform, Restlet Studio offers API design, testing, and documentation.</li>
  <li><strong>Key Features</strong>:
    <ul>
      <li>API designer and documentation generator.</li>
      <li>Automatically generates interactive docs.</li>
      <li>Supports OpenAPI and RAML.</li>
    </ul>
  </li>
  <li><strong>Use Case</strong>: Useful for teams looking for a visual interface to manage API design and documentation.</li>
  <li><strong>Website</strong>: <a href="https://restlet.studio/">Restlet Studio</a></li>
</ul>

<div id="disqus_thread"></div>
<script>
    /**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    */
    /*
    var disqus_config = function () {
    this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    */
    (function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = 'https://anusree-anilkumar-blog.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    })();
</script>

<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>]]></content><author><name>Anusree Anilkumar</name></author><summary type="html"><![CDATA[Following are the api documentation tools that helps you create api docs in pretty websites.]]></summary></entry><entry><title type="html">Guidelines to cleaner git commits</title><link href="https://anusree6154s.github.io/documentation/git-commit-guidelines" rel="alternate" type="text/html" title="Guidelines to cleaner git commits" /><published>2024-10-31T00:00:00+00:00</published><updated>2024-10-31T00:00:00+00:00</updated><id>https://anusree6154s.github.io/documentation/README</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/git-commit-guidelines"><![CDATA[<h2 id="guidelines-to-cleaner-git-commits">Guidelines to cleaner git commits</h2>

<h3 id="standardized-documentation-followed-for-cleaner-git-commits">Standardized documentation followed for cleaner git commits</h3>
<ul>
  <li><a href="https://github.com/lppedd/idea-conventional-commit">Conventional Commit (Standard one)</a></li>
  <li><a href="https://github.com/RomuloOliveira/commit-messages-guide?tab=readme-ov-file">Commit messages guide (Simplified one - found it useful)</a></li>
  <li><a href="https://github.com/carloscuesta/gitmoji">Add emojis in git commits (For personal ones)</a></li>
</ul>

<h3 id="to-integrate-git-commit-message-helper-to-vs-code">To integrate git commit message helper to vs-code</h3>
<ul>
  <li>
    <h4 id="via-cli">via cli</h4>
    <ul>
      <li><a href="https://github.com/andostronaut/commitizen-code">commitizen-cli documentation</a></li>
      <li>
        <h4 id="method">Method:</h4>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">npm i -g commitizen-cli</code> in vscode terminal</li>
          <li>to use either <code class="language-plaintext highlighter-rouge">commitizen-cli</code> or <code class="language-plaintext highlighter-rouge">npx commitizen-cli (to skip first step)</code></li>
          <li>then follow terminal guidelines</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <h4 id="vscode-extension-not-developed-yet">vscode extension: not developed yet</h4>
  </li>
</ul>

<h2 id="git-commit-practices-pulling-pushing-in-new-branch-squash-etc">Git commit practices (pulling, pushing in new branch, squash etc)</h2>
<ul>
  <li>https://trunkbaseddevelopment.com/</li>
  <li>https://profy.dev/ - website to practise git and agile</li>
</ul>]]></content><author><name>Anusree Anilkumar</name></author><summary type="html"><![CDATA[Guide to how to write cleaner git commits]]></summary></entry><entry><title type="html">Git Commit Standards</title><link href="https://anusree6154s.github.io/documentation/git%20-commit-standards" rel="alternate" type="text/html" title="Git Commit Standards" /><published>2024-10-26T00:00:00+00:00</published><updated>2024-10-26T00:00:00+00:00</updated><id>https://anusree6154s.github.io/documentation/README</id><content type="html" xml:base="https://anusree6154s.github.io/documentation/git%20-commit-standards"><![CDATA[<p>git cheat sheet: https://media.licdn.com/dms/image/v2/D4D22AQFWkWeD6D4ksA/feedshare-shrink_1280/feedshare-shrink_1280/0/1729225766763?e=1732147200&amp;v=beta&amp;t=lRJJDZeffcMU0rbvRJi0oSef2p3xGOG9BQWXG9dhrTQ</p>

<h3 id="example-commit-message">Example Commit Message</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>feat(task-manager): add task sorting feature

Implement a new feature that allows users to sort tasks by their deadlines. This improvement enhances user experience by enabling better task management.
</code></pre></div></div>

<h3 id="breakdown-of-the-commit-message">Breakdown of the Commit Message</h3>

<ol>
  <li><strong>Type</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">feat</code>: This indicates that a new feature has been added to the project.</li>
    </ul>
  </li>
  <li><strong>Scope</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">(task-manager)</code>: This specifies the part of the codebase that the change affects, which is the task manager component.</li>
    </ul>
  </li>
  <li><strong>Description</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">add task sorting feature</code>: A brief summary of what was done. It’s clear and to the point.</li>
    </ul>
  </li>
  <li><strong>Body</strong> (optional):
    <ul>
      <li>The body provides additional context about the change. Here, it describes what the new feature does and its benefits.</li>
    </ul>
  </li>
</ol>

<h3 id="other-examples">Other Examples</h3>

<h4 id="bug-fix">Bug Fix</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fix(task-table): resolve table sorting bug

Fix an issue where tasks were not sorting correctly when the user clicked the header. This resolves discrepancies in the task display order.
</code></pre></div></div>

<h4 id="documentation-update">Documentation Update</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docs: update README with setup instructions

Revise the README to include step-by-step setup instructions for new contributors, improving accessibility to the project.
</code></pre></div></div>

<h4 id="style-change">Style Change</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>style(TaskModal): adjust button alignment

Change the alignment of the buttons in the TaskModal component to improve the visual layout without affecting functionality.
</code></pre></div></div>

<h4 id="refactor">Refactor</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>refactor(file-upload): simplify file validation logic

Refactor the file validation logic in the FileUpload component to make it more readable and maintainable without changing the behavior.
</code></pre></div></div>

<h4 id="test-addition">Test Addition</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test(task-service): add unit tests for createTask function

Add unit tests for the createTask function to ensure that it handles various input scenarios correctly.
</code></pre></div></div>

<h4 id="chore">Chore</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chore: update dependencies

Update project dependencies to their latest versions to improve security and performance.
</code></pre></div></div>

<h3 id="summary">Summary</h3>
<p>By following this structured format, your commit messages become more informative and standardized, making it easier for collaborators and contributors to understand the changes made to the codebase.</p>]]></content><author><name>Anusree Anilkumar</name></author><summary type="html"><![CDATA[Git Commit Standards (Official)]]></summary></entry></feed>